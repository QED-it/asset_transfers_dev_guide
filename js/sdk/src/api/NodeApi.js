/**
 * QEDIT - Asset Transfers
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.4.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 3.3.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AsyncTaskCreatedResponse', 'model/DeleteWalletRequest', 'model/ErrorResponse', 'model/ExportAuditorAccessWalletRequest', 'model/ExportAuditorAccessWalletResponse', 'model/ExportWalletRequest', 'model/ExportWalletResponse', 'model/GenerateWalletRequest', 'model/GetAllWalletsResponse', 'model/GetRulesResponse', 'model/GetTaskStatusRequest', 'model/GetTaskStatusResponse', 'model/GetTasksRequest', 'model/GetTasksResponse', 'model/ImportAuditorAccessWalletRequest', 'model/ImportWalletRequest', 'model/UnlockWalletRequest'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AsyncTaskCreatedResponse'), require('../model/DeleteWalletRequest'), require('../model/ErrorResponse'), require('../model/ExportAuditorAccessWalletRequest'), require('../model/ExportAuditorAccessWalletResponse'), require('../model/ExportWalletRequest'), require('../model/ExportWalletResponse'), require('../model/GenerateWalletRequest'), require('../model/GetAllWalletsResponse'), require('../model/GetRulesResponse'), require('../model/GetTaskStatusRequest'), require('../model/GetTaskStatusResponse'), require('../model/GetTasksRequest'), require('../model/GetTasksResponse'), require('../model/ImportAuditorAccessWalletRequest'), require('../model/ImportWalletRequest'), require('../model/UnlockWalletRequest'));
  } else {
    // Browser globals (root is window)
    if (!root.QedItAssetTransfers) {
      root.QedItAssetTransfers = {};
    }
    root.QedItAssetTransfers.NodeApi = factory(root.QedItAssetTransfers.ApiClient, root.QedItAssetTransfers.AsyncTaskCreatedResponse, root.QedItAssetTransfers.DeleteWalletRequest, root.QedItAssetTransfers.ErrorResponse, root.QedItAssetTransfers.ExportAuditorAccessWalletRequest, root.QedItAssetTransfers.ExportAuditorAccessWalletResponse, root.QedItAssetTransfers.ExportWalletRequest, root.QedItAssetTransfers.ExportWalletResponse, root.QedItAssetTransfers.GenerateWalletRequest, root.QedItAssetTransfers.GetAllWalletsResponse, root.QedItAssetTransfers.GetRulesResponse, root.QedItAssetTransfers.GetTaskStatusRequest, root.QedItAssetTransfers.GetTaskStatusResponse, root.QedItAssetTransfers.GetTasksRequest, root.QedItAssetTransfers.GetTasksResponse, root.QedItAssetTransfers.ImportAuditorAccessWalletRequest, root.QedItAssetTransfers.ImportWalletRequest, root.QedItAssetTransfers.UnlockWalletRequest);
  }
}(this, function(ApiClient, AsyncTaskCreatedResponse, DeleteWalletRequest, ErrorResponse, ExportAuditorAccessWalletRequest, ExportAuditorAccessWalletResponse, ExportWalletRequest, ExportWalletResponse, GenerateWalletRequest, GetAllWalletsResponse, GetRulesResponse, GetTaskStatusRequest, GetTaskStatusResponse, GetTasksRequest, GetTasksResponse, ImportAuditorAccessWalletRequest, ImportWalletRequest, UnlockWalletRequest) {
  'use strict';

  /**
   * Node service.
   * @module api/NodeApi
   * @version 1.4.0
   */

  /**
   * Constructs a new NodeApi. 
   * @alias module:api/NodeApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Delete a wallet
     * @param {module:model/DeleteWalletRequest} deleteWalletRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.nodeDeleteWalletPostWithHttpInfo = function(deleteWalletRequest) {
      var postBody = deleteWalletRequest;

      // verify the required parameter 'deleteWalletRequest' is set
      if (deleteWalletRequest === undefined || deleteWalletRequest === null) {
        throw new Error("Missing the required parameter 'deleteWalletRequest' when calling nodeDeleteWalletPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/node/delete_wallet', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete a wallet
     * @param {module:model/DeleteWalletRequest} deleteWalletRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.nodeDeleteWalletPost = function(deleteWalletRequest) {
      return this.nodeDeleteWalletPostWithHttpInfo(deleteWalletRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Export a viewing key that allows an auditor to view all transactions to and from a wallet. The viewing key is encrypted for the auditor identified by recipient_payment_address. The viewing key does not enable the auditor to make transactions.
     * @param {module:model/ExportAuditorAccessWalletRequest} exportAuditorAccessWalletRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ExportAuditorAccessWalletResponse} and HTTP response
     */
    this.nodeExportAuditorAccessWalletPostWithHttpInfo = function(exportAuditorAccessWalletRequest) {
      var postBody = exportAuditorAccessWalletRequest;

      // verify the required parameter 'exportAuditorAccessWalletRequest' is set
      if (exportAuditorAccessWalletRequest === undefined || exportAuditorAccessWalletRequest === null) {
        throw new Error("Missing the required parameter 'exportAuditorAccessWalletRequest' when calling nodeExportAuditorAccessWalletPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ExportAuditorAccessWalletResponse;

      return this.apiClient.callApi(
        '/node/export_auditor_access_wallet', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Export a viewing key that allows an auditor to view all transactions to and from a wallet. The viewing key is encrypted for the auditor identified by recipient_payment_address. The viewing key does not enable the auditor to make transactions.
     * @param {module:model/ExportAuditorAccessWalletRequest} exportAuditorAccessWalletRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ExportAuditorAccessWalletResponse}
     */
    this.nodeExportAuditorAccessWalletPost = function(exportAuditorAccessWalletRequest) {
      return this.nodeExportAuditorAccessWalletPostWithHttpInfo(exportAuditorAccessWalletRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Export wallet secret key
     * @param {module:model/ExportWalletRequest} exportWalletRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ExportWalletResponse} and HTTP response
     */
    this.nodeExportWalletPostWithHttpInfo = function(exportWalletRequest) {
      var postBody = exportWalletRequest;

      // verify the required parameter 'exportWalletRequest' is set
      if (exportWalletRequest === undefined || exportWalletRequest === null) {
        throw new Error("Missing the required parameter 'exportWalletRequest' when calling nodeExportWalletPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ExportWalletResponse;

      return this.apiClient.callApi(
        '/node/export_wallet', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Export wallet secret key
     * @param {module:model/ExportWalletRequest} exportWalletRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ExportWalletResponse}
     */
    this.nodeExportWalletPost = function(exportWalletRequest) {
      return this.nodeExportWalletPostWithHttpInfo(exportWalletRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Generate a new wallet
     * @param {module:model/GenerateWalletRequest} generateWalletRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.nodeGenerateWalletPostWithHttpInfo = function(generateWalletRequest) {
      var postBody = generateWalletRequest;

      // verify the required parameter 'generateWalletRequest' is set
      if (generateWalletRequest === undefined || generateWalletRequest === null) {
        throw new Error("Missing the required parameter 'generateWalletRequest' when calling nodeGenerateWalletPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/node/generate_wallet', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Generate a new wallet
     * @param {module:model/GenerateWalletRequest} generateWalletRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.nodeGenerateWalletPost = function(generateWalletRequest) {
      return this.nodeGenerateWalletPostWithHttpInfo(generateWalletRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all wallet labels
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetAllWalletsResponse} and HTTP response
     */
    this.nodeGetAllWalletsPostWithHttpInfo = function() {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = GetAllWalletsResponse;

      return this.apiClient.callApi(
        '/node/get_all_wallets', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get all wallet labels
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetAllWalletsResponse}
     */
    this.nodeGetAllWalletsPost = function() {
      return this.nodeGetAllWalletsPostWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get network governance rules
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetRulesResponse} and HTTP response
     */
    this.nodeGetRulesPostWithHttpInfo = function() {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = GetRulesResponse;

      return this.apiClient.callApi(
        '/node/get_rules', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get network governance rules
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetRulesResponse}
     */
    this.nodeGetRulesPost = function() {
      return this.nodeGetRulesPostWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a specific task (by ID)
     * @param {module:model/GetTaskStatusRequest} getTaskStatusRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetTaskStatusResponse} and HTTP response
     */
    this.nodeGetTaskStatusPostWithHttpInfo = function(getTaskStatusRequest) {
      var postBody = getTaskStatusRequest;

      // verify the required parameter 'getTaskStatusRequest' is set
      if (getTaskStatusRequest === undefined || getTaskStatusRequest === null) {
        throw new Error("Missing the required parameter 'getTaskStatusRequest' when calling nodeGetTaskStatusPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetTaskStatusResponse;

      return this.apiClient.callApi(
        '/node/get_task_status', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a specific task (by ID)
     * @param {module:model/GetTaskStatusRequest} getTaskStatusRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetTaskStatusResponse}
     */
    this.nodeGetTaskStatusPost = function(getTaskStatusRequest) {
      return this.nodeGetTaskStatusPostWithHttpInfo(getTaskStatusRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a list of tasks by results/types
     * @param {module:model/GetTasksRequest} getTasksRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetTasksResponse} and HTTP response
     */
    this.nodeGetTasksPostWithHttpInfo = function(getTasksRequest) {
      var postBody = getTasksRequest;

      // verify the required parameter 'getTasksRequest' is set
      if (getTasksRequest === undefined || getTasksRequest === null) {
        throw new Error("Missing the required parameter 'getTasksRequest' when calling nodeGetTasksPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetTasksResponse;

      return this.apiClient.callApi(
        '/node/get_tasks', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a list of tasks by results/types
     * @param {module:model/GetTasksRequest} getTasksRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetTasksResponse}
     */
    this.nodeGetTasksPost = function(getTasksRequest) {
      return this.nodeGetTasksPostWithHttpInfo(getTasksRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Import a viewing key generated by export_auditor_access_wallet. This will create a read-only wallet which can be queried with endpoints such as get_activity and get_balances, but cannot be used to perform transactions.
     * @param {module:model/ImportAuditorAccessWalletRequest} importAuditorAccessWalletRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.nodeImportAuditorAccessWalletPostWithHttpInfo = function(importAuditorAccessWalletRequest) {
      var postBody = importAuditorAccessWalletRequest;

      // verify the required parameter 'importAuditorAccessWalletRequest' is set
      if (importAuditorAccessWalletRequest === undefined || importAuditorAccessWalletRequest === null) {
        throw new Error("Missing the required parameter 'importAuditorAccessWalletRequest' when calling nodeImportAuditorAccessWalletPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/node/import_auditor_access_wallet', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Import a viewing key generated by export_auditor_access_wallet. This will create a read-only wallet which can be queried with endpoints such as get_activity and get_balances, but cannot be used to perform transactions.
     * @param {module:model/ImportAuditorAccessWalletRequest} importAuditorAccessWalletRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.nodeImportAuditorAccessWalletPost = function(importAuditorAccessWalletRequest) {
      return this.nodeImportAuditorAccessWalletPostWithHttpInfo(importAuditorAccessWalletRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Import wallet from secret key
     * @param {module:model/ImportWalletRequest} importWalletRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.nodeImportWalletPostWithHttpInfo = function(importWalletRequest) {
      var postBody = importWalletRequest;

      // verify the required parameter 'importWalletRequest' is set
      if (importWalletRequest === undefined || importWalletRequest === null) {
        throw new Error("Missing the required parameter 'importWalletRequest' when calling nodeImportWalletPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/node/import_wallet', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Import wallet from secret key
     * @param {module:model/ImportWalletRequest} importWalletRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.nodeImportWalletPost = function(importWalletRequest) {
      return this.nodeImportWalletPostWithHttpInfo(importWalletRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Unlocks a wallet for a given amount of seconds [async call]
     * @param {module:model/UnlockWalletRequest} unlockWalletRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AsyncTaskCreatedResponse} and HTTP response
     */
    this.nodeUnlockWalletPostWithHttpInfo = function(unlockWalletRequest) {
      var postBody = unlockWalletRequest;

      // verify the required parameter 'unlockWalletRequest' is set
      if (unlockWalletRequest === undefined || unlockWalletRequest === null) {
        throw new Error("Missing the required parameter 'unlockWalletRequest' when calling nodeUnlockWalletPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = AsyncTaskCreatedResponse;

      return this.apiClient.callApi(
        '/node/unlock_wallet', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Unlocks a wallet for a given amount of seconds [async call]
     * @param {module:model/UnlockWalletRequest} unlockWalletRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AsyncTaskCreatedResponse}
     */
    this.nodeUnlockWalletPost = function(unlockWalletRequest) {
      return this.nodeUnlockWalletPostWithHttpInfo(unlockWalletRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
