/**
 * QED-it - Asset Transfers
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DeleteWalletRequest from '../model/DeleteWalletRequest';
import ExportWalletRequest from '../model/ExportWalletRequest';
import ExportWalletResponse from '../model/ExportWalletResponse';
import GenerateWalletRequest from '../model/GenerateWalletRequest';
import GetAllWalletsResponse from '../model/GetAllWalletsResponse';
import GetRulesResponse from '../model/GetRulesResponse';
import ImportWalletRequest from '../model/ImportWalletRequest';
import UnlockWalletRequest from '../model/UnlockWalletRequest';

/**
* Node service.
* @module api/NodeApi
* @version 1.0.0
*/
export default class NodeApi {

    /**
    * Constructs a new NodeApi. 
    * @alias module:api/NodeApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the nodeDeleteWalletPost operation.
     * @callback module:api/NodeApi~nodeDeleteWalletPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a wallet
     * @param {module:model/DeleteWalletRequest} deleteWalletRequest 
     * @param {module:api/NodeApi~nodeDeleteWalletPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    nodeDeleteWalletPost(deleteWalletRequest, callback) {
      let postBody = deleteWalletRequest;

      // verify the required parameter 'deleteWalletRequest' is set
      if (deleteWalletRequest === undefined || deleteWalletRequest === null) {
        throw new Error("Missing the required parameter 'deleteWalletRequest' when calling nodeDeleteWalletPost");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/node/delete_wallet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the nodeExportWalletPost operation.
     * @callback module:api/NodeApi~nodeExportWalletPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExportWalletResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Export wallet secret key
     * @param {module:model/ExportWalletRequest} exportWalletRequest 
     * @param {module:api/NodeApi~nodeExportWalletPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExportWalletResponse}
     */
    nodeExportWalletPost(exportWalletRequest, callback) {
      let postBody = exportWalletRequest;

      // verify the required parameter 'exportWalletRequest' is set
      if (exportWalletRequest === undefined || exportWalletRequest === null) {
        throw new Error("Missing the required parameter 'exportWalletRequest' when calling nodeExportWalletPost");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ExportWalletResponse;

      return this.apiClient.callApi(
        '/node/export_wallet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the nodeGenerateWalletPost operation.
     * @callback module:api/NodeApi~nodeGenerateWalletPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generate a new wallet
     * @param {module:model/GenerateWalletRequest} generateWalletRequest 
     * @param {module:api/NodeApi~nodeGenerateWalletPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    nodeGenerateWalletPost(generateWalletRequest, callback) {
      let postBody = generateWalletRequest;

      // verify the required parameter 'generateWalletRequest' is set
      if (generateWalletRequest === undefined || generateWalletRequest === null) {
        throw new Error("Missing the required parameter 'generateWalletRequest' when calling nodeGenerateWalletPost");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/node/generate_wallet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the nodeGetAllWalletsPost operation.
     * @callback module:api/NodeApi~nodeGetAllWalletsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAllWalletsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all wallet labels
     * @param {module:api/NodeApi~nodeGetAllWalletsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetAllWalletsResponse}
     */
    nodeGetAllWalletsPost(callback) {
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetAllWalletsResponse;

      return this.apiClient.callApi(
        '/node/get_all_wallets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the nodeGetRulesPost operation.
     * @callback module:api/NodeApi~nodeGetRulesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetRulesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get node rules
     * @param {module:api/NodeApi~nodeGetRulesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetRulesResponse}
     */
    nodeGetRulesPost(callback) {
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetRulesResponse;

      return this.apiClient.callApi(
        '/node/get_rules', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the nodeImportWalletPost operation.
     * @callback module:api/NodeApi~nodeImportWalletPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Import wallet from secret key
     * @param {module:model/ImportWalletRequest} importWalletRequest 
     * @param {module:api/NodeApi~nodeImportWalletPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    nodeImportWalletPost(importWalletRequest, callback) {
      let postBody = importWalletRequest;

      // verify the required parameter 'importWalletRequest' is set
      if (importWalletRequest === undefined || importWalletRequest === null) {
        throw new Error("Missing the required parameter 'importWalletRequest' when calling nodeImportWalletPost");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/node/import_wallet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the nodeUnlockWalletPost operation.
     * @callback module:api/NodeApi~nodeUnlockWalletPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unlocks a wallet for a given amount of seconds
     * @param {module:model/UnlockWalletRequest} unlockWalletRequest 
     * @param {module:api/NodeApi~nodeUnlockWalletPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    nodeUnlockWalletPost(unlockWalletRequest, callback) {
      let postBody = unlockWalletRequest;

      // verify the required parameter 'unlockWalletRequest' is set
      if (unlockWalletRequest === undefined || unlockWalletRequest === null) {
        throw new Error("Missing the required parameter 'unlockWalletRequest' when calling nodeUnlockWalletPost");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/node/unlock_wallet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


}
