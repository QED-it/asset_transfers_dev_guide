/**
 * QEDIT - Asset Transfers
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.5.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 3.3.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ErrorResponse', 'model/GetNetworkActivityRequest', 'model/GetNetworkActivityResponse', 'model/GetSyncStatusResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ErrorResponse'), require('../model/GetNetworkActivityRequest'), require('../model/GetNetworkActivityResponse'), require('../model/GetSyncStatusResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.QedItAssetTransfers) {
      root.QedItAssetTransfers = {};
    }
    root.QedItAssetTransfers.AnalyticsApi = factory(root.QedItAssetTransfers.ApiClient, root.QedItAssetTransfers.ErrorResponse, root.QedItAssetTransfers.GetNetworkActivityRequest, root.QedItAssetTransfers.GetNetworkActivityResponse, root.QedItAssetTransfers.GetSyncStatusResponse);
  }
}(this, function(ApiClient, ErrorResponse, GetNetworkActivityRequest, GetNetworkActivityResponse, GetSyncStatusResponse) {
  'use strict';

  /**
   * Analytics service.
   * @module api/AnalyticsApi
   * @version 1.5.0
   */

  /**
   * Constructs a new AnalyticsApi. 
   * @alias module:api/AnalyticsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Get details on past blocks either by order using start_index and number_of_results or by the tx_hashes of the transactions
     * List all verified Transactions from the network, even ones that do not have anything to do with any Wallet stored in the Node; For each such Transaction all of public information is returned in a structured format; However, no private information is returned even if some private information is known.
     * @param {module:model/GetNetworkActivityRequest} getNetworkActivityRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetNetworkActivityResponse} and HTTP response
     */
    this.analyticsGetNetworkActivityPostWithHttpInfo = function(getNetworkActivityRequest) {
      var postBody = getNetworkActivityRequest;

      // verify the required parameter 'getNetworkActivityRequest' is set
      if (getNetworkActivityRequest === undefined || getNetworkActivityRequest === null) {
        throw new Error("Missing the required parameter 'getNetworkActivityRequest' when calling analyticsGetNetworkActivityPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetNetworkActivityResponse;

      return this.apiClient.callApi(
        '/analytics/get_network_activity', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get details on past blocks either by order using start_index and number_of_results or by the tx_hashes of the transactions
     * List all verified Transactions from the network, even ones that do not have anything to do with any Wallet stored in the Node; For each such Transaction all of public information is returned in a structured format; However, no private information is returned even if some private information is known.
     * @param {module:model/GetNetworkActivityRequest} getNetworkActivityRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetNetworkActivityResponse}
     */
    this.analyticsGetNetworkActivityPost = function(getNetworkActivityRequest) {
      return this.analyticsGetNetworkActivityPostWithHttpInfo(getNetworkActivityRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get blockchain sync status information
     * Returns detailed information about the status of the sync between the QEDIT Node and the underlying Blockchain
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetSyncStatusResponse} and HTTP response
     */
    this.analyticsGetSyncStatusPostWithHttpInfo = function() {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = GetSyncStatusResponse;

      return this.apiClient.callApi(
        '/analytics/get_sync_status', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get blockchain sync status information
     * Returns detailed information about the status of the sync between the QEDIT Node and the underlying Blockchain
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetSyncStatusResponse}
     */
    this.analyticsGetSyncStatusPost = function() {
      return this.analyticsGetSyncStatusPostWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
