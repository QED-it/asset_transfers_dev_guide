/**
 * QED-it - Asset Transfers
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 3.3.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AsyncTaskCreatedResponse', 'model/ErrorResponse', 'model/IssueAssetRequest', 'model/TransferAssetRequest', 'model/UnlockWalletRequest'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AsyncTaskCreatedResponse'), require('../model/ErrorResponse'), require('../model/IssueAssetRequest'), require('../model/TransferAssetRequest'), require('../model/UnlockWalletRequest'));
  } else {
    // Browser globals (root is window)
    if (!root.QedItAssetTransfers) {
      root.QedItAssetTransfers = {};
    }
    root.QedItAssetTransfers.AsyncApi = factory(root.QedItAssetTransfers.ApiClient, root.QedItAssetTransfers.AsyncTaskCreatedResponse, root.QedItAssetTransfers.ErrorResponse, root.QedItAssetTransfers.IssueAssetRequest, root.QedItAssetTransfers.TransferAssetRequest, root.QedItAssetTransfers.UnlockWalletRequest);
  }
}(this, function(ApiClient, AsyncTaskCreatedResponse, ErrorResponse, IssueAssetRequest, TransferAssetRequest, UnlockWalletRequest) {
  'use strict';

  /**
   * Async service.
   * @module api/AsyncApi
   * @version 1.1.0
   */

  /**
   * Constructs a new AsyncApi. 
   * @alias module:api/AsyncApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Unlocks a wallet for a given amount of seconds [async call]
     * @param {module:model/UnlockWalletRequest} unlockWalletRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AsyncTaskCreatedResponse} and HTTP response
     */
    this.nodeUnlockWalletPostWithHttpInfo = function(unlockWalletRequest) {
      var postBody = unlockWalletRequest;

      // verify the required parameter 'unlockWalletRequest' is set
      if (unlockWalletRequest === undefined || unlockWalletRequest === null) {
        throw new Error("Missing the required parameter 'unlockWalletRequest' when calling nodeUnlockWalletPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = AsyncTaskCreatedResponse;

      return this.apiClient.callApi(
        '/node/unlock_wallet', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Unlocks a wallet for a given amount of seconds [async call]
     * @param {module:model/UnlockWalletRequest} unlockWalletRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AsyncTaskCreatedResponse}
     */
    this.nodeUnlockWalletPost = function(unlockWalletRequest) {
      return this.nodeUnlockWalletPostWithHttpInfo(unlockWalletRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Issue assets [async call]
     * @param {module:model/IssueAssetRequest} issueAssetRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AsyncTaskCreatedResponse} and HTTP response
     */
    this.walletIssueAssetPostWithHttpInfo = function(issueAssetRequest) {
      var postBody = issueAssetRequest;

      // verify the required parameter 'issueAssetRequest' is set
      if (issueAssetRequest === undefined || issueAssetRequest === null) {
        throw new Error("Missing the required parameter 'issueAssetRequest' when calling walletIssueAssetPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = AsyncTaskCreatedResponse;

      return this.apiClient.callApi(
        '/wallet/issue_asset', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Issue assets [async call]
     * @param {module:model/IssueAssetRequest} issueAssetRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AsyncTaskCreatedResponse}
     */
    this.walletIssueAssetPost = function(issueAssetRequest) {
      return this.walletIssueAssetPostWithHttpInfo(issueAssetRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Transfer assets [async call]
     * @param {module:model/TransferAssetRequest} transferAssetRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AsyncTaskCreatedResponse} and HTTP response
     */
    this.walletTransferAssetPostWithHttpInfo = function(transferAssetRequest) {
      var postBody = transferAssetRequest;

      // verify the required parameter 'transferAssetRequest' is set
      if (transferAssetRequest === undefined || transferAssetRequest === null) {
        throw new Error("Missing the required parameter 'transferAssetRequest' when calling walletTransferAssetPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = AsyncTaskCreatedResponse;

      return this.apiClient.callApi(
        '/wallet/transfer_asset', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Transfer assets [async call]
     * @param {module:model/TransferAssetRequest} transferAssetRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AsyncTaskCreatedResponse}
     */
    this.walletTransferAssetPost = function(transferAssetRequest) {
      return this.walletTransferAssetPostWithHttpInfo(transferAssetRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
