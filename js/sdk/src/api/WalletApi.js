/**
 * QEDIT - Asset Transfers
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.6.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 3.3.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AsyncTaskCreatedResponse', 'model/CreateRuleRequest', 'model/DeleteRuleRequest', 'model/ErrorResponse', 'model/GetNewAddressRequest', 'model/GetNewAddressResponse', 'model/GetPublicKeyRequest', 'model/GetPublicKeyResponse', 'model/GetWalletActivityRequest', 'model/GetWalletActivityResponse', 'model/GetWalletBalanceRequest', 'model/GetWalletBalanceResponse', 'model/IssueAssetRequest', 'model/TransferAssetRequest'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AsyncTaskCreatedResponse'), require('../model/CreateRuleRequest'), require('../model/DeleteRuleRequest'), require('../model/ErrorResponse'), require('../model/GetNewAddressRequest'), require('../model/GetNewAddressResponse'), require('../model/GetPublicKeyRequest'), require('../model/GetPublicKeyResponse'), require('../model/GetWalletActivityRequest'), require('../model/GetWalletActivityResponse'), require('../model/GetWalletBalanceRequest'), require('../model/GetWalletBalanceResponse'), require('../model/IssueAssetRequest'), require('../model/TransferAssetRequest'));
  } else {
    // Browser globals (root is window)
    if (!root.QeditAssetTransfers) {
      root.QeditAssetTransfers = {};
    }
    root.QeditAssetTransfers.WalletApi = factory(root.QeditAssetTransfers.ApiClient, root.QeditAssetTransfers.AsyncTaskCreatedResponse, root.QeditAssetTransfers.CreateRuleRequest, root.QeditAssetTransfers.DeleteRuleRequest, root.QeditAssetTransfers.ErrorResponse, root.QeditAssetTransfers.GetNewAddressRequest, root.QeditAssetTransfers.GetNewAddressResponse, root.QeditAssetTransfers.GetPublicKeyRequest, root.QeditAssetTransfers.GetPublicKeyResponse, root.QeditAssetTransfers.GetWalletActivityRequest, root.QeditAssetTransfers.GetWalletActivityResponse, root.QeditAssetTransfers.GetWalletBalanceRequest, root.QeditAssetTransfers.GetWalletBalanceResponse, root.QeditAssetTransfers.IssueAssetRequest, root.QeditAssetTransfers.TransferAssetRequest);
  }
}(this, function(ApiClient, AsyncTaskCreatedResponse, CreateRuleRequest, DeleteRuleRequest, ErrorResponse, GetNewAddressRequest, GetNewAddressResponse, GetPublicKeyRequest, GetPublicKeyResponse, GetWalletActivityRequest, GetWalletActivityResponse, GetWalletBalanceRequest, GetWalletBalanceResponse, IssueAssetRequest, TransferAssetRequest) {
  'use strict';

  /**
   * Wallet service.
   * @module api/WalletApi
   * @version 1.6.1
   */

  /**
   * Constructs a new WalletApi. 
   * @alias module:api/WalletApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the walletCreateRulePost operation.
     * @callback module:api/WalletApi~walletCreateRulePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AsyncTaskCreatedResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new Rule in the network [async call]
     * Create new Rules that can either create a new admin, a new issuer, or both; The Rules are created by a Wallet that needs to have admin rights; The Rules grant rights to other Wallets through the Wallets&#39; public keys.
     * @param {module:model/CreateRuleRequest} createRuleRequest 
     * @param {module:api/WalletApi~walletCreateRulePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AsyncTaskCreatedResponse}
     */
    this.walletCreateRulePost = function(createRuleRequest, callback) {
      var postBody = createRuleRequest;

      // verify the required parameter 'createRuleRequest' is set
      if (createRuleRequest === undefined || createRuleRequest === null) {
        throw new Error("Missing the required parameter 'createRuleRequest' when calling walletCreateRulePost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = AsyncTaskCreatedResponse;

      return this.apiClient.callApi(
        '/wallet/create_rule', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the walletDeleteRulePost operation.
     * @callback module:api/WalletApi~walletDeleteRulePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AsyncTaskCreatedResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an existing Rule from the network [async call]
     * Delete an existing Rule from the network; The Rule is deleted by a Wallet which needs to have admin rights.
     * @param {module:model/DeleteRuleRequest} deleteRuleRequest 
     * @param {module:api/WalletApi~walletDeleteRulePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AsyncTaskCreatedResponse}
     */
    this.walletDeleteRulePost = function(deleteRuleRequest, callback) {
      var postBody = deleteRuleRequest;

      // verify the required parameter 'deleteRuleRequest' is set
      if (deleteRuleRequest === undefined || deleteRuleRequest === null) {
        throw new Error("Missing the required parameter 'deleteRuleRequest' when calling walletDeleteRulePost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = AsyncTaskCreatedResponse;

      return this.apiClient.callApi(
        '/wallet/delete_rule', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the walletGetActivityPost operation.
     * @callback module:api/WalletApi~walletGetActivityPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetWalletActivityResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get wallet activity (transactions)
     * List transactions that were created by a specifed Wallet or that affected that Wallet; All known details of each such transaction will be returned.
     * @param {module:model/GetWalletActivityRequest} getWalletActivityRequest 
     * @param {module:api/WalletApi~walletGetActivityPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetWalletActivityResponse}
     */
    this.walletGetActivityPost = function(getWalletActivityRequest, callback) {
      var postBody = getWalletActivityRequest;

      // verify the required parameter 'getWalletActivityRequest' is set
      if (getWalletActivityRequest === undefined || getWalletActivityRequest === null) {
        throw new Error("Missing the required parameter 'getWalletActivityRequest' when calling walletGetActivityPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetWalletActivityResponse;

      return this.apiClient.callApi(
        '/wallet/get_activity', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the walletGetBalancesPost operation.
     * @callback module:api/WalletApi~walletGetBalancesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetWalletBalanceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get wallets balances
     * Get a list of the Asset Types held within a given Wallet and the amount of each type held.
     * @param {module:model/GetWalletBalanceRequest} getWalletBalanceRequest 
     * @param {module:api/WalletApi~walletGetBalancesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetWalletBalanceResponse}
     */
    this.walletGetBalancesPost = function(getWalletBalanceRequest, callback) {
      var postBody = getWalletBalanceRequest;

      // verify the required parameter 'getWalletBalanceRequest' is set
      if (getWalletBalanceRequest === undefined || getWalletBalanceRequest === null) {
        throw new Error("Missing the required parameter 'getWalletBalanceRequest' when calling walletGetBalancesPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetWalletBalanceResponse;

      return this.apiClient.callApi(
        '/wallet/get_balances', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the walletGetNewAddressPost operation.
     * @callback module:api/WalletApi~walletGetNewAddressPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNewAddressResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a new address from a given diversifier or generate randomly
     * Generate an Address for the Wallet; the address can be used by other Wallet owners to issue or transfer Assets into said Wallet; If a diversifier is provided, then the generated address is deterministically generated from the diversifier; If the diversifier is omitted, then a random diversifier is used and the resulting Address will be random; in both cases the Address cannot be linked to the Wallet by parties that do not have access to the Wallet. All generated Addresses of a Wallet are always valid and cannot be invalidated.
     * @param {module:model/GetNewAddressRequest} getNewAddressRequest 
     * @param {module:api/WalletApi~walletGetNewAddressPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNewAddressResponse}
     */
    this.walletGetNewAddressPost = function(getNewAddressRequest, callback) {
      var postBody = getNewAddressRequest;

      // verify the required parameter 'getNewAddressRequest' is set
      if (getNewAddressRequest === undefined || getNewAddressRequest === null) {
        throw new Error("Missing the required parameter 'getNewAddressRequest' when calling walletGetNewAddressPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetNewAddressResponse;

      return this.apiClient.callApi(
        '/wallet/get_new_address', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the walletGetPublicKeyPost operation.
     * @callback module:api/WalletApi~walletGetPublicKeyPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetPublicKeyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get wallet public key
     * Get the unique public key of the Wallet; This key is unique across the entire network and is used to identify the Wallet.
     * @param {module:model/GetPublicKeyRequest} getPublicKeyRequest 
     * @param {module:api/WalletApi~walletGetPublicKeyPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetPublicKeyResponse}
     */
    this.walletGetPublicKeyPost = function(getPublicKeyRequest, callback) {
      var postBody = getPublicKeyRequest;

      // verify the required parameter 'getPublicKeyRequest' is set
      if (getPublicKeyRequest === undefined || getPublicKeyRequest === null) {
        throw new Error("Missing the required parameter 'getPublicKeyRequest' when calling walletGetPublicKeyPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetPublicKeyResponse;

      return this.apiClient.callApi(
        '/wallet/get_public_key', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the walletIssueAssetPost operation.
     * @callback module:api/WalletApi~walletIssueAssetPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AsyncTaskCreatedResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Issue assets [async call]
     * Issue Assets from a Wallet to a recipient Address; The issuing Wallet is required to have matching issuance rights (in the form of a matching Rule); Issuance can be done either confidentially or in public; In order to issue confidentially, the matching Rule must explicitly allow this.
     * @param {module:model/IssueAssetRequest} issueAssetRequest 
     * @param {module:api/WalletApi~walletIssueAssetPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AsyncTaskCreatedResponse}
     */
    this.walletIssueAssetPost = function(issueAssetRequest, callback) {
      var postBody = issueAssetRequest;

      // verify the required parameter 'issueAssetRequest' is set
      if (issueAssetRequest === undefined || issueAssetRequest === null) {
        throw new Error("Missing the required parameter 'issueAssetRequest' when calling walletIssueAssetPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = AsyncTaskCreatedResponse;

      return this.apiClient.callApi(
        '/wallet/issue_asset', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the walletTransferAssetPost operation.
     * @callback module:api/WalletApi~walletTransferAssetPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AsyncTaskCreatedResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Transfer assets [async call]
     * Transfer a specified amount of a specified Asset Type from a specified Wallet to a specified Address; Transfers are always completely confidential.
     * @param {module:model/TransferAssetRequest} transferAssetRequest 
     * @param {module:api/WalletApi~walletTransferAssetPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AsyncTaskCreatedResponse}
     */
    this.walletTransferAssetPost = function(transferAssetRequest, callback) {
      var postBody = transferAssetRequest;

      // verify the required parameter 'transferAssetRequest' is set
      if (transferAssetRequest === undefined || transferAssetRequest === null) {
        throw new Error("Missing the required parameter 'transferAssetRequest' when calling walletTransferAssetPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = AsyncTaskCreatedResponse;

      return this.apiClient.callApi(
        '/wallet/transfer_asset', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
