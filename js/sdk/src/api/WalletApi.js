/**
 * QED-it - Asset Transfers
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateRuleRequest from '../model/CreateRuleRequest';
import DeleteRuleRequest from '../model/DeleteRuleRequest';
import GetNewAddressRequest from '../model/GetNewAddressRequest';
import GetNewAddressResponse from '../model/GetNewAddressResponse';
import GetPublicKeyRequest from '../model/GetPublicKeyRequest';
import GetPublicKeyResponse from '../model/GetPublicKeyResponse';
import GetWalletBalanceRequest from '../model/GetWalletBalanceRequest';
import GetWalletBalanceResponse from '../model/GetWalletBalanceResponse';
import IssueAssetRequest from '../model/IssueAssetRequest';
import TransferAssetRequest from '../model/TransferAssetRequest';

/**
* Wallet service.
* @module api/WalletApi
* @version 1.0.0
*/
export default class WalletApi {

    /**
    * Constructs a new WalletApi. 
    * @alias module:api/WalletApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the walletCreateRulePost operation.
     * @callback module:api/WalletApi~walletCreateRulePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create &amp; broadcast add-config-rule
     * @param {module:model/CreateRuleRequest} createRuleRequest 
     * @param {module:api/WalletApi~walletCreateRulePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    walletCreateRulePost(createRuleRequest, callback) {
      let postBody = createRuleRequest;

      // verify the required parameter 'createRuleRequest' is set
      if (createRuleRequest === undefined || createRuleRequest === null) {
        throw new Error("Missing the required parameter 'createRuleRequest' when calling walletCreateRulePost");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/wallet/create_rule', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the walletDeleteRulePost operation.
     * @callback module:api/WalletApi~walletDeleteRulePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create &amp; broadcast delete-config-rule
     * @param {module:model/DeleteRuleRequest} deleteRuleRequest 
     * @param {module:api/WalletApi~walletDeleteRulePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    walletDeleteRulePost(deleteRuleRequest, callback) {
      let postBody = deleteRuleRequest;

      // verify the required parameter 'deleteRuleRequest' is set
      if (deleteRuleRequest === undefined || deleteRuleRequest === null) {
        throw new Error("Missing the required parameter 'deleteRuleRequest' when calling walletDeleteRulePost");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/wallet/delete_rule', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the walletGetNewAddressPost operation.
     * @callback module:api/WalletApi~walletGetNewAddressPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNewAddressResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a new address from a given diversifier or generate randomly
     * @param {module:model/GetNewAddressRequest} getNewAddressRequest 
     * @param {module:api/WalletApi~walletGetNewAddressPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNewAddressResponse}
     */
    walletGetNewAddressPost(getNewAddressRequest, callback) {
      let postBody = getNewAddressRequest;

      // verify the required parameter 'getNewAddressRequest' is set
      if (getNewAddressRequest === undefined || getNewAddressRequest === null) {
        throw new Error("Missing the required parameter 'getNewAddressRequest' when calling walletGetNewAddressPost");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetNewAddressResponse;

      return this.apiClient.callApi(
        '/wallet/get_new_address', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the walletGetPublicKeyPost operation.
     * @callback module:api/WalletApi~walletGetPublicKeyPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetPublicKeyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get wallet public key
     * @param {module:model/GetPublicKeyRequest} getPublicKeyRequest 
     * @param {module:api/WalletApi~walletGetPublicKeyPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetPublicKeyResponse}
     */
    walletGetPublicKeyPost(getPublicKeyRequest, callback) {
      let postBody = getPublicKeyRequest;

      // verify the required parameter 'getPublicKeyRequest' is set
      if (getPublicKeyRequest === undefined || getPublicKeyRequest === null) {
        throw new Error("Missing the required parameter 'getPublicKeyRequest' when calling walletGetPublicKeyPost");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetPublicKeyResponse;

      return this.apiClient.callApi(
        '/wallet/get_public_key', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the walletGetWalletBalancesPost operation.
     * @callback module:api/WalletApi~walletGetWalletBalancesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetWalletBalanceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get wallets information
     * @param {module:model/GetWalletBalanceRequest} getWalletBalanceRequest 
     * @param {module:api/WalletApi~walletGetWalletBalancesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetWalletBalanceResponse}
     */
    walletGetWalletBalancesPost(getWalletBalanceRequest, callback) {
      let postBody = getWalletBalanceRequest;

      // verify the required parameter 'getWalletBalanceRequest' is set
      if (getWalletBalanceRequest === undefined || getWalletBalanceRequest === null) {
        throw new Error("Missing the required parameter 'getWalletBalanceRequest' when calling walletGetWalletBalancesPost");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetWalletBalanceResponse;

      return this.apiClient.callApi(
        '/wallet/get_wallet_balances', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the walletIssueAssetPost operation.
     * @callback module:api/WalletApi~walletIssueAssetPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Issue assets
     * @param {module:model/IssueAssetRequest} issueAssetRequest 
     * @param {module:api/WalletApi~walletIssueAssetPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    walletIssueAssetPost(issueAssetRequest, callback) {
      let postBody = issueAssetRequest;

      // verify the required parameter 'issueAssetRequest' is set
      if (issueAssetRequest === undefined || issueAssetRequest === null) {
        throw new Error("Missing the required parameter 'issueAssetRequest' when calling walletIssueAssetPost");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/wallet/issue_asset', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the walletTransferAssetPost operation.
     * @callback module:api/WalletApi~walletTransferAssetPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Transfer assets
     * @param {module:model/TransferAssetRequest} transferAssetRequest 
     * @param {module:api/WalletApi~walletTransferAssetPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    walletTransferAssetPost(transferAssetRequest, callback) {
      let postBody = transferAssetRequest;

      // verify the required parameter 'transferAssetRequest' is set
      if (transferAssetRequest === undefined || transferAssetRequest === null) {
        throw new Error("Missing the required parameter 'transferAssetRequest' when calling walletTransferAssetPost");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/wallet/transfer_asset', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


}
