/**
 * QEDIT - Asset Transfers
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.6.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 3.3.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/NotificationType'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./NotificationType'));
  } else {
    // Browser globals (root is window)
    if (!root.QeditAssetTransfers) {
      root.QeditAssetTransfers = {};
    }
    root.QeditAssetTransfers.Notification = factory(root.QeditAssetTransfers.ApiClient, root.QeditAssetTransfers.NotificationType);
  }
}(this, function(ApiClient, NotificationType) {
  'use strict';



  /**
   * The Notification model module.
   * @module model/Notification
   * @version 1.6.1
   */

  /**
   * Constructs a new <code>Notification</code>.
   * A notification including some metadata and a content field whose type depends on the type of notification.
   * @alias module:model/Notification
   * @class
   * @param id {Number} The unique identifier of the notification. Can be used for pagination purposes.
   * @param createdAt {Date} Timestamp the notification was created at, in RFC-3339 format.
   * @param taskId {String} The ID of the task the notification relates to. May be empty in cases there is no such specific task.
   * @param notificationType {module:model/NotificationType} 
   */
  var exports = function(id, createdAt, taskId, notificationType) {
    var _this = this;

    _this['id'] = id;
    _this['created_at'] = createdAt;
    _this['task_id'] = taskId;
    _this['notification_type'] = notificationType;
  };

  /**
   * Constructs a <code>Notification</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Notification} obj Optional instance to populate.
   * @return {module:model/Notification} The populated <code>Notification</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('id')) {
        obj['id'] = ApiClient.convertToType(data['id'], 'Number');
      }
      if (data.hasOwnProperty('created_at')) {
        obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
      }
      if (data.hasOwnProperty('wallet_id')) {
        obj['wallet_id'] = ApiClient.convertToType(data['wallet_id'], 'String');
      }
      if (data.hasOwnProperty('task_id')) {
        obj['task_id'] = ApiClient.convertToType(data['task_id'], 'String');
      }
      if (data.hasOwnProperty('notification_type')) {
        obj['notification_type'] = NotificationType.constructFromObject(data['notification_type']);
      }
      if (data.hasOwnProperty('content')) {
        obj['content'] = ApiClient.convertToType(data['content'], Object);
      }
    }
    return obj;
  }

  /**
   * The unique identifier of the notification. Can be used for pagination purposes.
   * @member {Number} id
   */
  exports.prototype['id'] = undefined;
  /**
   * Timestamp the notification was created at, in RFC-3339 format.
   * @member {Date} created_at
   */
  exports.prototype['created_at'] = undefined;
  /**
   * The ID of the wallet the notification relates to. May be null in cases there is no such specific wallet.
   * @member {String} wallet_id
   */
  exports.prototype['wallet_id'] = undefined;
  /**
   * The ID of the task the notification relates to. May be empty in cases there is no such specific task.
   * @member {String} task_id
   */
  exports.prototype['task_id'] = undefined;
  /**
   * @member {module:model/NotificationType} notification_type
   */
  exports.prototype['notification_type'] = undefined;
  /**
   * @member {Object} content
   */
  exports.prototype['content'] = undefined;



  return exports;
}));


