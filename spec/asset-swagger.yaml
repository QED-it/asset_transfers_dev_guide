openapi: 3.0.0
info:
  version: 1.6.2
  title: QEDIT - Asset Transfers
  contact:
    name: QEDIT
    url: https://github.com/QED-it/asset_transfers_dev_guide/
    email: dev@qed-it.com
  description: >
    This SDK provides a programmatic way for interacting with QEDIT's _Asset Transfer_ API.
    The specification definition file is publicly available
    [in this repository](https://github.com/QED-it/asset_transfers_dev_guide/).
security:
  - ApiKeyAuth: []
servers:
  - url: http://{server_url}:{port}
    variables:
      server_url:
        default: localhost
      port:
        default: '12052'
paths:
  /wallet/get_balances:
    post:
      tags:
        - Wallet
      summary: Get wallets balances
      description: Get a list of the Asset Types held within a given Wallet and the amount of each type held.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetWalletBalanceRequest'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetWalletBalanceResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /wallet/issue_asset:
    post:
      tags:
        - Wallet
      summary: Issue assets [async call]
      description: Issue Assets from a Wallet to a recipient Address; The issuing Wallet is required to have matching issuance rights (in the form of a matching Rule); Issuance can be done either confidentially or in public; In order to issue confidentially, the matching Rule must explicitly allow this.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IssueAssetRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AsyncTaskCreatedResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /wallet/transfer_asset:
    post:
      tags:
        - Wallet
      summary: Transfer assets [async call]
      description: Transfer a specified amount of a specified Asset Type from a specified Wallet to a specified Address; Transfers are always completely confidential.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransferAssetRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AsyncTaskCreatedResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /wallet/get_new_address:
    post:
      tags:
        - Wallet
      summary: Get a new address from a given diversifier or generate randomly
      description: Generate an Address for the Wallet; the address can be used by other Wallet owners to issue or transfer Assets into said Wallet; If a diversifier is provided, then the generated address is deterministically generated from the diversifier; If the diversifier is omitted, then a random diversifier is used and the resulting Address will be random; in both cases the Address cannot be linked to the Wallet by parties that do not have access to the Wallet. All generated Addresses of a Wallet are always valid and cannot be invalidated.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetNewAddressRequest'
      responses:
        '201':
          description: Success/Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetNewAddressResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /wallet/get_public_key:
    post:
      tags:
        - Wallet
      summary: Get wallet public key
      description: Get the unique public key of the Wallet; This key is unique across the entire network and is used to identify the Wallet.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetPublicKeyRequest'
      responses:
        '200':
          description: Success/Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPublicKeyResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /wallet/create_rule:
    post:
      tags:
        - Wallet
      summary: Create a new Rule in the network [async call]
      description: Create new Rules that can either create a new admin, a new issuer, or both; The Rules are created by a Wallet that needs to have admin rights; The Rules grant rights to other Wallets through the Wallets' public keys.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRuleRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AsyncTaskCreatedResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /wallet/delete_rule:
    post:
      tags:
        - Wallet
      summary: Delete an existing Rule from the network [async call]
      description: Delete an existing Rule from the network; The Rule is deleted by a Wallet which needs to have admin rights.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteRuleRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AsyncTaskCreatedResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /wallet/get_activity:
    post:
      tags:
        - Wallet
      summary: Get wallet activity (transactions)
      description: List transactions that were created by a specifed Wallet or that affected that Wallet; All known details of each such transaction will be returned.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetWalletActivityRequest'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetWalletActivityResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'


  /analytics/get_network_activity:
    post:
      tags:
        - Analytics
      summary: Get details on past blocks either by order using start_index and number_of_results or by the tx_hashes of the transactions
      description: List all verified Transactions from the network, even ones that do not have anything to do with any Wallet stored in the Node; For each such Transaction all of public information is returned in a structured format; However, no private information is returned even if some private information is known.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetNetworkActivityRequest'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetNetworkActivityResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /analytics/get_sync_status:
    post:
      tags:
        - Analytics
      summary: Get blockchain sync status information
      description: Returns detailed information about the status of the sync between the QEDIT Node and the underlying Blockchain
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSyncStatusResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /node/generate_wallet:
    post:
      tags:
        - Node
      summary: Generate a new Wallet
      description: Randomly generate a new Wallet under a specified ID; This only affects the Node and in particular nothing about this action is broadcast to the Blockchain; The Wallet ID is required to be unique within the Node, but can otherwise be user-defined.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenerateWalletRequest'
      responses:
        '200':
          description: Success
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /node/delete_wallet:
    post:
      tags:
        - Node
      summary: Delete a Wallet [async call]
      description: Deletes a Wallet from the Node; All private information about the Wallet will be deleted including transactional history, balances, and keys; If the secret key of the Wallet are not stored elsewhere then all Assets held in the Wallet will be forever lost! If the secret key of the Wallet is stored elsewhere, then all held Assets and the entire transactional history of the Wallet can be restored from the Blockchain at any time by importing the Wallet into a Node.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteWalletRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AsyncTaskCreatedResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /node/export_wallet:
    post:
      tags:
        - Node
      summary: Export wallet secret key
      description: Export an encrypted form of the Wallet's secret key; The authorization password under which the secret key is encrypted is the same one under which it was originally created or imported; Knowledge of the secret key and the authorization password is required to import the Wallet into a Node in the future.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExportWalletRequest'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExportWalletResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /node/import_wallet:
    post:
      tags:
        - Node
      summary: Import Wallet from a known secret key and authorization [async call]
      description: Import a Wallet into the Node under a specified ID; All the transactional history and outstanding balanced of the Wallet will be extracted from the Blockchain; The Wallet ID is required to be unique within the Node, but can otherwise be user-defined.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportWalletRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AsyncTaskCreatedResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /node/export_auditor_access_wallet:
    post:
      tags:
        - Node
      summary: Export viewing credentials for a Wallet
      description: Export a viewing key that allows viewing all transactions to and from a wallet, including past transactions. The viewing key is encrypted for a specific Address, and can only be recovered by someone in possession of either a secret key or a viewing key for the Wallet that Address belongs to. The viewing key does enable making any transactions (including rule changes, issuance, and transfers) on behalf of the exported Wallet.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExportAuditorAccessWalletRequest'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExportAuditorAccessWalletResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /node/import_auditor_access_wallet:
    post:
      tags:
        - Node
      summary: Import viewing credentials for a Wallet [async call]
      description: Import a viewing key generated by the export_auditor_access_wallet endpoint. This will create a read-only wallet which can be queried with endpoints such as get_activity and get_balances, but cannot be used to perform transactions. The Wallet whose Address was used as the recipient for the exported viewing key must already be imported within the Node in order for this process to succeed.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportAuditorAccessWalletRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AsyncTaskCreatedResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /node/get_rules:
    post:
      tags:
        - Node
      summary: Get network governance Rules
      description: Returns a full list of all the Rules that govern admin and issuance rights within the network.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetRulesResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /node/get_all_wallets:
    post:
      tags:
        - Node
      summary: Get all wallet IDs
      description: Returns a list of the IDs of all Wallets currently stored on the Node. Both full-access and view-only Wallets are listed.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllWalletsResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /node/get_task_status:
    post:
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetTaskStatusRequest'
      tags:
        - Node
      summary: Get a specific task (by ID)
      description: Returns the meta-data of a given Task and its current status. The particular, private details of the Task such as an Asset ID or amount in a Transfer are not returned.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetTaskStatusResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /node/get_tasks:
    post:
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetTasksRequest'
      tags:
        - Node
      summary: Get a (potentially) filtered list of all Tasks
      description: Returns a list of all Tasks along with their meta-data and statuses. The particular, private details of the Task such as an Asset ID or amount in a Transfer are not returned. Tasks can be filtered using various parameters as specified in the request body.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetTasksResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /node/approve_task:
    post:
      tags:
        - Node
      summary: Approve task with pending incoming transaction [async call]
      description:  Confirmation request tasks are confirmed using this point. After the user confirms the incoming transaction, it is asynchronously sent to the blockchain and its status can be queried like any other async task.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskActionRequest'
      responses:
        '200':
          description: Success
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /node/cancel_task:
    post:
      tags:
        - Node
      summary: Cancel task with pending incoming transaction both incoming and outgoing [async call]
      description:  A user may select to decline an incoming transaction. The related task will change its result to failure both on senders and the receivers side. This endpoint can also be used to cancel an outgoing pending transaction that is awaiting user interaction from the receiver
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskActionRequest'
      responses:
        '201':
          description: A new task will be created and returned. If sender's cancellation is triggered, the task will be asynchronous and require the user to monitor its progress.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AsyncTaskCreatedResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /node/get_notifications:
    post:
      tags:
        - Node
      summary: Get notifications
      description: Notifications are the Node's way to report about recent activity and status changes. This endpoint allows polling for these changes and fetching the updates. The notifications can be filtered in multiple ways.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetNotificationsRequest'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetNotificationsResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /health:
    post:
      tags:
        - Health
      summary: Perform a healthcheck of the node and its dependent services
      description: Reports the health of the various components of the system as well as an overall status for the Node. If the Node's status is good, then the Node is synced with the Blockchain and can successfully process requests.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthcheckResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      name: x-auth-token
      in: header
  schemas:
    AssetId:
      type: string
      description: >
        The ID of an Asset Type. It must be a string of length 0 to 40 characters.
        Allowed characters are lower- and uppercase letters, digits, dot (.), and hyphen (-).
        It must not end with an hyphen. Asset IDs are case-sensitive.
    Namespace:
      type: string
      description: >
        A `Namespace` describes what Asset IDs can be issued in an Issuance Rule.
        It is a string in the same format as `AssetId`.
        Additionally, if it ends with a wildcard character `*`, then the namespace covers
        all asset IDs with the namespace as a prefix. Without a final wildcard, the namespace covers
        exactly one asset ID.
        Example: The namespace `currencies.dollar` covers only this exact asset type, while
        `currencies.*` covers all asset types that start with `currencies.`.
    GetWalletBalanceRequest:
      type: object
      properties:
        wallet_id:
          type: string
          description: The ID of the Wallet
      required:
        - wallet_id
      example:
        wallet_id: source_wallet
    BalanceForAsset:
      type: object
      properties:
        asset_id:
          $ref: '#/components/schemas/AssetId'
        amount:
          type: integer
          description: The outstanding balance for the Asset Type
      required:
        - asset_id
        - amount
      example:
        wallet_id: source_wallet
    GetWalletBalanceResponse:
      type: object
      properties:
        wallet_id:
          type: string
          description: The ID of the Wallet
        assets:
          type: array
          items:
            $ref: '#/components/schemas/BalanceForAsset'
          description: The balances of the various Asset Types held by the Wallet
      required:
        - wallet_id
        - assets
      example:
        wallet_id: source_wallet
        assets:
          - asset_id: "bank-a.loans.1"
            amount: 8
          - asset_id: "bank-a.loans.2"
            amount: 200
    TransferAssetRequest:
      type: object
      properties:
        wallet_id:
          type: string
          description: The ID of the Wallet to transfer from
        authorization:
          type: string
          description: The authorization password for the Wallet to transfer from
        recipient_address:
          type: string
          description: The Address of the recipient of the funds
        asset_id:
          $ref: '#/components/schemas/AssetId'
        amount:
          type: integer
          description: The amount of assets to transfer
        memo:
          type: string
          description: An app-customizable field to store additional private data relating to the transfer; the memo is shared between the sender and the receiver, but is not divulged to other parties
        require_confirmation_from:
          type: string
          description: A user may request confirmation from the receiving party. If a public key of the approver is included in this optional field, the transaction will only become valid after the received signs it. The receiver will be able to decide whether to accept or reject the transfer by calling the /node/approve_task or the /node/reject_task respectively.
      required:
        - wallet_id
        - authorization
        - recipient_address
        - amount
        - asset_id
        - memo
      example:
        wallet_id: source_wallet
        authorization: PrivacyIsAwesome
        recipient_address: q1dxlf6vap2566t8w3z8f5j5lxy9n036zfsaytjve7fedsw6w8c9q9ctrwfz6ryyjwkgvj6tjg70f
        asset_id: "bank-a.loans.1"
        amount: 4
        memo: '{"recipient_name": "Dan"}'
        require_confirmation_from: bf45ab74bd4a46fe7a2432ba05e2f726bf4fe42a80052849e13e2541230d3204
    TaskActionRequest:
      type: object
      description: To approve or cancel a task, the user should include the task id and authorization of the wallet related to this task.
      properties:
        task_id:
          type: string
        authorization:
          type: string
      required:
        - task_id
        - authorization
      example:
        task_id: "5aaa4045-e949-4c44-a7ef-25fb55a1afa6"
        authorization: PrivacyIsAwesome

    GetNotificationsRequest:
      type: object
      description: The request body determines which filters to apply to the notifications. All filters are optional, while the maximal number of results defaults to 100 and the order defaults to descending.
      properties:
        wallet_id:
          type: string
          description: "Fetch notifications that relate to this wallet ID only"
        types:
          type: array
          items:
            $ref: '#/components/schemas/NotificationType'
        starting_with_time:
          type: string
          format: date
          description: Fetch notifications reported at this timestamp or later/earlier. Later notifications will be fetched if the order is ascending, and earlier ones if the order is descending. The timestamp is expected to be in RFC-3339 format.
        after_id:
          type: integer
          description: Fetch notifications after this given ID (not including the notification with the given ID). This is meant to facilitate pagination. Later notifications will be fetched if ascending order is selected, and earlier ones if descending order is selected. Warning - do not assume anything about the implementation of after_id; the values of the ID are intended to be copy-pasted from retrieved notifications for pagination.
        order:
          $ref: '#/components/schemas/OrderEnum'
        max_results:
          type: integer
          description: The maximal number of results to fetch
          minimum: 1
          maximum: 1000
          default: 100

    NotificationType:
      type: string
      enum:
        - task_completed_successfully
        - task_failed
      description: The type of notification. This also determines the type of the content of the notification.

    OrderEnum:
      type: string
      enum:
        - asc
        - desc
      default: desc
      description: Order of results to fetch (either ascending or descending); ordering is chronological where the time is set to when the retrieved object was created

    GetNotificationsResponse:
      type: object
      properties:
        notifications:
          type: array
          items:
            $ref: '#/components/schemas/Notification'

    Notification:
      type: object
      description: A notification including some metadata and a content field whose type depends on the type of notification.
      properties:
        id:
          type: integer
          description: The unique identifier of the notification. Can be used for pagination purposes.
        created_at:
          type: string
          format: date
          description: Timestamp the notification was created at, in RFC-3339 format.
        wallet_id:
          type: string
          description: The ID of the wallet the notification relates to. May be null in cases there is no such specific wallet.
        task_id:
          type: string
          description: The ID of the task the notification relates to. May be empty in cases there is no such specific task.
        notification_type:
          $ref: '#/components/schemas/NotificationType'
        content:
          oneOf:
            - $ref: '#/components/schemas/EmptyContent'
      required:
        - id
        - created_at
        - task_id
        - notification_type

    EmptyContent:
      type: object

    GetWalletActivityRequest:
      type: object
      properties:
        wallet_id:
          type: string
          description: The ID of the Wallet for which to retrieve activity history
        start_index:
          type: integer
          description: An offset used to paginate through the activity history; indexing is 0-based
        number_of_results:
          type: integer
          description: Maximal number of results to fetch in this call
      required:
        - wallet_id
        - start_index
        - number_of_results
      example:
        wallet_id: source_wallet
        start_index: 0
        number_of_results: 10
    GetRulesResponse:
      type: object
      properties:
        rules:
          type: array
          items:
            $ref: '#/components/schemas/Rule'
          description: The Rules currently active in the network
    GetAllWalletsResponse:
      type: object
      properties:
        wallet_ids:
          type: array
          items:
            type: string
          description: The IDs of the Wallets currently active in this Node
      example:
        wallet_ids:
          - Jane
          - John
          - Marty
    GetTaskStatusRequest:
      type: object
      properties:
        id:
          type: string
          description: The ID of the Task
      required:
        - id
      example:
        id: "5aaa4045-e949-4c44-a7ef-25fb55a1afa6"
    GetTasksRequest:
      type: object
      properties:
        start_index:
          type: integer
          description: An offset used to paginate through the Task list; indexing is 0-based
        number_of_results:
          type: integer
          description: Maximal number of results to fetch in this call
        types:
          type: array
          items:
            $ref: '#/components/schemas/TaskType'
          description: Types of Tasks to fetch; fetch all types if omitted
        results:
          type: array
          items:
            $ref: '#/components/schemas/Result'
          description: List of results (statuses) to filter by; fetch in_progress tasks if omitted
        #          default: [in_progress]
        order:
          $ref: '#/components/schemas/OrderEnum'
      required:
        - start_index
        - number_of_results
      example:
        start_index: 0
        number_of_results: 10
        types: ["delete_wallet", "transfer_asset"]
        results: ["in_progress", "failure"]
        order: "asc"
    GetTaskStatusResponse:
      type: object
      properties:
        id:
          type: string
          description: Unique ID of the Task
        created_at:
          type: string
          format: date
          description: UTC time of creation of the Task in RFC-3339 format
        updated_at:
          type: string
          format: date
          description: UTC last time the Task was updated in RFC-3339 format
        result:
          $ref: '#/components/schemas/Result'
        state:
          $ref: '#/components/schemas/TaskState'
        tx_hash:
          type: string
          description: The Blockchain-generated hash of the Transaction; populated after the Blockchain Node accepted the Transaction
        qedit_tx_hash:
          type: string
          description: The QEDIT-generated hash of the Transaction; generated after proof generation, but prior to Broadcast by the QEDIT Node
        type:
          $ref: '#/components/schemas/TaskType'
        data:
          $ref: '#/components/schemas/TaskData'
        error:
          type: string
          description: In case of failure this field reports the reason for the failure
      example:
        id: "5aaa4045-e949-4c44-a7ef-25fb55a1afa6"
        created_at: "2019-08-11T10:37:04Z"
        updated_at: "2019-08-12T11:12:59Z"
        result: "in_progress"
        state: "tx_submitted"
        tx_hash: "0xd379aa4e5e40552910c8ae456c65dcf51e9779fc9281ac2dc9e677ec810af6b1"
        type: "transfer_asset"
        data: {}
    Result:
      type: string
      enum:
        - pending
        - in_progress
        - awaiting_user_interaction
        - success
        - failure
      description: The current result (status) of the Task
    TaskState:
      type: string
      enum:
        - pending_state
        - in_progress_state
        - tx_generated_state
        - conf_req_sent_state
        - conf_req_received_state
        - conf_req_canceled_by_sender_state
        - conf_req_canceled_by_receiver_state
        - tx_submitted_state
        - failure_state
        - success_state
      description: A fine-grained status of the node's inner state. This field is subject to changes and should not be relied upon during development.
    TaskType:
      type: string
      enum:
        - transfer_asset
        - issue_asset
        - alter_rule
        - import_wallet
        - delete_wallet
        - outgoing_confirm_request
        - incoming_confirm_request
        - cancellation
      description: Task type
    TaskData:
      type: object
      description: An object that includes additional request details
      properties:
        sender_public_key:
          type: string
          description: The public key of the sender of the confirmation request
        require_confirmation_from:
          type: string
          description: The public key for the confirmation request receiver
        recipient_address:
          type: string
          description: The address the request was sent to
        asset_id:
          type: string
        amount:
          type: integer
        wallet_id:
          type: string
    GetTasksResponse:
      type: object
      properties:
        tasks:
          type: array
          items:
            $ref: '#/components/schemas/GetTaskStatusResponse'
          description: The returned Tasks array, sorted in the requested order
    GetNetworkActivityRequest:
      type: object
      properties:
        start_index:
          type: integer
          description: An offset used to paginate through the activity history; indexing is 0-based
        number_of_results:
          type: integer
          description: Maximal number of results to fetch in this call
        tx_hashes:
          type: array
          items:
            type: string
      required:
        - start_index
        - number_of_results
      example:
        start_index: 0
        number_of_results: 1
        tx_hashes: ["0xd379aa4e5e40552910c8ae456c65dcf51e9779fc9281ac2dc9e677ec810af6b1"]
    GetNetworkActivityResponse:
      type: object
      properties:
        transactions:
          type: array
          items:
            $ref: '#/components/schemas/AnalyticTransaction'
    GetSyncStatusResponse:
      type: object
      properties:
        in_sync:
          type: boolean
          description: Boolean signifying whether the QEDIT Node is in sync with the Blockchain;
            false if the Node is not synced; sync is defined as having less than a preconfigured difference between the current Blockchain height and the last block processed by the Node; the allowed difference defaults to 5, but can be configured when setting up the Node
        blockchain_block_height:
          type: integer
          description: The current block height of the Blockchain
        last_processed_block_height:
          type: integer
          description: The height of the last block that was processed in the Node
    IssueAssetRequest:
      type: object
      properties:
        wallet_id:
          type: string
          description: The ID of the Wallet that has the required Issuance privileges
        authorization:
          type: string
          description: The authorization password for the Wallet that has the Issuance privileges
        recipient_address:
          type: string
          description: The Address of the recipient of the issued Assets
        asset_id:
          $ref: '#/components/schemas/AssetId'
        amount:
          type: integer
          description: the amount of Assets to issue
        confidential:
          type: boolean
          description: Boolean which should be true if the issuance should be confidential, and false of the Issuance should be public
        memo:
          type: string
      required:
        - wallet_id
        - authorization
        - recipient_address
        - amount
        - confidential
        - asset_id
        - memo
      example:
        wallet_id: source_wallet
        authorization: PrivacyIsAwesome
        recipient_address: q1dxlf6vap2566t8w3z8f5j5lxy9n036zfsaytjve7fedsw6w8c9q9ctrwfz6ryyjwkgvj6tjg70f
        amount: 4
        asset_id: "bank-a.loans.1"
        confidential: false
        memo: '{"recipient_name": "Dan"}'
    GetNewAddressRequest:
      type: object
      properties:
        wallet_id:
          type: string
          description: The ID of the Wallet for which to generate an Address
        diversifier:
          type: string
          description: An optional 11-byte (22 hexadecimal characters) input which is used to generate different Addresses. A unique Address will be generated for each different diversifier used. If omitted, the Node selects a random diversifier.
      required:
        - wallet_id
      example:
        wallet_id: source_wallet
    GetNewAddressResponse:
      type: object
      properties:
        wallet_id:
          type: string
          description: The ID of the Wallet the Address belongs to
        recipient_address:
          type: string
          description: The generated Address of the Wallet
      required:
        - wallet_id
        - recipient_address
      example:
        wallet_id: source_wallet
        recipient_address: q1dxlf6vap2566t8w3z8f5j5lxy9n036zfsaytjve7fedsw6w8c9q9ctrwfz6ryyjwkgvj6tjg70f
    GetPublicKeyRequest:
      type: object
      properties:
        wallet_id:
          type: string
          description: The ID of the Wallet for which to retrieve the public key
      required:
        - wallet_id
      example:
        wallet_id: source_wallet
    GetPublicKeyResponse:
      type: object
      properties:
        wallet_id:
          type: string
          description: The ID of the Wallet the pubic key belongs to
        public_key:
          type: string
          description: The public key of the Wallet
      required:
        - wallet_id
        - public_key
      example:
        wallet_id: source_wallet
        public_key: bf45ab74bd4a46fe7a2432ba05e2f726bf4fe42a80052849e13e2541230d3204
    ExportWalletRequest:
      type: object
      properties:
        wallet_id:
          type: string
          description: The ID of the Wallet to export
      required:
        - wallet_id
      example:
        wallet_id: source_wallet
    ExportWalletResponse:
      type: object
      properties:
        wallet_id:
          type: string
          description: The ID of the exported Wallet in the Node from which it was exported
        encrypted_sk:
          type: string
          description: The encrypted secret key of the Wallet
        salt:
          type: string
          description: The salt used in the encryption of the secret key
      required:
        - wallet_id
        - encrypted_sk
        - salt
      example:
        wallet_id: source_wallet
        encrypted_sk: 44d2836bbfcc7c69dd35dbe854d54a093be9a1be7f9d658325a8d2526f67ede16abf0d1430edab07be9b8c12070260af
        salt: 27ca2bf75fe4c1564398459bd2f39a89645bf98aeeb1f99a9c9efa6e5c39cbfe
    ImportWalletRequest:
      type: object
      properties:
        wallet_id:
          type: string
          description: The ID under which to import the Wallet; can be different from the ID the Wallet was stored under in the exporting Node
        encrypted_sk:
          type: string
          description: The encrypted secret key of the Wallet
        authorization:
          type: string
          description: The authorization password used during Wallet generation that allows to decrypt the encrypted secret key
        salt:
          type: string
          description: The salt used in the encryption of the secret key
      required:
        - wallet_id
        - encrypted_sk
        - authorization
        - salt
      example:
        wallet_id: source_wallet
        encrypted_sk: 44d2836bbfcc7c69dd35dbe854d54a093be9a1be7f9d658325a8d2526f67ede16abf0d1430edab07be9b8c12070260af
        authorization: PrivacyIsAwesome
        salt: 27ca2bf75fe4c1564398459bd2f39a89645bf98aeeb1f99a9c9efa6e5c39cbfe
    ExportAuditorAccessWalletRequest:
      type: object
      properties:
        wallet_id:
          type: string
          description: The ID of the Wallet to export a viewing key for
        authorization:
          type: string
          description: The authorization password for the Wallet
        recipient_payment_address:
          type: string
          description: The Address of the Wallet that belongs to the intended recipient of the exported viewing key; used to encrypt the key in such a way that only the intended recipient can decrypt it
      required:
        - wallet_id
        - authorization
        - recipient_payment_address
      example:
        wallet_id: source_wallet
        authorization: PrivacyIsAwesome
        recipient_payment_address: q1dxlf6vap2566t8w3z8f5j5lxy9n036zfsaytjve7fedsw6w8c9q9ctrwfz6ryyjwkgvj6tjg70f
    ExportAuditorAccessWalletResponse:
      type: object
      properties:
        wallet_id:
          type: string
          description: The ID of the exported Wallet in the Node from which it was exported
        public_key:
          type: string
          description: The public key of the exported Wallet which uniquely identifies it across the network
        access_key:
          type: string
          description: The encrypted viewing key
      required:
        - wallet_id
        - public_key
        - access_key
      example:
        wallet_id: source_wallet
        public_key: 8a907d5c070223b4fd30a05e2e103ae6f7bbae2bc6ea36258b5a7ac9a4b8f646
        access_key: 9c1616ccb51d4022c7b8654b1a69682654c5da6570b37d3cd2a2368a758f7922
    ImportAuditorAccessWalletRequest:
      type: object
      properties:
        wallet_id:
          type: string
          description: The ID under which to import the Wallet; can be different from the ID the Wallet was stored under in the exporting Node
        public_key:
          type: string
          description: The public key of the imported Wallet
        access_key:
          type: string
          description: the encrypted viewing key of the imported Wallet
      required:
        - wallet_id
        - public_key
        - access_key
      example:
        wallet_id: source_wallet
        public_key: 8a907d5c070223b4fd30a05e2e103ae6f7bbae2bc6ea36258b5a7ac9a4b8f646
        access_key: 9c1616ccb51d4022c7b8654b1a69682654c5da6570b37d3cd2a2368a758f7922
    GenerateWalletRequest:
      type: object
      properties:
        wallet_id:
          type: string
          description: The ID under which to create the Wallet; must be unique within the Node
        authorization:
          type: string
          description: The authorizarion password under which to encrypt the generated Wallet's secret key; will be required in order to perform actions using the Wallet
      required:
        - wallet_id
        - authorization
      example:
        wallet_id: source_wallet
        authorization: PrivacyIsAwesome
    DeleteWalletRequest:
      type: object
      properties:
        wallet_id:
          type: string
          description: The ID of the Wallet to delete
        authorization:
          type: string
          description: The authorization password for the Wallet
      required:
        - wallet_id
      example:
        wallet_id: source_wallet
        authorization: PrivacyIsAwesome
    CreateRuleRequest:
      type: object
      properties:
        wallet_id:
          type: string
          description: The ID of the Wallet whose admin credentials should be used to create the new Rules
        authorization:
          type: string
          description: The authorization password for the Wallet whose admin credentials should be used to create the new Rules
        rules_to_add:
          type: array
          items:
            $ref: '#/components/schemas/Rule'
          description: The list of Rules to add to the network
      required:
        - wallet_id
        - authorization
        - rules_to_add
      example:
        wallet_id: issuer_wallet
        authorization: PrivacyIsAwesome
        rules_to_add:
          - public_key: bf45ab74bd4a46fe7a2432ba05e2f726bf4fe42a80052849e13e2541230d3204
            can_issue_confidentially: false
            namespace: "bank-a.loans.*"
            is_admin: false
    DeleteRuleRequest:
      type: object
      properties:
        wallet_id:
          type: string
          description: The ID of the Wallet whose admin credentials should be used to delete the Rules
        authorization:
          type: string
          description: The authorization password for the Wallet whose admin credentials should be used to delete the Rules
        rules_to_delete:
          type: array
          items:
            $ref: '#/components/schemas/Rule'
          description: The list of Rules to delete from the network
      required:
        - wallet_id
        - authorization
        - rules_to_delete
      example:
        wallet_id: issuer_wallet
        authorization: PrivacyIsAwesome
        rules_to_delete:
          - public_key: bf45ab74bd4a46fe7a2432ba05e2f726bf4fe42a80052849e13e2541230d3204
            can_issue_confidentially: false
            namespace: "bank-a.loans.*"
            is_admin: false
    Rule:
      type: object
      properties:
        public_key:
          type: string
          description: The public key of the Wallet that is being granted rights in this Rule
        is_admin:
          type: boolean
          description: Boolean signifying whether the Rule grants admin rights
        namespace:
          $ref: '#/components/schemas/Namespace'
        can_issue_confidentially:
          type: boolean
          description: Boolean signifying whether the Rule grants confidentialy issuance rights; if true, then both public and confidential issuance right are granted; if false, then only public issuance rights are granted
      required:
        - public_key
        - can_issue_confidentially
        - namespace
        - is_admin
      example:
        public_key: bf45ab74bd4a46fe7a2432ba05e2f726bf4fe42a80052849e13e2541230d3204
        can_issue_confidentially: false
        namespace: "bank-a.loans.*"
        is_admin: false
    ErrorResponse:
      type: object
      properties:
        error_code:
          type: integer
          description: The error code returned from the server
        message:
          type: string
          description: The error message returned from the server
      required:
        - error_code
      example:
        error_code: 400
        message: "insufficient funds"
    AsyncTaskCreatedResponse:
      type: object
      properties:
        id:
          type: string
          description: The unique ID of the Task that was created in the Node to process the asynchronous request
      required:
        - id
      example:
        id: "70a88558-2b8b-4b63-a5b6-2c54b24377f5"
    AnalyticTransaction:
      type: object
      properties:
        metadata:
          $ref: '#/components/schemas/AnalyticsTxMetadata'
        content:
          oneOf:
            - $ref: '#/components/schemas/AnalyticsIssueTx'
            - $ref: '#/components/schemas/AnalyticsMultiTransferTx'
            - $ref: '#/components/schemas/AnalyticsRuleTx'
          description: The detailed content of the transaction; format differs depending on the transaction type
      example:
        metadata:
          type: 'Issue'
          tx_hash: 'd379aa4e5e40552910c8ae456c65dcf51e9779fc9281ac2dc9e677ec810af6b1'
          block_hash: '9701560ba877d5552303cb54d10d461a0836a324649608a0a56c885b631b0434'
          timestamp: '2019-05-20T02:10:46-07:00'
          index_in_block: 1
          block_height: 100
        content:
          outputs:
            - is_confidential: false,
              public_issuance_description:
                amount: 12
                asset_id: "bank-a.loans.1"
              output_description:
                cv: 'c2366ace373af05c92fc315dd502637ee4fa6ba46f05319ddcff209619bbaa27'
                cm: '0e148cb409e313cb13f28c6d8110fdb7f4daf119db99cedeab1234bd64ac4681'
                epk: 'f58c334ecde6e3efaeba6faedadb615c0fad30115a62e18c872481a293bd589d'
                enc_note: '3222a401fc15115399e3b54c51509d9e5fafec2ddede463a8606d8d405f45c88a5a0d6e29728745407cdfe6d4b98a863b55cc230a463436e9f228c984085cc3082c48f6a2a9cb3b6a2ebb140e202c124b4d8483bc75e9978db08ff818fcf9ffa5c3fe226114fe27f41673220734471611af7255bbfb2bd4c2793fa45372f9ac3e91b4c2de92f0688dd92b1a993ed268e024e48f4e04c406a6e898c3bb3b290e3fde79bdaa0f9d9'
                enc_sender: '9cb97b6764e8ad490bd5246c133245bc9424455b9cb7cc98fc1e054c8d0827863b5f89424bc910a09040461b4d01c5bfe732dcd491dc8cd78e0eba00e62919105211c1ce8d7ab1a37adc87d118890ffd'
                zkproof: 'cc43f2c6be02d5e340dcbc1cae9ab4c8199731e115637186384d2e0a30051daa9031a9546683483d1d32b27b0fd47afd03c393cb5f1a5e68319889da501f296126a4f98f9a9ee1db5ba9d9ecda561176ac2d5ca00b45eaf0a09ad20785ed7c5bb5351b3116b1c7858ed44b9abdcd4aeefa4afa7d2f03d64c1b60b316a6d40595a183132f6ef391bf44002a7677f27f793e7661d2a00917e63a13af3af50d5f99f02bf24af4d743f51fce0712252dba7fa89fa5d89855d9c9d323ab1ffe3f0470'
          public_key: 'bf45ab74bd4a46fe7a2432ba05e2f726bf4fe42a80052849e13e2541230d3204'
          signature: '97a94ce9ad8fdb4fa9933b67e4022fe92e19516728cb1b5f43edf3aaad994a544d13725708fd38a683b82a2d0092b89a09f5463ce688b39215b10f6a732e480b'

    AnalyticsTxMetadata:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/AnalyticsTxType'
        tx_hash:
          type: string
          description: the QEDIT-generated hash of the transaction
        block_height:
          type: integer
          description: The height of the Block (inside the Blockchain) that the transaction is a part of
        block_hash:
          type: string
          description: the hash of the Block (inside the Blockchain) that the transaction is a part of
        timestamp:
          type: string
          description: UTC time of creation of the time the Block containing the transaction was created in RFC-3339 format
        index_in_block:
          type: integer
          description: The serial number within the Block of the transaction relative to other QEDIT transactions; indexing is 0-based

    AnalyticsTxType:
      type: string
      description: Type of transaction
      enum:
        - Issue
        - Transfer
        - Rule

    AnalyticsIssueTx:
      type: object
      description: The data of a particular Issuance transaction
      properties:
        outputs:
          type: array
          description: The data of the Assets issued (multiple Assets may potentially be issued in a single Issuance transaction)
          items:
            $ref: '#/components/schemas/AnalyticsOutput'
        public_key:
          type: string
          description: The public key of the Wallet that performed the Issuance
        signature:
          type: string
          description: The signature on the transaction by the secret key of the Wallet that performed the Issuance

    AnalyticsMultiTransferTx:
      type: object
      description: The data of a particular Transfer transaction; a single such transaction may contain multiple Transfers
      properties:
        transfers:
          type: array
          description: The (potentially several) Transfers within the transaction
          items:
            $ref: '#/components/schemas/AnalyticsTransferTx'

    AnalyticsTransferTx:
      type: object
      description: The data of a single Transfer within a Transfer transaction
      properties:
        spends:
          type: array
          description: The information and Proofs associated with the Assets spent in the Transfer
          items:
            $ref: '#/components/schemas/AnalyticsSpendDescription'
        outputs:
          type: array
          description: The information and Proofs associated with the Assets output from the Transfer
          items:
            $ref: '#/components/schemas/AnalyticsOutputDescription'
        rk:
          type: string
          description: The re-randomized public key of the Wallet which created the Transfer
        spend_auth_sig:
          type: string
          description: The signature authorizing the spend of the Assets spent in the Transfer
        binding_sig:
          type: string
          description: The signature binding the spent and output Assets and verifying the balance
        confirmation_sig:
          type: string
          description: The signature of the confirming party if a confirmation was requested; empty if no confirmation was requested

    AnalyticsRuleTx:
      type: object
      description: The data of a particular Rule changing transaction
      properties:
        sender_public_key:
          type: string
          description: The public key of the Wallet used to create the Rule
        rules_to_add:
          type: array
          items:
            $ref: '#/components/schemas/AnalyticsRuleDefinition'
          description: The details of the Rules added in this transaction
        rules_to_delete:
          type: array
          items:
            $ref: '#/components/schemas/AnalyticsRuleDefinition'
          description: The details of the Rules deleted in this transaction
        nonce:
          type: integer
          description: The nonce used to make this Rule transaction unique
        signature:
          type: string
          description: The signature authorizing the Rule changes, made by the Wallet that made the Rule changes

    AnalyticsRuleDefinition:
      type: object
      properties:
        public_key:
          type: string
          description: The public key of the Wallet that is being granted rights in this Rule
        is_admin:
          type: boolean
          description: Boolean signifying whether the Rule grants admin rights
        namespace:
          $ref: '#/components/schemas/Namespace'
        can_issue_confidentially:
          type: boolean
          description: Boolean signifying whether the Rule grants confidentialy issuance rights; if true, then both public and confidential issuance right are granted; if false, then only public issuance rights are granted
      example:
        public_key: "AAAAAAAAAA=="
        is_admin: true
        namespace: "bank-a.loans.*"
        can_issue_confidentially: true

    AnalyticsRuleWalletDefinition:
      type: object
      properties:
        public_key:
          type: string
          description: The public key of the Wallet that is being granted rights in this Rule
        is_admin:
          type: boolean
          description: Boolean signifying whether the Rule grants admin rights
        namespace:
          $ref: '#/components/schemas/Namespace'
        can_issue_confidentially:
          type: boolean
          description: Boolean signifying whether the Rule grants confidentialy issuance rights; if true, then both public and confidential issuance right are granted; if false, then only public issuance rights are granted
        operation:
          type: string
          enum:
            - CreateRule
            - DeleteRule
          description: Operation of the transaction, which can be rule creation or deletion
      example:
        public_key: "AAAAAAAAAA=="
        is_admin: true
        namespace: "bank-a.loans.*"
        can_issue_confidentially: true
        operation: "CreateRule"

    AnalyticsOutput:
      type: object
      properties:
        is_confidential:
          type: boolean
          description: Boolean signifying whether the Issuance was done confidentially; false if the Issuance was done publicly
        public_issuance_description:
          $ref: '#/components/schemas/AnalyticsPublicIssuanceDescription'
        confidential_issuance_description:
          $ref: '#/components/schemas/AnalyticsConfidentialIssuanceDescription'
        output_description:
          $ref: '#/components/schemas/AnalyticsOutputDescription'

    AnalyticsPublicIssuanceDescription:
      type: object
      description: Describes what Asset Type and amount were issued; null if the Issuance was confidential
      nullable: true
      required:
        - asset_id
        - amount
      properties:
        asset_id:
          $ref: '#/components/schemas/AssetId'
        amount:
          type: integer
          minimum: 0
          description: The amount of Assets issued
      example:
        asset_id: "bank-a.loans.1"
        amount: 3

    AnalyticsSpendDescription:
      type: object
      properties:
        cv:
          type: string
          description: The commitment to both the Asset Type and amount of the Note
        anchor:
          type: string
          description: The anchor (root) of the Merkle tree used in the Proof
        nullifier:
          type: string
          description: The Note's Nullifier
        zkproof:
          type: string
          description: The Proof that the Note indeed exists in the Merkle tree and belongs to the spender
      example:
        cv: "AAAAAAAAAAA="
        anchor: "AAAAAAAAAAA="
        nullifier: "AAAAAAAAAAA="
        zkproof: "000AAAAAAA="

    AnalyticsOutputDescription:
      type: object
      properties:
        cv:
          type: string
          description: The commitment to both the Asset Type and amount of the Note
        cm:
          type: string
          description: The commitment to the entire Note
        zkproof:
          type: string
          description: The Proof that the commitments match
        epk:
          type: string
          description: The ephemeral public key used to encrypt the Note contents for the receiver
        enc_note:
          type: string
          description: The Note encryption for the receiver
        enc_sender:
          type: string
          description: The Note encryption for the sender
        require_confirmation_from_rk:
          type: string
          description: The rerandomized (fully-anonymous) public key of the wallet that confirmed receipt of the output; identity of this wallet can only be recovered by the sending and confirming wallets (including view-only copies of these wallets); empty if no confirmation was requested
      example:
        cv: "AAAAAAAAAAA="
        cm: "000AAAAAAA="
        zkproof: "000AAAAAAA="
        epk: "AAAAAAAAAAA="
        enc_note: "AAAAAAAAAAA="
        enc_sender: "000AAAAAAA="

    AnalyticsConfidentialIssuanceDescription:
      type: object
      description: The details and Proof attached to a confidential Issuance; null if the Issuance was public
      nullable: true
      properties:
        casset:
          type: string
          description: The commitment to both the Asset Type and amount of the issued Note
        namespace:
          $ref: '#/components/schemas/Namespace'
        zkproof:
          type: string
          description: The Proof that the issued Asset Type indeed matches the reported Rule
      example:
        input_cv: "AAAAAAAAAAA="
        zkproof: "000AAAAAAA="
        namespace: "bank-a.loans.*"

    GetWalletActivityResponse:
      type: object
      properties:
        wallet_id:
          type: string
        transactions:
          type: array
          items:
            $ref: '#/components/schemas/AnalyticWalletTx'
          description: The list of retrieved transactions

    AnalyticWalletTx:
      type: object
      description: A single retrieved transaction
      properties:
        metadata:
          $ref: '#/components/schemas/AnalyticWalletMetadata'
        content:
          oneOf:
            - $ref: '#/components/schemas/AnalyticIssueWalletTx'
            - $ref: '#/components/schemas/AnalyticTransferWalletTx'
            - $ref: '#/components/schemas/AnalyticRuleWalletTx'
          description: The detailed information of the transaction; structure depends on the type of transaction

    AnalyticWalletMetadata:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/AnalyticsTxType'
        tx_hash:
          type: string
          description: The QEDIT-generated hash of the transaction
        timestamp:
          type: string
          description: UTC time of creation of the time the Block containing the transaction was created in RFC-3339 format

    AnalyticIssueWalletTx:
      type: object
      properties:
        is_incoming:
          type: boolean
          description: Boolean signifying whether the Assets were issued to the Wallet in question
        issued_by_self:
          type: boolean
          description: Boolean signifying whether the Wallet used to issue the Assets is the Wallet in question
        sender_id:
          type: string
          description: The public key of the Wallet that was used to issue the Assets
        recipient_address:
          type: string
          description: The Address the Assets were issued to
        asset_id:
          $ref: '#/components/schemas/AssetId'
        amount:
          type: integer
          description: The amount of Assets issued
        is_confidential:
          type: boolean
          description: Boolean signifying whether the Issuance was done confidentially
        memo:
          type: string
          description: The private memo attached to the Issuance

    AnalyticTransferWalletTx:
      type: object
      properties:
        is_incoming:
          type: boolean
          description: Boolean signifying whether the Assets were transferred to the Wallet in question; false of the Assets were transferred from the Wallet into another
        sender_id:
          type: string
          description: The public key of the Wallet the Assets were transferred from
        recipient_address:
          type: string
          description: The address of the Wallet the Assets were transferred to
        confirmed_by:
          type: string
          description: The public key of the Wallet that confirmed receipt of this transfer
        asset_id:
          $ref: '#/components/schemas/AssetId'
        amount:
          type: integer
          description: The amount of Assets transferred
        memo:
          type: string
          description: The private memo attached to the Transfer

    AnalyticRuleWalletTx:
      type: object
      properties:
        signed_by_self:
          type: boolean
          description: Boolean signifying whether the Rule was created by the Wallet in question
        rule_affect_self:
          type: boolean
          description: Boolean signifying whether the Rule granted permissions to the Wallet in question
        tx_signer:
          type: string
          description: The public key of the Wallet that was used to create the Rule
        rule:
          $ref: '#/components/schemas/AnalyticsRuleWalletDefinition'

    HealthcheckResponse:
      type: object
      properties:
        version:
          type: string
          description: API version of the Node
        blockchain_connector:
          $ref: '#/components/schemas/HealthcheckResponseItem'
        message_queue:
          $ref: '#/components/schemas/HealthcheckResponseItem'
        database:
          $ref: '#/components/schemas/HealthcheckResponseItem'
        passing:
          type: boolean
          description: Boolean signifying whether the endpoint is ready for calls
      example:
        version: '1.7.0'
        blockchain_connector:
          error: 'Post http://localhost:8082/connector/get_block: dial tcp 127.0.0.1:8082:connect: connection refused'
          passing: false
        database:
          error: ''
          passing: true
        mq:
          error: ''
          passing: true
        passing: false

    HealthcheckResponseItem:
      type: object
      properties:
        passing:
          type: boolean
          description: Boolean signifying whether the component is healthy
        error:
          type: string
          description: Error string describing the component's problem; empty if the component is healthy
