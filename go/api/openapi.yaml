openapi: 3.0.0
info:
  contact:
    email: dev@qed-it.com
    name: QEDIT
    url: https://github.com/QED-it/asset_transfers_dev_guide/
  description: |
    This SDK provides a programmatic way for interacting with QEDIT's _Asset Transfer_ API. The specification definition file is publicly available [in this repository](https://github.com/QED-it/asset_transfers_dev_guide/).
  title: QEDIT - Asset Transfers
  version: 1.7.0
servers:
- url: http://{server_url}:{port}
  variables:
    server_url:
      default: localhost
    port:
      default: "12052"
security:
- ApiKeyAuth: []
paths:
  /wallet/get_balances:
    post:
      description: Get a list of the Asset Types held within a given Wallet and the amount of each type held.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetWalletBalanceRequest'
        required: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetWalletBalanceResponse'
          description: Success
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized
        500:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal error
      summary: Get wallets balances
      tags:
      - Wallet
  /wallet/issue_asset:
    post:
      description: Issue Assets from a Wallet to a recipient Address; The issuing Wallet is required to have matching issuance rights (in the form of a matching Rule); Issuance can be done either confidentially or in public; In order to issue confidentially, the matching Rule must explicitly allow this.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IssueAssetRequest'
        required: true
      responses:
        201:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AsyncTaskCreatedResponse'
          description: Created
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized
        500:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal error
      summary: Issue assets [async call]
      tags:
      - Wallet
  /wallet/transfer_asset:
    post:
      description: Transfer a specified amount of a specified Asset Type from a specified Wallet to a specified Address; Transfers are always completely confidential.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransferAssetRequest'
        required: true
      responses:
        201:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AsyncTaskCreatedResponse'
          description: Created
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized
        500:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal error
      summary: Transfer assets [async call]
      tags:
      - Wallet
  /wallet/get_new_address:
    post:
      description: Generate an Address for the Wallet; the address can be used by other Wallet owners to issue or transfer Assets into said Wallet; If a diversifier is provided, then the generated address is deterministically generated from the diversifier; If the diversifier is omitted, then a random diversifier is used and the resulting Address will be random; in both cases the Address cannot be linked to the Wallet by parties that do not have access to the Wallet. All generated Addresses of a Wallet are always valid and cannot be invalidated.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetNewAddressRequest'
        required: true
      responses:
        201:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetNewAddressResponse'
          description: Success/Created
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized
        500:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal error
      summary: Get a new address from a given diversifier or generate randomly
      tags:
      - Wallet
  /wallet/get_public_key:
    post:
      description: Get the unique public key of the Wallet; This key is unique across the entire network and is used to identify the Wallet.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetPublicKeyRequest'
        required: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPublicKeyResponse'
          description: Success/Created
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized
        500:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal error
      summary: Get wallet public key
      tags:
      - Wallet
  /wallet/create_rule:
    post:
      description: Create new Rules that can either create a new admin, a new issuer, or both; The Rules are created by a Wallet that needs to have admin rights; The Rules grant rights to other Wallets through the Wallets' public keys.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRuleRequest'
        required: true
      responses:
        201:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AsyncTaskCreatedResponse'
          description: Created
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized
        500:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal error
      summary: Create a new Rule in the network [async call]
      tags:
      - Wallet
  /wallet/delete_rule:
    post:
      description: Delete an existing Rule from the network; The Rule is deleted by a Wallet which needs to have admin rights.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteRuleRequest'
        required: true
      responses:
        202:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AsyncTaskCreatedResponse'
          description: Accepted
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized
        500:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal error
      summary: Delete an existing Rule from the network [async call]
      tags:
      - Wallet
  /wallet/get_activity:
    post:
      description: List transactions that were created by a specifed Wallet or that affected that Wallet; All known details of each such transaction will be returned.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetWalletActivityRequest'
        required: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetWalletActivityResponse'
          description: Success
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized
        500:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal error
      summary: Get wallet activity (transactions)
      tags:
      - Wallet
  /wallet/share_viewing_permission:
    post:
      description: Share a viewing key that allows viewing all transactions to and from a wallet, including past transactions. The key is shared via p2p messenger directly to the recipient, and is encrypted specifically for the intended recipient address. Upon arrival, the wallet is automatically added to the recipient's node. The viewing key does not enable making any transactions (including rule changes, issuance, and transfers) on behalf of the exported Wallet.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShareWalletViewingPermissionRequest'
        required: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShareWalletViewingPermissionResponse'
          description: Success
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized
        500:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal error
      summary: Share the viewing credentials for a given Wallet
      tags:
      - Wallet
  /analytics/get_network_activity:
    post:
      description: List all verified Transactions from the network, even ones that do not have anything to do with any Wallet stored in the Node; For each such Transaction all of public information is returned in a structured format; However, no private information is returned even if some private information is known.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetNetworkActivityRequest'
        required: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetNetworkActivityResponse'
          description: Success
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized
        500:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal error
      summary: Get details on past blocks either by order using start_index and number_of_results or by the tx_hashes of the transactions
      tags:
      - Analytics
  /analytics/get_sync_status:
    post:
      description: Returns detailed information about the status of the sync between the QEDIT Node and the underlying Blockchain
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSyncStatusResponse'
          description: Success
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized
        500:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal error
      summary: Get blockchain sync status information
      tags:
      - Analytics
  /node/generate_wallet:
    post:
      description: Randomly generate a new Wallet under a specified ID; This only affects the Node and in particular nothing about this action is broadcast to the Blockchain; The Wallet ID is required to be unique within the Node, but can otherwise be user-defined.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenerateWalletRequest'
        required: true
      responses:
        200:
          description: Success
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized
        500:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal error
      summary: Generate a new Wallet
      tags:
      - Node
  /node/delete_wallet:
    post:
      description: Deletes a Wallet from the Node; All private information about the Wallet will be deleted including transactional history, balances, and keys; If the secret key of the Wallet are not stored elsewhere then all Assets held in the Wallet will be forever lost! If the secret key of the Wallet is stored elsewhere, then all held Assets and the entire transactional history of the Wallet can be restored from the Blockchain at any time by importing the Wallet into a Node.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteWalletRequest'
        required: true
      responses:
        202:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AsyncTaskCreatedResponse'
          description: Accepted
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized
        500:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal error
      summary: Delete a Wallet [async call]
      tags:
      - Node
  /node/export_wallet:
    post:
      description: Export an encrypted form of the Wallet's secret key; The authorization password under which the secret key is encrypted is the same one under which it was originally created or imported; Knowledge of the secret key and the authorization password is required to import the Wallet into a Node in the future.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExportWalletRequest'
        required: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExportWalletResponse'
          description: Success
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized
        500:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal error
      summary: Export wallet secret key
      tags:
      - Node
  /node/import_wallet:
    post:
      description: Import a Wallet into the Node under a specified ID; All the transactional history and outstanding balanced of the Wallet will be extracted from the Blockchain; The Wallet ID is required to be unique within the Node, but can otherwise be user-defined.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportWalletRequest'
        required: true
      responses:
        201:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AsyncTaskCreatedResponse'
          description: Created
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized
        500:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal error
      summary: Import Wallet from a known secret key and authorization [async call]
      tags:
      - Node
  /node/export_auditor_access_wallet:
    post:
      description: Export a viewing key that allows viewing all transactions to and from a wallet, including past transactions. The viewing key is encrypted for a specific Address, and can only be recovered by someone in possession of either a secret key or a viewing key for the Wallet that Address belongs to. The viewing key does enable making any transactions (including rule changes, issuance, and transfers) on behalf of the exported Wallet.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExportAuditorAccessWalletRequest'
        required: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExportAuditorAccessWalletResponse'
          description: Success
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized
        500:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal error
      summary: Export viewing credentials for a Wallet
      tags:
      - Node
  /node/import_auditor_access_wallet:
    post:
      description: Import a viewing key generated by the export_auditor_access_wallet endpoint. This will create a read-only wallet which can be queried with endpoints such as get_activity and get_balances, but cannot be used to perform transactions. The Wallet whose Address was used as the recipient for the exported viewing key must already be imported within the Node in order for this process to succeed.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportAuditorAccessWalletRequest'
        required: true
      responses:
        201:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AsyncTaskCreatedResponse'
          description: Created
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized
        500:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal error
      summary: Import viewing credentials for a Wallet [async call]
      tags:
      - Node
  /node/get_rules:
    post:
      description: Returns a full list of all the Rules that govern admin and issuance rights within the network.
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetRulesResponse'
          description: Success
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized
        500:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal error
      summary: Get network governance Rules
      tags:
      - Node
  /node/get_all_wallets:
    post:
      description: Returns a list of the IDs of all Wallets currently stored on the Node. Both full-access and view-only Wallets are listed.
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllWalletsResponse'
          description: Success
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized
        500:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal error
      summary: Get all wallet IDs
      tags:
      - Node
  /node/get_task_status:
    post:
      description: Returns the meta-data of a given Task and its current status. The particular, private details of the Task such as an Asset ID or amount in a Transfer are not returned.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetTaskStatusRequest'
        required: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetTaskStatusResponse'
          description: Success
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized
        500:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal error
      summary: Get a specific task (by ID)
      tags:
      - Node
  /node/get_tasks:
    post:
      description: Returns a list of all Tasks along with their meta-data and statuses. The particular, private details of the Task such as an Asset ID or amount in a Transfer are not returned. Tasks can be filtered using various parameters as specified in the request body.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetTasksRequest'
        required: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetTasksResponse'
          description: Success
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized
        500:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal error
      summary: Get a (potentially) filtered list of all Tasks
      tags:
      - Node
  /node/approve_task:
    post:
      description: Confirmation request tasks are confirmed using this point. After the user confirms the incoming transaction, it is asynchronously sent to the blockchain and its status can be queried like any other async task.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskActionRequest'
        required: true
      responses:
        200:
          description: Success
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized
        500:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal error
      summary: Approve task with pending incoming transaction [async call]
      tags:
      - Node
  /node/cancel_task:
    post:
      description: A user may select to decline an incoming transaction. The related task will change its result to failure both on senders and the receivers side. This endpoint can also be used to cancel an outgoing pending transaction that is awaiting user interaction from the receiver
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskActionRequest'
        required: true
      responses:
        201:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AsyncTaskCreatedResponse'
          description: A new task will be created and returned. If sender's cancellation is triggered, the task will be asynchronous and require the user to monitor its progress.
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized
        500:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal error
      summary: Cancel task with pending incoming transaction both incoming and outgoing [async call]
      tags:
      - Node
  /node/get_notifications:
    post:
      description: Notifications are the Node's way to report about recent activity and status changes. This endpoint allows polling for these changes and fetching the updates. The notifications can be filtered in multiple ways.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetNotificationsRequest'
        required: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetNotificationsResponse'
          description: Success
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized
        500:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal error
      summary: Get notifications
      tags:
      - Node
  /attachment/create_group:
    post:
      description: Groups are cryptographically-secure permission-sets which allow their members to either write or read/write to the Group (there's no read-only permission). When creating a new Group, a new secret is created which can be used to encrypt Attachments. Attachments can be stored (in encrypted form) in Groups, and Group permissions can be shared with other Wallets.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateGroupRequest'
        required: true
      responses:
        201:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateGroupResponse'
          description: Created
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized
        500:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal error
      summary: Create a new group
      tags:
      - Attachment
  /attachment/add_to_group:
    post:
      description: Shares with another Wallet the credentials required to either write or both read and write to a Group another Wallet. The Group will be automatically added to any Nodes that have the recipient Wallet stored within them, including Nodes that have viewing-only access to said Wallet.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddToGroupRequest'
        required: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddToGroupResponse'
          description: Success
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized
        500:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal error
      summary: Add a new member to a group
      tags:
      - Attachment
  /attachment/leave_group:
    post:
      description: Deletes any credentials and messages that relate to the given Group and are owned by the given Wallet. Does not affect other Wallets in the same Node. Only owners of Wallets can remove their own Wallets from any given Group.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LeaveGroupRequest'
        required: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeaveGroupResponse'
          description: Success
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized
        500:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal error
      summary: Removes an owned Wallet from a Group
      tags:
      - Attachment
  /attachment/get_groups:
    post:
      description: Returns the full list of Groups the Wallet has credentials for (both write-only and read/write).
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetGroupsRequest'
        required: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetGroupsResponse'
          description: Success
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized
        500:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal error
      summary: List the Groups the Wallet has access to
      tags:
      - Attachment
  /attachment/upload:
    post:
      description: Encrypts and uploads an Attachment so that it becomes shared with a given Group. Returns a globally-unique identifier for the Attachment to be used in subsequent API calls.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UploadAttachmentRequest'
        required: true
      responses:
        201:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadAttachmentResponse'
          description: Created
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized
        500:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal error
      summary: Upload an Attachment and share it with a Group
      tags:
      - Attachment
  /attachment/download:
    post:
      description: Downloads and decrypts an Attachment given an Attachment ID, and assuming it exists and a Wallet with proper credentials for the relevant Group is used
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DownloadAttachmentRequest'
        required: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DownloadAttachmentResponse'
          description: Success
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Found
        500:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal error
      summary: Download an Attachment
      tags:
      - Attachment
  /attachment/list:
    post:
      description: Lists the Attachments available for download for a given Wallet, and filtered by further arguments. Note that Attachments must be filtered by exactly one of th e optional filters (transaction hashes or asset IDs).
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListAttachmentsRequest'
        required: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListAttachmentsResponse'
          description: Success
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized
        500:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal error
      summary: Lists available Attachments
      tags:
      - Attachment
  /health:
    post:
      description: Reports the health of the various components of the system as well as an overall status for the Node. If the Node's status is good, then the Node is synced with the Blockchain and can successfully process requests.
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthcheckResponse'
          description: Success
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        500:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal error
      summary: Perform a healthcheck of the node and its dependent services
      tags:
      - Health
components:
  schemas:
    AssetId:
      description: |
        The ID of an Asset Type. It must be a string of length 0 to 40 characters. Allowed characters are lower- and uppercase letters, digits, dot (.), and hyphen (-). It must not end with an hyphen. Asset IDs are case-sensitive.
      type: string
    Namespace:
      description: |
        A `Namespace` describes what Asset IDs can be issued in an Issuance Rule. It is a string in the same format as `AssetId`. Additionally, if it ends with a wildcard character `*`, then the namespace covers all asset IDs with the namespace as a prefix. Without a final wildcard, the namespace covers exactly one asset ID. Example: The namespace `currencies.dollar` covers only this exact asset type, while `currencies.*` covers all asset types that start with `currencies.`.
      type: string
    GetWalletBalanceRequest:
      example:
        wallet_id: source_wallet
      properties:
        wallet_id:
          description: The ID of the Wallet
          type: string
      required:
      - wallet_id
      type: object
    BalanceForAsset:
      example:
        wallet_id: source_wallet
      properties:
        asset_id:
          description: |
            The ID of an Asset Type. It must be a string of length 0 to 40 characters. Allowed characters are lower- and uppercase letters, digits, dot (.), and hyphen (-). It must not end with an hyphen. Asset IDs are case-sensitive.
          type: string
        amount:
          description: The outstanding balance for the Asset Type
          format: int32
          type: integer
      required:
      - amount
      - asset_id
      type: object
    GetWalletBalanceResponse:
      example:
        wallet_id: source_wallet
        assets:
        - asset_id: bank-a.loans.1
          amount: 8
        - asset_id: bank-a.loans.2
          amount: 200
      properties:
        wallet_id:
          description: The ID of the Wallet
          type: string
        assets:
          description: The balances of the various Asset Types held by the Wallet
          items:
            $ref: '#/components/schemas/BalanceForAsset'
          type: array
      required:
      - assets
      - wallet_id
      type: object
    TransferAssetRequest:
      example:
        wallet_id: source_wallet
        authorization: PrivacyIsAwesome
        recipient_address: q1dxlf6vap2566t8w3z8f5j5lxy9n036zfsaytjve7fedsw6w8c9q9ctrwfz6ryyjwkgvj6tjg70f
        asset_id: bank-a.loans.1
        amount: 4
        memo: '{"recipient_name": "Dan"}'
        require_confirmation_from: bf45ab74bd4a46fe7a2432ba05e2f726bf4fe42a80052849e13e2541230d3204
      properties:
        wallet_id:
          description: The ID of the Wallet to transfer from
          type: string
        authorization:
          description: The authorization password for the Wallet to transfer from
          type: string
        recipient_address:
          description: The Address of the recipient of the funds
          type: string
        asset_id:
          description: |
            The ID of an Asset Type. It must be a string of length 0 to 40 characters. Allowed characters are lower- and uppercase letters, digits, dot (.), and hyphen (-). It must not end with an hyphen. Asset IDs are case-sensitive.
          type: string
        amount:
          description: The amount of assets to transfer
          format: int32
          type: integer
        memo:
          description: An app-customizable field to store additional private data relating to the transfer; the memo is shared between the sender and the receiver, but is not divulged to other parties
          type: string
        attachment_ids:
          description: The globally-unique identifiers of the Attachments to attach to the transferred Asset; the attachments must already be uploaded, and their identifiers are returned by the upload endpoint
          items:
            type: string
          type: array
        require_confirmation_from:
          description: A user may request confirmation from the receiving party. If a public key of the approver is included in this optional field, the transaction will only become valid after the received signs it. The receiver will be able to decide whether to accept or reject the transfer by calling the /node/approve_task or the /node/reject_task respectively.
          type: string
      required:
      - amount
      - asset_id
      - authorization
      - memo
      - recipient_address
      - wallet_id
      type: object
    TaskActionRequest:
      description: To approve or cancel a task, the user should include the task id and authorization of the wallet related to this task.
      example:
        task_id: 5aaa4045-e949-4c44-a7ef-25fb55a1afa6
        authorization: PrivacyIsAwesome
      properties:
        task_id:
          type: string
        authorization:
          type: string
      required:
      - authorization
      - task_id
      type: object
    GetNotificationsRequest:
      description: The request body determines which filters to apply to the notifications. All filters are optional, while the maximal number of results defaults to 100 and the order defaults to descending.
      example:
        wallet_id: wallet_id
        types:
        - null
        - null
        max_results: 603
        after_id: 0
        starting_with_time: 2000-01-23
      properties:
        wallet_id:
          description: Fetch notifications that relate to this wallet ID only
          type: string
        types:
          items:
            $ref: '#/components/schemas/NotificationType'
          type: array
        starting_with_time:
          description: Fetch notifications reported at this timestamp or later/earlier. Later notifications will be fetched if the order is ascending, and earlier ones if the order is descending. The timestamp is expected to be in RFC-3339 format.
          format: date
          type: string
        after_id:
          description: Fetch notifications after this given ID (not including the notification with the given ID). This is meant to facilitate pagination. Later notifications will be fetched if ascending order is selected, and earlier ones if descending order is selected. Warning - do not assume anything about the implementation of after_id; the values of the ID are intended to be copy-pasted from retrieved notifications for pagination.
          format: int32
          type: integer
        order:
          $ref: '#/components/schemas/OrderEnum'
        max_results:
          default: 100
          description: The maximal number of results to fetch
          format: int32
          maximum: 1000
          minimum: 1
          type: integer
      type: object
    NotificationType:
      description: The type of notification. This also determines the type of the content of the notification.
      enum:
      - task_completed_successfully
      - task_failed
      type: string
    OrderEnum:
      default: desc
      description: Order of results to fetch (either ascending or descending); ordering is chronological where the time is set to when the retrieved object was created
      enum:
      - asc
      - desc
      type: string
    GetNotificationsResponse:
      example:
        notifications:
        - wallet_id: wallet_id
          created_at: 2000-01-23
          task_id: task_id
          id: 0
          content: ""
        - wallet_id: wallet_id
          created_at: 2000-01-23
          task_id: task_id
          id: 0
          content: ""
      properties:
        notifications:
          items:
            $ref: '#/components/schemas/Notification'
          type: array
      type: object
    Notification:
      description: A notification including some metadata and a content field whose type depends on the type of notification.
      example:
        wallet_id: wallet_id
        created_at: 2000-01-23
        task_id: task_id
        id: 0
        content: ""
      properties:
        id:
          description: The unique identifier of the notification. Can be used for pagination purposes.
          format: int32
          type: integer
        created_at:
          description: Timestamp the notification was created at, in RFC-3339 format.
          format: date
          type: string
        wallet_id:
          description: The ID of the wallet the notification relates to. May be null in cases there is no such specific wallet.
          type: string
        task_id:
          description: The ID of the task the notification relates to. May be empty in cases there is no such specific task.
          type: string
        notification_type:
          $ref: '#/components/schemas/NotificationType'
        content:
          oneOf:
          - $ref: '#/components/schemas/EmptyContent'
      required:
      - created_at
      - id
      - notification_type
      - task_id
      type: object
    EmptyContent:
      type: object
    GetWalletActivityRequest:
      example:
        wallet_id: source_wallet
        start_index: 0
        number_of_results: 10
      properties:
        wallet_id:
          description: The ID of the Wallet for which to retrieve activity history
          type: string
        start_index:
          description: An offset used to paginate through the activity history; indexing is 0-based
          format: int32
          type: integer
        number_of_results:
          description: Maximal number of results to fetch in this call
          format: int32
          type: integer
      required:
      - number_of_results
      - start_index
      - wallet_id
      type: object
    GetRulesResponse:
      example:
        rules:
        - public_key: bf45ab74bd4a46fe7a2432ba05e2f726bf4fe42a80052849e13e2541230d3204
          can_issue_confidentially: false
          namespace: bank-a.loans.*
          is_admin: false
        - public_key: bf45ab74bd4a46fe7a2432ba05e2f726bf4fe42a80052849e13e2541230d3204
          can_issue_confidentially: false
          namespace: bank-a.loans.*
          is_admin: false
      properties:
        rules:
          description: The Rules currently active in the network
          items:
            $ref: '#/components/schemas/Rule'
          type: array
      type: object
    GetAllWalletsResponse:
      example:
        wallet_ids:
        - Jane
        - John
        - Marty
      properties:
        wallet_ids:
          description: The IDs of the Wallets currently active in this Node
          items:
            type: string
          type: array
      type: object
    GetTaskStatusRequest:
      example:
        id: 5aaa4045-e949-4c44-a7ef-25fb55a1afa6
      properties:
        id:
          description: The ID of the Task
          type: string
      required:
      - id
      type: object
    GetTasksRequest:
      example:
        start_index: 0
        number_of_results: 10
        types:
        - delete_wallet
        - transfer_asset
        results:
        - in_progress
        - failure
        order: asc
      properties:
        start_index:
          description: An offset used to paginate through the Task list; indexing is 0-based
          format: int32
          type: integer
        number_of_results:
          description: Maximal number of results to fetch in this call
          format: int32
          type: integer
        types:
          description: Types of Tasks to fetch; fetch all types if omitted
          items:
            $ref: '#/components/schemas/TaskType'
          type: array
        results:
          description: List of results (statuses) to filter by; fetch in_progress tasks if omitted
          items:
            $ref: '#/components/schemas/Result'
          type: array
        order:
          $ref: '#/components/schemas/OrderEnum'
      required:
      - number_of_results
      - start_index
      type: object
    GetTaskStatusResponse:
      example:
        id: 5aaa4045-e949-4c44-a7ef-25fb55a1afa6
        created_at: 2019-08-11T10:37:04Z
        updated_at: 2019-08-12T11:12:59Z
        result: in_progress
        state: tx_submitted
        tx_hash: 0xd379aa4e5e40552910c8ae456c65dcf51e9779fc9281ac2dc9e677ec810af6b1
        type: transfer_asset
        data: {}
      properties:
        id:
          description: Unique ID of the Task
          type: string
        created_at:
          description: UTC time of creation of the Task in RFC-3339 format
          format: date
          type: string
        updated_at:
          description: UTC last time the Task was updated in RFC-3339 format
          format: date
          type: string
        result:
          $ref: '#/components/schemas/Result'
        state:
          $ref: '#/components/schemas/TaskState'
        tx_hash:
          description: The Blockchain-generated hash of the Transaction; populated after the Blockchain Node accepted the Transaction
          type: string
        qedit_tx_hash:
          description: The QEDIT-generated hash of the Transaction; generated after proof generation, but prior to Broadcast by the QEDIT Node
          type: string
        type:
          $ref: '#/components/schemas/TaskType'
        data:
          $ref: '#/components/schemas/TaskData'
        error:
          description: In case of failure this field reports the reason for the failure
          type: string
      type: object
    Result:
      description: The current result (status) of the Task
      enum:
      - pending
      - in_progress
      - awaiting_user_interaction
      - success
      - failure
      type: string
    TaskState:
      description: A fine-grained status of the node's inner state. This field is subject to changes and should not be relied upon during development.
      enum:
      - pending_state
      - in_progress_state
      - tx_generated_state
      - conf_req_sent_state
      - conf_req_received_state
      - conf_req_canceled_by_sender_state
      - conf_req_canceled_by_receiver_state
      - tx_submitted_state
      - failure_state
      - success_state
      type: string
    TaskType:
      description: Task type
      enum:
      - transfer_asset
      - issue_asset
      - alter_rule
      - import_wallet
      - delete_wallet
      - outgoing_confirm_request
      - incoming_confirm_request
      - cancellation
      type: string
    TaskData:
      description: An object that includes additional request details
      properties:
        sender_public_key:
          description: The public key of the sender of the confirmation request
          type: string
        require_confirmation_from:
          description: The public key for the confirmation request receiver
          type: string
        recipient_address:
          description: The address the request was sent to
          type: string
        asset_id:
          type: string
        amount:
          format: int32
          type: integer
        wallet_id:
          type: string
      type: object
    GetTasksResponse:
      example:
        tasks:
        - id: 5aaa4045-e949-4c44-a7ef-25fb55a1afa6
          created_at: 2019-08-11T10:37:04Z
          updated_at: 2019-08-12T11:12:59Z
          result: in_progress
          state: tx_submitted
          tx_hash: 0xd379aa4e5e40552910c8ae456c65dcf51e9779fc9281ac2dc9e677ec810af6b1
          type: transfer_asset
          data: {}
        - id: 5aaa4045-e949-4c44-a7ef-25fb55a1afa6
          created_at: 2019-08-11T10:37:04Z
          updated_at: 2019-08-12T11:12:59Z
          result: in_progress
          state: tx_submitted
          tx_hash: 0xd379aa4e5e40552910c8ae456c65dcf51e9779fc9281ac2dc9e677ec810af6b1
          type: transfer_asset
          data: {}
      properties:
        tasks:
          description: The returned Tasks array, sorted in the requested order
          items:
            $ref: '#/components/schemas/GetTaskStatusResponse'
          type: array
      type: object
    GetNetworkActivityRequest:
      example:
        start_index: 0
        number_of_results: 1
        tx_hashes:
        - 0xd379aa4e5e40552910c8ae456c65dcf51e9779fc9281ac2dc9e677ec810af6b1
      properties:
        start_index:
          description: An offset used to paginate through the activity history; indexing is 0-based
          format: int32
          type: integer
        number_of_results:
          description: Maximal number of results to fetch in this call
          format: int32
          type: integer
        tx_hashes:
          items:
            type: string
          type: array
      required:
      - number_of_results
      - start_index
      type: object
    GetNetworkActivityResponse:
      example:
        transactions:
        - metadata:
            type: Issue
            tx_hash: d379aa4e5e40552910c8ae456c65dcf51e9779fc9281ac2dc9e677ec810af6b1
            block_hash: 9701560ba877d5552303cb54d10d461a0836a324649608a0a56c885b631b0434
            timestamp: 2019-05-20T02:10:46-07:00
            index_in_block: 1
            block_height: 100
          content:
            outputs:
            - is_confidential: false,
              public_issuance_description:
                amount: 12
                asset_id: bank-a.loans.1
              output_description:
                cv: c2366ace373af05c92fc315dd502637ee4fa6ba46f05319ddcff209619bbaa27
                cm: 0e148cb409e313cb13f28c6d8110fdb7f4daf119db99cedeab1234bd64ac4681
                epk: f58c334ecde6e3efaeba6faedadb615c0fad30115a62e18c872481a293bd589d
                enc_note: 3222a401fc15115399e3b54c51509d9e5fafec2ddede463a8606d8d405f45c88a5a0d6e29728745407cdfe6d4b98a863b55cc230a463436e9f228c984085cc3082c48f6a2a9cb3b6a2ebb140e202c124b4d8483bc75e9978db08ff818fcf9ffa5c3fe226114fe27f41673220734471611af7255bbfb2bd4c2793fa45372f9ac3e91b4c2de92f0688dd92b1a993ed268e024e48f4e04c406a6e898c3bb3b290e3fde79bdaa0f9d9
                enc_sender: 9cb97b6764e8ad490bd5246c133245bc9424455b9cb7cc98fc1e054c8d0827863b5f89424bc910a09040461b4d01c5bfe732dcd491dc8cd78e0eba00e62919105211c1ce8d7ab1a37adc87d118890ffd
                zkproof: cc43f2c6be02d5e340dcbc1cae9ab4c8199731e115637186384d2e0a30051daa9031a9546683483d1d32b27b0fd47afd03c393cb5f1a5e68319889da501f296126a4f98f9a9ee1db5ba9d9ecda561176ac2d5ca00b45eaf0a09ad20785ed7c5bb5351b3116b1c7858ed44b9abdcd4aeefa4afa7d2f03d64c1b60b316a6d40595a183132f6ef391bf44002a7677f27f793e7661d2a00917e63a13af3af50d5f99f02bf24af4d743f51fce0712252dba7fa89fa5d89855d9c9d323ab1ffe3f0470
            public_key: bf45ab74bd4a46fe7a2432ba05e2f726bf4fe42a80052849e13e2541230d3204
            signature: 97a94ce9ad8fdb4fa9933b67e4022fe92e19516728cb1b5f43edf3aaad994a544d13725708fd38a683b82a2d0092b89a09f5463ce688b39215b10f6a732e480b
        - metadata:
            type: Issue
            tx_hash: d379aa4e5e40552910c8ae456c65dcf51e9779fc9281ac2dc9e677ec810af6b1
            block_hash: 9701560ba877d5552303cb54d10d461a0836a324649608a0a56c885b631b0434
            timestamp: 2019-05-20T02:10:46-07:00
            index_in_block: 1
            block_height: 100
          content:
            outputs:
            - is_confidential: false,
              public_issuance_description:
                amount: 12
                asset_id: bank-a.loans.1
              output_description:
                cv: c2366ace373af05c92fc315dd502637ee4fa6ba46f05319ddcff209619bbaa27
                cm: 0e148cb409e313cb13f28c6d8110fdb7f4daf119db99cedeab1234bd64ac4681
                epk: f58c334ecde6e3efaeba6faedadb615c0fad30115a62e18c872481a293bd589d
                enc_note: 3222a401fc15115399e3b54c51509d9e5fafec2ddede463a8606d8d405f45c88a5a0d6e29728745407cdfe6d4b98a863b55cc230a463436e9f228c984085cc3082c48f6a2a9cb3b6a2ebb140e202c124b4d8483bc75e9978db08ff818fcf9ffa5c3fe226114fe27f41673220734471611af7255bbfb2bd4c2793fa45372f9ac3e91b4c2de92f0688dd92b1a993ed268e024e48f4e04c406a6e898c3bb3b290e3fde79bdaa0f9d9
                enc_sender: 9cb97b6764e8ad490bd5246c133245bc9424455b9cb7cc98fc1e054c8d0827863b5f89424bc910a09040461b4d01c5bfe732dcd491dc8cd78e0eba00e62919105211c1ce8d7ab1a37adc87d118890ffd
                zkproof: cc43f2c6be02d5e340dcbc1cae9ab4c8199731e115637186384d2e0a30051daa9031a9546683483d1d32b27b0fd47afd03c393cb5f1a5e68319889da501f296126a4f98f9a9ee1db5ba9d9ecda561176ac2d5ca00b45eaf0a09ad20785ed7c5bb5351b3116b1c7858ed44b9abdcd4aeefa4afa7d2f03d64c1b60b316a6d40595a183132f6ef391bf44002a7677f27f793e7661d2a00917e63a13af3af50d5f99f02bf24af4d743f51fce0712252dba7fa89fa5d89855d9c9d323ab1ffe3f0470
            public_key: bf45ab74bd4a46fe7a2432ba05e2f726bf4fe42a80052849e13e2541230d3204
            signature: 97a94ce9ad8fdb4fa9933b67e4022fe92e19516728cb1b5f43edf3aaad994a544d13725708fd38a683b82a2d0092b89a09f5463ce688b39215b10f6a732e480b
      properties:
        transactions:
          items:
            $ref: '#/components/schemas/AnalyticTransaction'
          type: array
      type: object
    GetSyncStatusResponse:
      example:
        blockchain_block_height: 0
        in_sync: true
        last_processed_block_height: 6
      properties:
        in_sync:
          description: Boolean signifying whether the QEDIT Node is in sync with the Blockchain; false if the Node is not synced; sync is defined as having less than a preconfigured difference between the current Blockchain height and the last block processed by the Node; the allowed difference defaults to 5, but can be configured when setting up the Node
          type: boolean
        blockchain_block_height:
          description: The current block height of the Blockchain
          format: int32
          type: integer
        last_processed_block_height:
          description: The height of the last block that was processed in the Node
          format: int32
          type: integer
      type: object
    IssueAssetRequest:
      example:
        wallet_id: source_wallet
        authorization: PrivacyIsAwesome
        recipient_address: q1dxlf6vap2566t8w3z8f5j5lxy9n036zfsaytjve7fedsw6w8c9q9ctrwfz6ryyjwkgvj6tjg70f
        amount: 4
        asset_id: bank-a.loans.1
        confidential: false
        memo: '{"recipient_name": "Dan"}'
      properties:
        wallet_id:
          description: The ID of the Wallet that has the required Issuance privileges
          type: string
        authorization:
          description: The authorization password for the Wallet that has the Issuance privileges
          type: string
        recipient_address:
          description: The Address of the recipient of the issued Assets
          type: string
        asset_id:
          description: |
            The ID of an Asset Type. It must be a string of length 0 to 40 characters. Allowed characters are lower- and uppercase letters, digits, dot (.), and hyphen (-). It must not end with an hyphen. Asset IDs are case-sensitive.
          type: string
        amount:
          description: the amount of Assets to issue
          format: int32
          type: integer
        confidential:
          description: Boolean which should be true if the issuance should be confidential, and false of the Issuance should be public
          type: boolean
        memo:
          description: An app-customizable field to store additional private data relating to the issuance; the memo is shared between the sender and the receiver, but is not divulged to other parties
          type: string
        attachment_ids:
          description: The globally-unique identifiers of the Attachments to attach to the issued Asset; the attachments must already be uploaded, and their identifiers are returned by the upload endpoint
          items:
            type: string
          type: array
      required:
      - amount
      - asset_id
      - authorization
      - confidential
      - memo
      - recipient_address
      - wallet_id
      type: object
    GetNewAddressRequest:
      example:
        wallet_id: source_wallet
      properties:
        wallet_id:
          description: The ID of the Wallet for which to generate an Address
          type: string
        diversifier:
          description: An optional 11-byte (22 hexadecimal characters) input which is used to generate different Addresses. A unique Address will be generated for each different diversifier used. If omitted, the Node selects a random diversifier.
          type: string
      required:
      - wallet_id
      type: object
    GetNewAddressResponse:
      example:
        wallet_id: source_wallet
        recipient_address: q1dxlf6vap2566t8w3z8f5j5lxy9n036zfsaytjve7fedsw6w8c9q9ctrwfz6ryyjwkgvj6tjg70f
      properties:
        wallet_id:
          description: The ID of the Wallet the Address belongs to
          type: string
        recipient_address:
          description: The generated Address of the Wallet
          type: string
      required:
      - recipient_address
      - wallet_id
      type: object
    GetPublicKeyRequest:
      example:
        wallet_id: source_wallet
      properties:
        wallet_id:
          description: The ID of the Wallet for which to retrieve the public key
          type: string
      required:
      - wallet_id
      type: object
    GetPublicKeyResponse:
      example:
        wallet_id: source_wallet
        public_key: bf45ab74bd4a46fe7a2432ba05e2f726bf4fe42a80052849e13e2541230d3204
      properties:
        wallet_id:
          description: The ID of the Wallet the pubic key belongs to
          type: string
        public_key:
          description: The public key of the Wallet
          type: string
      required:
      - public_key
      - wallet_id
      type: object
    ShareWalletViewingPermissionRequest:
      example:
        wallet_id: alice_wallet
        authorization: PrivacyIsAwesome
        recipient_payment_address: q1dxlf6vap2566t8w3z8f5j5lxy9n036zfsaytjve7fedsw6w8c9q9ctrwfz6ryyjwkgvj6tjg70f
        share_wallet_id_as: alice_wallet_readonly
      properties:
        wallet_id:
          description: The ID of the Wallet to export a viewing key for
          type: string
        authorization:
          description: The authorization password for the Wallet
          type: string
        recipient_payment_address:
          description: An Address of the Wallet that belongs to the intended recipient of the exported viewing key; used to automatically send the key to the recipient in a secure and private manner
          type: string
        share_wallet_id_as:
          description: The wallet id assigned by the sender and used to identify the shared wallet on the recipient's Node.
          type: string
      required:
      - authorization
      - recipient_payment_address
      - share_wallet_id_as
      - wallet_id
      type: object
    ShareWalletViewingPermissionResponse:
      type: object
    ExportWalletRequest:
      example:
        wallet_id: source_wallet
      properties:
        wallet_id:
          description: The ID of the Wallet to export
          type: string
      required:
      - wallet_id
      type: object
    ExportWalletResponse:
      example:
        wallet_id: source_wallet
        encrypted_sk: 44d2836bbfcc7c69dd35dbe854d54a093be9a1be7f9d658325a8d2526f67ede16abf0d1430edab07be9b8c12070260af
        salt: 27ca2bf75fe4c1564398459bd2f39a89645bf98aeeb1f99a9c9efa6e5c39cbfe
      properties:
        wallet_id:
          description: The ID of the exported Wallet in the Node from which it was exported
          type: string
        encrypted_sk:
          description: The encrypted secret key of the Wallet
          type: string
        salt:
          description: The salt used in the encryption of the secret key
          type: string
      required:
      - encrypted_sk
      - salt
      - wallet_id
      type: object
    ImportWalletRequest:
      example:
        wallet_id: source_wallet
        encrypted_sk: 44d2836bbfcc7c69dd35dbe854d54a093be9a1be7f9d658325a8d2526f67ede16abf0d1430edab07be9b8c12070260af
        authorization: PrivacyIsAwesome
        salt: 27ca2bf75fe4c1564398459bd2f39a89645bf98aeeb1f99a9c9efa6e5c39cbfe
      properties:
        wallet_id:
          description: The ID under which to import the Wallet; can be different from the ID the Wallet was stored under in the exporting Node
          type: string
        encrypted_sk:
          description: The encrypted secret key of the Wallet
          type: string
        authorization:
          description: The authorization password used during Wallet generation that allows to decrypt the encrypted secret key
          type: string
        salt:
          description: The salt used in the encryption of the secret key
          type: string
      required:
      - authorization
      - encrypted_sk
      - salt
      - wallet_id
      type: object
    ExportAuditorAccessWalletRequest:
      example:
        wallet_id: source_wallet
        authorization: PrivacyIsAwesome
        recipient_payment_address: q1dxlf6vap2566t8w3z8f5j5lxy9n036zfsaytjve7fedsw6w8c9q9ctrwfz6ryyjwkgvj6tjg70f
      properties:
        wallet_id:
          description: The ID of the Wallet to export a viewing key for
          type: string
        authorization:
          description: The authorization password for the Wallet
          type: string
        recipient_payment_address:
          description: The Address of the Wallet that belongs to the intended recipient of the exported viewing key; used to encrypt the key in such a way that only the intended recipient can decrypt it
          type: string
      required:
      - authorization
      - recipient_payment_address
      - wallet_id
      type: object
    ExportAuditorAccessWalletResponse:
      example:
        wallet_id: source_wallet
        public_key: 8a907d5c070223b4fd30a05e2e103ae6f7bbae2bc6ea36258b5a7ac9a4b8f646
        access_key: 9c1616ccb51d4022c7b8654b1a69682654c5da6570b37d3cd2a2368a758f7922
      properties:
        wallet_id:
          description: The ID of the exported Wallet in the Node from which it was exported
          type: string
        public_key:
          description: The public key of the exported Wallet which uniquely identifies it across the network
          type: string
        access_key:
          description: The encrypted viewing key
          type: string
      required:
      - access_key
      - public_key
      - wallet_id
      type: object
    ImportAuditorAccessWalletRequest:
      example:
        wallet_id: source_wallet
        public_key: 8a907d5c070223b4fd30a05e2e103ae6f7bbae2bc6ea36258b5a7ac9a4b8f646
        access_key: 9c1616ccb51d4022c7b8654b1a69682654c5da6570b37d3cd2a2368a758f7922
      properties:
        wallet_id:
          description: The ID under which to import the Wallet; can be different from the ID the Wallet was stored under in the exporting Node
          type: string
        public_key:
          description: The public key of the imported Wallet
          type: string
        access_key:
          description: the encrypted viewing key of the imported Wallet
          type: string
      required:
      - access_key
      - public_key
      - wallet_id
      type: object
    GenerateWalletRequest:
      example:
        wallet_id: source_wallet
        authorization: PrivacyIsAwesome
      properties:
        wallet_id:
          description: The ID under which to create the Wallet; must be unique within the Node
          type: string
        authorization:
          description: The authorizarion password under which to encrypt the generated Wallet's secret key; will be required in order to perform actions using the Wallet
          type: string
      required:
      - authorization
      - wallet_id
      type: object
    DeleteWalletRequest:
      example:
        wallet_id: source_wallet
        authorization: PrivacyIsAwesome
      properties:
        wallet_id:
          description: The ID of the Wallet to delete
          type: string
        authorization:
          description: The authorization password for the Wallet
          type: string
      required:
      - wallet_id
      type: object
    CreateRuleRequest:
      example:
        wallet_id: issuer_wallet
        authorization: PrivacyIsAwesome
        rules_to_add:
        - public_key: bf45ab74bd4a46fe7a2432ba05e2f726bf4fe42a80052849e13e2541230d3204
          can_issue_confidentially: false
          namespace: bank-a.loans.*
          is_admin: false
      properties:
        wallet_id:
          description: The ID of the Wallet whose admin credentials should be used to create the new Rules
          type: string
        authorization:
          description: The authorization password for the Wallet whose admin credentials should be used to create the new Rules
          type: string
        rules_to_add:
          description: The list of Rules to add to the network
          items:
            $ref: '#/components/schemas/Rule'
          type: array
      required:
      - authorization
      - rules_to_add
      - wallet_id
      type: object
    DeleteRuleRequest:
      example:
        wallet_id: issuer_wallet
        authorization: PrivacyIsAwesome
        rules_to_delete:
        - public_key: bf45ab74bd4a46fe7a2432ba05e2f726bf4fe42a80052849e13e2541230d3204
          can_issue_confidentially: false
          namespace: bank-a.loans.*
          is_admin: false
      properties:
        wallet_id:
          description: The ID of the Wallet whose admin credentials should be used to delete the Rules
          type: string
        authorization:
          description: The authorization password for the Wallet whose admin credentials should be used to delete the Rules
          type: string
        rules_to_delete:
          description: The list of Rules to delete from the network
          items:
            $ref: '#/components/schemas/Rule'
          type: array
      required:
      - authorization
      - rules_to_delete
      - wallet_id
      type: object
    Rule:
      example:
        public_key: bf45ab74bd4a46fe7a2432ba05e2f726bf4fe42a80052849e13e2541230d3204
        can_issue_confidentially: false
        namespace: bank-a.loans.*
        is_admin: false
      properties:
        public_key:
          description: The public key of the Wallet that is being granted rights in this Rule
          type: string
        is_admin:
          description: Boolean signifying whether the Rule grants admin rights
          type: boolean
        namespace:
          description: |
            A `Namespace` describes what Asset IDs can be issued in an Issuance Rule. It is a string in the same format as `AssetId`. Additionally, if it ends with a wildcard character `*`, then the namespace covers all asset IDs with the namespace as a prefix. Without a final wildcard, the namespace covers exactly one asset ID. Example: The namespace `currencies.dollar` covers only this exact asset type, while `currencies.*` covers all asset types that start with `currencies.`.
          type: string
        can_issue_confidentially:
          description: Boolean signifying whether the Rule grants confidentialy issuance rights; if true, then both public and confidential issuance right are granted; if false, then only public issuance rights are granted
          type: boolean
      required:
      - can_issue_confidentially
      - is_admin
      - namespace
      - public_key
      type: object
    ErrorResponse:
      example:
        error_code: 400
        message: insufficient funds
      properties:
        error_code:
          description: The error code returned from the server
          format: int32
          type: integer
        message:
          description: The error message returned from the server
          type: string
      required:
      - error_code
      type: object
    AsyncTaskCreatedResponse:
      example:
        id: 70a88558-2b8b-4b63-a5b6-2c54b24377f5
      properties:
        id:
          description: The unique ID of the Task that was created in the Node to process the asynchronous request
          type: string
      required:
      - id
      type: object
    AnalyticTransaction:
      example:
        metadata:
          type: Issue
          tx_hash: d379aa4e5e40552910c8ae456c65dcf51e9779fc9281ac2dc9e677ec810af6b1
          block_hash: 9701560ba877d5552303cb54d10d461a0836a324649608a0a56c885b631b0434
          timestamp: 2019-05-20T02:10:46-07:00
          index_in_block: 1
          block_height: 100
        content:
          outputs:
          - is_confidential: false,
            public_issuance_description:
              amount: 12
              asset_id: bank-a.loans.1
            output_description:
              cv: c2366ace373af05c92fc315dd502637ee4fa6ba46f05319ddcff209619bbaa27
              cm: 0e148cb409e313cb13f28c6d8110fdb7f4daf119db99cedeab1234bd64ac4681
              epk: f58c334ecde6e3efaeba6faedadb615c0fad30115a62e18c872481a293bd589d
              enc_note: 3222a401fc15115399e3b54c51509d9e5fafec2ddede463a8606d8d405f45c88a5a0d6e29728745407cdfe6d4b98a863b55cc230a463436e9f228c984085cc3082c48f6a2a9cb3b6a2ebb140e202c124b4d8483bc75e9978db08ff818fcf9ffa5c3fe226114fe27f41673220734471611af7255bbfb2bd4c2793fa45372f9ac3e91b4c2de92f0688dd92b1a993ed268e024e48f4e04c406a6e898c3bb3b290e3fde79bdaa0f9d9
              enc_sender: 9cb97b6764e8ad490bd5246c133245bc9424455b9cb7cc98fc1e054c8d0827863b5f89424bc910a09040461b4d01c5bfe732dcd491dc8cd78e0eba00e62919105211c1ce8d7ab1a37adc87d118890ffd
              zkproof: cc43f2c6be02d5e340dcbc1cae9ab4c8199731e115637186384d2e0a30051daa9031a9546683483d1d32b27b0fd47afd03c393cb5f1a5e68319889da501f296126a4f98f9a9ee1db5ba9d9ecda561176ac2d5ca00b45eaf0a09ad20785ed7c5bb5351b3116b1c7858ed44b9abdcd4aeefa4afa7d2f03d64c1b60b316a6d40595a183132f6ef391bf44002a7677f27f793e7661d2a00917e63a13af3af50d5f99f02bf24af4d743f51fce0712252dba7fa89fa5d89855d9c9d323ab1ffe3f0470
          public_key: bf45ab74bd4a46fe7a2432ba05e2f726bf4fe42a80052849e13e2541230d3204
          signature: 97a94ce9ad8fdb4fa9933b67e4022fe92e19516728cb1b5f43edf3aaad994a544d13725708fd38a683b82a2d0092b89a09f5463ce688b39215b10f6a732e480b
      properties:
        metadata:
          $ref: '#/components/schemas/AnalyticsTxMetadata'
        content:
          description: The detailed content of the transaction; format differs depending on the transaction type
          oneOf:
          - $ref: '#/components/schemas/AnalyticsIssueTx'
          - $ref: '#/components/schemas/AnalyticsMultiTransferTx'
          - $ref: '#/components/schemas/AnalyticsRuleTx'
      type: object
    AnalyticsTxMetadata:
      properties:
        type:
          $ref: '#/components/schemas/AnalyticsTxType'
        tx_hash:
          description: the QEDIT-generated hash of the transaction
          type: string
        block_height:
          description: The height of the Block (inside the Blockchain) that the transaction is a part of
          format: int32
          type: integer
        block_hash:
          description: the hash of the Block (inside the Blockchain) that the transaction is a part of
          type: string
        timestamp:
          description: UTC time of creation of the time the Block containing the transaction was created in RFC-3339 format
          type: string
        index_in_block:
          description: The serial number within the Block of the transaction relative to other QEDIT transactions; indexing is 0-based
          format: int32
          type: integer
      type: object
    AnalyticsTxType:
      description: Type of transaction
      enum:
      - Issue
      - Transfer
      - Rule
      type: string
    AnalyticsIssueTx:
      description: The data of a particular Issuance transaction
      properties:
        outputs:
          description: The data of the Assets issued (multiple Assets may potentially be issued in a single Issuance transaction)
          items:
            $ref: '#/components/schemas/AnalyticsOutput'
          type: array
        public_key:
          description: The public key of the Wallet that performed the Issuance
          type: string
        signature:
          description: The signature on the transaction by the secret key of the Wallet that performed the Issuance
          type: string
      type: object
    AnalyticsMultiTransferTx:
      description: The data of a particular Transfer transaction; a single such transaction may contain multiple Transfers
      properties:
        transfers:
          description: The (potentially several) Transfers within the transaction
          items:
            $ref: '#/components/schemas/AnalyticsTransferTx'
          type: array
      type: object
    AnalyticsTransferTx:
      description: The data of a single Transfer within a Transfer transaction
      properties:
        spends:
          description: The information and Proofs associated with the Assets spent in the Transfer
          items:
            $ref: '#/components/schemas/AnalyticsSpendDescription'
          type: array
        outputs:
          description: The information and Proofs associated with the Assets output from the Transfer
          items:
            $ref: '#/components/schemas/AnalyticsOutputDescription'
          type: array
        rk:
          description: The re-randomized public key of the Wallet which created the Transfer
          type: string
        spend_auth_sig:
          description: The signature authorizing the spend of the Assets spent in the Transfer
          type: string
        binding_sig:
          description: The signature binding the spent and output Assets and verifying the balance
          type: string
        confirmation_sig:
          description: The signature of the confirming party if a confirmation was requested; empty if no confirmation was requested
          type: string
      type: object
    AnalyticsRuleTx:
      description: The data of a particular Rule changing transaction
      properties:
        sender_public_key:
          description: The public key of the Wallet used to create the Rule
          type: string
        rules_to_add:
          description: The details of the Rules added in this transaction
          items:
            $ref: '#/components/schemas/AnalyticsRuleDefinition'
          type: array
        rules_to_delete:
          description: The details of the Rules deleted in this transaction
          items:
            $ref: '#/components/schemas/AnalyticsRuleDefinition'
          type: array
        nonce:
          description: The nonce used to make this Rule transaction unique
          format: int32
          type: integer
        signature:
          description: The signature authorizing the Rule changes, made by the Wallet that made the Rule changes
          type: string
      type: object
    AnalyticsRuleDefinition:
      example:
        public_key: AAAAAAAAAA==
        is_admin: true
        namespace: bank-a.loans.*
        can_issue_confidentially: true
      properties:
        public_key:
          description: The public key of the Wallet that is being granted rights in this Rule
          type: string
        is_admin:
          description: Boolean signifying whether the Rule grants admin rights
          type: boolean
        namespace:
          description: |
            A `Namespace` describes what Asset IDs can be issued in an Issuance Rule. It is a string in the same format as `AssetId`. Additionally, if it ends with a wildcard character `*`, then the namespace covers all asset IDs with the namespace as a prefix. Without a final wildcard, the namespace covers exactly one asset ID. Example: The namespace `currencies.dollar` covers only this exact asset type, while `currencies.*` covers all asset types that start with `currencies.`.
          type: string
        can_issue_confidentially:
          description: Boolean signifying whether the Rule grants confidentialy issuance rights; if true, then both public and confidential issuance right are granted; if false, then only public issuance rights are granted
          type: boolean
      type: object
    AnalyticsRuleWalletDefinition:
      example:
        public_key: AAAAAAAAAA==
        is_admin: true
        namespace: bank-a.loans.*
        can_issue_confidentially: true
        operation: CreateRule
      properties:
        public_key:
          description: The public key of the Wallet that is being granted rights in this Rule
          type: string
        is_admin:
          description: Boolean signifying whether the Rule grants admin rights
          type: boolean
        namespace:
          description: |
            A `Namespace` describes what Asset IDs can be issued in an Issuance Rule. It is a string in the same format as `AssetId`. Additionally, if it ends with a wildcard character `*`, then the namespace covers all asset IDs with the namespace as a prefix. Without a final wildcard, the namespace covers exactly one asset ID. Example: The namespace `currencies.dollar` covers only this exact asset type, while `currencies.*` covers all asset types that start with `currencies.`.
          type: string
        can_issue_confidentially:
          description: Boolean signifying whether the Rule grants confidentialy issuance rights; if true, then both public and confidential issuance right are granted; if false, then only public issuance rights are granted
          type: boolean
        operation:
          description: Operation of the transaction, which can be rule creation or deletion
          enum:
          - CreateRule
          - DeleteRule
          type: string
      type: object
    AnalyticsOutput:
      properties:
        is_confidential:
          description: Boolean signifying whether the Issuance was done confidentially; false if the Issuance was done publicly
          type: boolean
        public_issuance_description:
          $ref: '#/components/schemas/AnalyticsPublicIssuanceDescription'
        confidential_issuance_description:
          $ref: '#/components/schemas/AnalyticsConfidentialIssuanceDescription'
        output_description:
          $ref: '#/components/schemas/AnalyticsOutputDescription'
      type: object
    AnalyticsPublicIssuanceDescription:
      description: Describes what Asset Type and amount were issued; null if the Issuance was confidential
      example:
        asset_id: bank-a.loans.1
        amount: 3
      nullable: true
      properties:
        asset_id:
          description: |
            The ID of an Asset Type. It must be a string of length 0 to 40 characters. Allowed characters are lower- and uppercase letters, digits, dot (.), and hyphen (-). It must not end with an hyphen. Asset IDs are case-sensitive.
          type: string
        amount:
          description: The amount of Assets issued
          format: int32
          minimum: 0
          type: integer
      required:
      - amount
      - asset_id
      type: object
    AnalyticsSpendDescription:
      example:
        cv: AAAAAAAAAAA=
        anchor: AAAAAAAAAAA=
        nullifier: AAAAAAAAAAA=
        zkproof: 000AAAAAAA=
      properties:
        cv:
          description: The commitment to both the Asset Type and amount of the Note
          type: string
        anchor:
          description: The anchor (root) of the Merkle tree used in the Proof
          type: string
        nullifier:
          description: The Note's Nullifier
          type: string
        zkproof:
          description: The Proof that the Note indeed exists in the Merkle tree and belongs to the spender
          type: string
      type: object
    AnalyticsOutputDescription:
      example:
        cv: AAAAAAAAAAA=
        cm: 000AAAAAAA=
        zkproof: 000AAAAAAA=
        epk: AAAAAAAAAAA=
        enc_note: AAAAAAAAAAA=
        enc_sender: 000AAAAAAA=
      properties:
        cv:
          description: The commitment to both the Asset Type and amount of the Note
          type: string
        cm:
          description: The commitment to the entire Note
          type: string
        zkproof:
          description: The Proof that the commitments match
          type: string
        epk:
          description: The ephemeral public key used to encrypt the Note contents for the receiver
          type: string
        enc_note:
          description: The Note encryption for the receiver
          type: string
        enc_sender:
          description: The Note encryption for the sender
          type: string
        require_confirmation_from_rk:
          description: The rerandomized (fully-anonymous) public key of the wallet that confirmed receipt of the output; identity of this wallet can only be recovered by the sending and confirming wallets (including view-only copies of these wallets); empty if no confirmation was requested
          type: string
      type: object
    AnalyticsConfidentialIssuanceDescription:
      description: The details and Proof attached to a confidential Issuance; null if the Issuance was public
      example:
        input_cv: AAAAAAAAAAA=
        zkproof: 000AAAAAAA=
        namespace: bank-a.loans.*
      nullable: true
      properties:
        casset:
          description: The commitment to both the Asset Type and amount of the issued Note
          type: string
        namespace:
          description: |
            A `Namespace` describes what Asset IDs can be issued in an Issuance Rule. It is a string in the same format as `AssetId`. Additionally, if it ends with a wildcard character `*`, then the namespace covers all asset IDs with the namespace as a prefix. Without a final wildcard, the namespace covers exactly one asset ID. Example: The namespace `currencies.dollar` covers only this exact asset type, while `currencies.*` covers all asset types that start with `currencies.`.
          type: string
        zkproof:
          description: The Proof that the issued Asset Type indeed matches the reported Rule
          type: string
      type: object
    GetWalletActivityResponse:
      example:
        wallet_id: wallet_id
        transactions:
        - metadata:
            tx_hash: tx_hash
            timestamp: timestamp
          content: ""
        - metadata:
            tx_hash: tx_hash
            timestamp: timestamp
          content: ""
      properties:
        wallet_id:
          type: string
        transactions:
          description: The list of retrieved transactions
          items:
            $ref: '#/components/schemas/AnalyticWalletTx'
          type: array
      type: object
    AnalyticWalletTx:
      description: A single retrieved transaction
      example:
        metadata:
          tx_hash: tx_hash
          timestamp: timestamp
        content: ""
      properties:
        metadata:
          $ref: '#/components/schemas/AnalyticWalletMetadata'
        content:
          description: The detailed information of the transaction; structure depends on the type of transaction
          oneOf:
          - $ref: '#/components/schemas/AnalyticIssueWalletTx'
          - $ref: '#/components/schemas/AnalyticTransferWalletTx'
          - $ref: '#/components/schemas/AnalyticRuleWalletTx'
      type: object
    AnalyticWalletMetadata:
      example:
        tx_hash: tx_hash
        timestamp: timestamp
      properties:
        type:
          $ref: '#/components/schemas/AnalyticsTxType'
        tx_hash:
          description: The QEDIT-generated hash of the transaction
          type: string
        timestamp:
          description: UTC time of creation of the time the Block containing the transaction was created in RFC-3339 format
          type: string
      type: object
    AnalyticIssueWalletTx:
      properties:
        is_incoming:
          description: Boolean signifying whether the Assets were issued to the Wallet in question
          type: boolean
        issued_by_self:
          description: Boolean signifying whether the Wallet used to issue the Assets is the Wallet in question
          type: boolean
        sender_id:
          description: The public key of the Wallet that was used to issue the Assets
          type: string
        recipient_address:
          description: The Address the Assets were issued to
          type: string
        asset_id:
          description: |
            The ID of an Asset Type. It must be a string of length 0 to 40 characters. Allowed characters are lower- and uppercase letters, digits, dot (.), and hyphen (-). It must not end with an hyphen. Asset IDs are case-sensitive.
          type: string
        amount:
          description: The amount of Assets issued
          format: int32
          type: integer
        is_confidential:
          description: Boolean signifying whether the Issuance was done confidentially
          type: boolean
        memo:
          description: The private memo attached to the Issuance
          type: string
      type: object
    AnalyticTransferWalletTx:
      properties:
        is_incoming:
          description: Boolean signifying whether the Assets were transferred to the Wallet in question; false of the Assets were transferred from the Wallet into another
          type: boolean
        sender_id:
          description: The public key of the Wallet the Assets were transferred from
          type: string
        recipient_address:
          description: The address of the Wallet the Assets were transferred to
          type: string
        confirmed_by:
          description: The public key of the Wallet that confirmed receipt of this transfer
          type: string
        asset_id:
          description: |
            The ID of an Asset Type. It must be a string of length 0 to 40 characters. Allowed characters are lower- and uppercase letters, digits, dot (.), and hyphen (-). It must not end with an hyphen. Asset IDs are case-sensitive.
          type: string
        amount:
          description: The amount of Assets transferred
          format: int32
          type: integer
        memo:
          description: The private memo attached to the Transfer
          type: string
      type: object
    AnalyticRuleWalletTx:
      properties:
        signed_by_self:
          description: Boolean signifying whether the Rule was created by the Wallet in question
          type: boolean
        rule_affect_self:
          description: Boolean signifying whether the Rule granted permissions to the Wallet in question
          type: boolean
        tx_signer:
          description: The public key of the Wallet that was used to create the Rule
          type: string
        rule:
          $ref: '#/components/schemas/AnalyticsRuleWalletDefinition'
      type: object
    CreateGroupRequest:
      example:
        wallet_id: wallet_id
        memo: memo
      properties:
        wallet_id:
          description: The Node-specific identifier of the Wallet that owns the new Group
          type: string
        memo:
          description: Memo to be used by the application to define the purpose of the group. Defaults to an empty string.
          type: string
      required:
      - wallet_id
      type: object
    CreateGroupResponse:
      example:
        group_id: group_id
      properties:
        group_id:
          description: The globally unique identifier of the Group
          type: string
      required:
      - group_id
      type: object
    AddToGroupRequest:
      example:
        wallet_id: wallet_id
        group_id: group_id
        memo: memo
        recipient_address: recipient_address
        read_permission: true
      properties:
        wallet_id:
          description: The Node-specific identifier of the Wallet that is sharing the credentials for the Group
          type: string
        group_id:
          description: The unique identifier of the Group whose credentials will be shared
          type: string
        read_permission:
          description: Boolean that should be set to true if and only if read permission should be shared. Note that write permission is always shared and there's no option for read-only permission. Defaults to false.
          type: boolean
        memo:
          description: Memo to be used by the application to define the purpose of the group and why its credentials were shared. Should include information about who is sharing the group if this information is relevant. Defaults to an empty string
          type: string
        recipient_address:
          description: An Address of the Wallet with which the Group credentials should be shared
          type: string
      required:
      - group_id
      - recipient_address
      - wallet_id
      type: object
    AddToGroupResponse:
      type: object
    LeaveGroupRequest:
      example:
        wallet_id: wallet_id
        group_id: group_id
      properties:
        wallet_id:
          description: The Node-specific identifier of the Wallet that is to leave the Group
          type: string
        group_id:
          description: The unique identifier of the Group which is being left
          type: string
      required:
      - group_id
      - wallet_id
      type: object
    LeaveGroupResponse:
      type: object
    GetGroupsRequest:
      example:
        wallet_id: wallet_id
        start_index: 0
        number_of_results: 6
      properties:
        wallet_id:
          description: The Node-specific identifier of the Wallet that is to leave the Group
          type: string
        start_index:
          description: An offset used to paginate through the available groups; indexing is 0-based; defaults to 0
          format: int32
          type: integer
        number_of_results:
          description: Maximal number of results to fetch in this call; defaults to 100
          format: int32
          type: integer
      required:
      - wallet_id
      type: object
    GetGroupsResponse:
      example:
        groups:
        - joined_at: 2000-01-23
          group_id: group_id
          memo: memo
          read_permission: true
        - joined_at: 2000-01-23
          group_id: group_id
          memo: memo
          read_permission: true
      properties:
        groups:
          description: List of Groups available, ordered by time joined (ascending)
          items:
            $ref: '#/components/schemas/GroupInformation'
          type: array
      required:
      - groups
      type: object
    GroupInformation:
      example:
        joined_at: 2000-01-23
        group_id: group_id
        memo: memo
        read_permission: true
      properties:
        group_id:
          description: The unique identifier of the Group
          type: string
        joined_at:
          description: Timestamp of when the Group credentials were shared with the Wallet. The timestamp is in RFC-3339 format.
          format: date
          type: string
        read_permission:
          description: Boolean set to true if and only if read permission for the given Group was shared with the given Wallet. Note that write access is always shared.
          type: boolean
        memo:
          description: The memo used by the application that first shared this Group with the given Wallet when calling `add_to_group`.
          type: string
      required:
      - group_id
      - joined_at
      - memo
      - read_permission
      type: object
    UploadAttachmentRequest:
      example:
        authorization: authorization
        wallet_id: wallet_id
        group_id: group_id
        body:
          content_type: content_type
          name: name
          content: content
      properties:
        wallet_id:
          description: The Node-specific identifier of the Wallet whose credentials should be used to upload the Attachment
          type: string
        authorization:
          description: The authorization password for the Wallet
          type: string
        group_id:
          description: The globally-unique ID of the Group the Attachment should be shared with
          type: string
        body:
          $ref: '#/components/schemas/AttachmentBody'
      required:
      - authorization
      - body
      - group_id
      - wallet_id
      type: object
    AttachmentBody:
      description: The payload of the Attachment
      example:
        content_type: content_type
        name: name
        content: content
      properties:
        name:
          description: A name used by the caller of the API to describe the Attachment; does not have to be unique; should not be relied upon to uniquely identify the Attachment; defaults to the empty string ("")
          type: string
        content_type:
          description: The media type (a.k.a. MIME type) of the content; defaults to 'application/x-binary'
          type: string
        content:
          description: The representation of the Attachment in standard base64 encoding without padding (see RFC-4648)
          format: bytes
          type: string
      required:
      - content
      type: object
    UploadAttachmentResponse:
      example:
        attachment_id: attachment_id
      properties:
        attachment_id:
          description: The globally-unique ID of the Attachment; used to reference the Attachment and to download it; should be stored by the App for future reference\
          type: string
      required:
      - attachment_id
      type: object
    DownloadAttachmentRequest:
      example:
        wallet_id: wallet_id
        attachment_id: attachment_id
      properties:
        wallet_id:
          description: The Node-specific identifier of the Wallet whose credentials should be used to download the Attachment
          type: string
        attachment_id:
          description: The globally-unique ID of the Attachment to be downloaded
          type: string
      required:
      - attachment_id
      - wallet_id
      type: object
    DownloadAttachmentResponse:
      $ref: '#/components/schemas/AttachmentBody'
    ListAttachmentsRequest:
      example:
        wallet_id: wallet_id
        asset_ids:
        - asset_ids
        - asset_ids
        tx_hashes:
        - tx_hashes
        - tx_hashes
        start_index: 0
        number_of_results: 6
      properties:
        wallet_id:
          description: The Node-specific identifier of the Wallet whose credentials should be used to list Attachments
          type: string
        start_index:
          description: An offset used to paginate through the Attachment list; indexing is 0-based; defaults to 0
          format: int32
          type: integer
        number_of_results:
          description: Maximal number of results to fetch in this call; defaults to 100
          format: int32
          type: integer
        asset_ids:
          description: An optional list of Asset IDs; if present and not empty, only Attachments attached to Assets of one or more of the given Asset IDs will be returned; note that only Attachments attached to Assets owned or previously-owned by the given Wallet will be returned
          items:
            type: string
          type: array
        tx_hashes:
          description: An optional list of Transaction hashes; if present and not empty, only Attachments attached to Assets transferred or created in the referenced Transations will be returned; note that only Attachments from Transactions that are visible to the given Wallet will be returned
          items:
            type: string
          type: array
      required:
      - wallet_id
      type: object
    ListAttachmentsResponse:
      example:
        attachments:
        - content_type: content_type
          uploaded_at: 2000-01-23
          content_length_bytes: 0
          attachment_id: attachment_id
          name: name
          tx_hash: tx_hash
          asset_id: asset_id
        - content_type: content_type
          uploaded_at: 2000-01-23
          content_length_bytes: 0
          attachment_id: attachment_id
          name: name
          tx_hash: tx_hash
          asset_id: asset_id
      properties:
        attachments:
          description: A list of the Attachments available for download after applying the requested filters
          items:
            $ref: '#/components/schemas/AttachmentHeader'
          type: array
      required:
      - attachments
      type: object
    AttachmentHeader:
      description: The metadata of a single Attachment, without the potentially long content
      example:
        content_type: content_type
        uploaded_at: 2000-01-23
        content_length_bytes: 0
        attachment_id: attachment_id
        name: name
        tx_hash: tx_hash
        asset_id: asset_id
      properties:
        attachment_id:
          description: The globally-unique ID of the Attachment; can be used as a reference for downloading it
          type: string
        name:
          description: A name used by the uploader to describe the Attachment; does not have to be unique; should not be relied upon to uniquely identify the Attachment
          type: string
        content_type:
          description: The media type (a.k.a. MIME type) of the content as specifies by the uploader of the Attachment
          type: string
        tx_hash:
          description: The transaction hash for the transaction the Attachment was attached in. Set to empty string if the Wallet is unaware of the particular transaction in which the Attachment was attached to the Asset.
          type: string
        asset_id:
          description: The asset ID transferred in the transaction to which this Attachment was attached.
          type: string
        uploaded_at:
          description: The time the Attachment was uploaded at, in RFC-3339 format
          format: date
          type: string
        content_length_bytes:
          description: The length in bytes of the raw content of the Attachment
          format: int64
          minimum: 0
          type: integer
      required:
      - attachment_id
      - content_type
      - name
      type: object
    HealthcheckResponse:
      example:
        version: 1.7.0
        blockchain_connector:
          error: 'Post http://localhost:8082/connector/get_block: dial tcp 127.0.0.1:8082:connect:
            connection refused'
          passing: false
        database:
          error: ""
          passing: true
        mq:
          error: ""
          passing: true
        passing: false
      properties:
        version:
          description: API version of the Node
          type: string
        blockchain_connector:
          $ref: '#/components/schemas/HealthcheckResponseItem'
        message_queue:
          $ref: '#/components/schemas/HealthcheckResponseItem'
        database:
          $ref: '#/components/schemas/HealthcheckResponseItem'
        passing:
          description: Boolean signifying whether the endpoint is ready for calls
          type: boolean
      type: object
    HealthcheckResponseItem:
      properties:
        passing:
          description: Boolean signifying whether the component is healthy
          type: boolean
        error:
          description: Error string describing the component's problem; empty if the component is healthy
          type: string
      type: object
  securitySchemes:
    ApiKeyAuth:
      in: header
      name: x-auth-token
      type: apiKey
