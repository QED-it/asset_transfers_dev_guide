# coding: utf-8

"""
    QEDIT - Asset Transfers

    This SDK provides a programmatic way for interacting with QEDIT's _Asset Transfer_ API. The specification definition file is publicly available [in this repository](https://github.com/QED-it/asset_transfers_dev_guide/).   # noqa: E501

    OpenAPI spec version: 1.7.0
    Contact: dev@qed-it.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from pyqedit.api_client import ApiClient


class WalletApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def wallet_create_rule_post(self, create_rule_request, **kwargs):  # noqa: E501
        """Create a new Rule in the network [async call]  # noqa: E501

        Create new Rules that can either create a new admin, a new issuer, or both; The Rules are created by a Wallet that needs to have admin rights; The Rules grant rights to other Wallets through the Wallets' public keys.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.wallet_create_rule_post(create_rule_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateRuleRequest create_rule_request: (required)
        :return: AsyncTaskCreatedResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.wallet_create_rule_post_with_http_info(create_rule_request, **kwargs)  # noqa: E501
        else:
            (data) = self.wallet_create_rule_post_with_http_info(create_rule_request, **kwargs)  # noqa: E501
            return data

    def wallet_create_rule_post_with_http_info(self, create_rule_request, **kwargs):  # noqa: E501
        """Create a new Rule in the network [async call]  # noqa: E501

        Create new Rules that can either create a new admin, a new issuer, or both; The Rules are created by a Wallet that needs to have admin rights; The Rules grant rights to other Wallets through the Wallets' public keys.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.wallet_create_rule_post_with_http_info(create_rule_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateRuleRequest create_rule_request: (required)
        :return: AsyncTaskCreatedResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['create_rule_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method wallet_create_rule_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'create_rule_request' is set
        if ('create_rule_request' not in local_var_params or
                local_var_params['create_rule_request'] is None):
            raise ValueError("Missing the required parameter `create_rule_request` when calling `wallet_create_rule_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'create_rule_request' in local_var_params:
            body_params = local_var_params['create_rule_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/wallet/create_rule', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AsyncTaskCreatedResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def wallet_delete_rule_post(self, delete_rule_request, **kwargs):  # noqa: E501
        """Delete an existing Rule from the network [async call]  # noqa: E501

        Delete an existing Rule from the network; The Rule is deleted by a Wallet which needs to have admin rights.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.wallet_delete_rule_post(delete_rule_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DeleteRuleRequest delete_rule_request: (required)
        :return: AsyncTaskCreatedResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.wallet_delete_rule_post_with_http_info(delete_rule_request, **kwargs)  # noqa: E501
        else:
            (data) = self.wallet_delete_rule_post_with_http_info(delete_rule_request, **kwargs)  # noqa: E501
            return data

    def wallet_delete_rule_post_with_http_info(self, delete_rule_request, **kwargs):  # noqa: E501
        """Delete an existing Rule from the network [async call]  # noqa: E501

        Delete an existing Rule from the network; The Rule is deleted by a Wallet which needs to have admin rights.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.wallet_delete_rule_post_with_http_info(delete_rule_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DeleteRuleRequest delete_rule_request: (required)
        :return: AsyncTaskCreatedResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['delete_rule_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method wallet_delete_rule_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'delete_rule_request' is set
        if ('delete_rule_request' not in local_var_params or
                local_var_params['delete_rule_request'] is None):
            raise ValueError("Missing the required parameter `delete_rule_request` when calling `wallet_delete_rule_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'delete_rule_request' in local_var_params:
            body_params = local_var_params['delete_rule_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/wallet/delete_rule', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AsyncTaskCreatedResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def wallet_get_activity_post(self, get_wallet_activity_request, **kwargs):  # noqa: E501
        """Get wallet activity (transactions)  # noqa: E501

        List transactions that were created by a specifed Wallet or that affected that Wallet; All known details of each such transaction will be returned.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.wallet_get_activity_post(get_wallet_activity_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GetWalletActivityRequest get_wallet_activity_request: (required)
        :return: GetWalletActivityResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.wallet_get_activity_post_with_http_info(get_wallet_activity_request, **kwargs)  # noqa: E501
        else:
            (data) = self.wallet_get_activity_post_with_http_info(get_wallet_activity_request, **kwargs)  # noqa: E501
            return data

    def wallet_get_activity_post_with_http_info(self, get_wallet_activity_request, **kwargs):  # noqa: E501
        """Get wallet activity (transactions)  # noqa: E501

        List transactions that were created by a specifed Wallet or that affected that Wallet; All known details of each such transaction will be returned.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.wallet_get_activity_post_with_http_info(get_wallet_activity_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GetWalletActivityRequest get_wallet_activity_request: (required)
        :return: GetWalletActivityResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['get_wallet_activity_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method wallet_get_activity_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'get_wallet_activity_request' is set
        if ('get_wallet_activity_request' not in local_var_params or
                local_var_params['get_wallet_activity_request'] is None):
            raise ValueError("Missing the required parameter `get_wallet_activity_request` when calling `wallet_get_activity_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'get_wallet_activity_request' in local_var_params:
            body_params = local_var_params['get_wallet_activity_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/wallet/get_activity', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetWalletActivityResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def wallet_get_balances_post(self, get_wallet_balance_request, **kwargs):  # noqa: E501
        """Get wallets balances  # noqa: E501

        Get a list of the Asset Types held within a given Wallet and the amount of each type held.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.wallet_get_balances_post(get_wallet_balance_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GetWalletBalanceRequest get_wallet_balance_request: (required)
        :return: GetWalletBalanceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.wallet_get_balances_post_with_http_info(get_wallet_balance_request, **kwargs)  # noqa: E501
        else:
            (data) = self.wallet_get_balances_post_with_http_info(get_wallet_balance_request, **kwargs)  # noqa: E501
            return data

    def wallet_get_balances_post_with_http_info(self, get_wallet_balance_request, **kwargs):  # noqa: E501
        """Get wallets balances  # noqa: E501

        Get a list of the Asset Types held within a given Wallet and the amount of each type held.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.wallet_get_balances_post_with_http_info(get_wallet_balance_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GetWalletBalanceRequest get_wallet_balance_request: (required)
        :return: GetWalletBalanceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['get_wallet_balance_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method wallet_get_balances_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'get_wallet_balance_request' is set
        if ('get_wallet_balance_request' not in local_var_params or
                local_var_params['get_wallet_balance_request'] is None):
            raise ValueError("Missing the required parameter `get_wallet_balance_request` when calling `wallet_get_balances_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'get_wallet_balance_request' in local_var_params:
            body_params = local_var_params['get_wallet_balance_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/wallet/get_balances', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetWalletBalanceResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def wallet_get_new_address_post(self, get_new_address_request, **kwargs):  # noqa: E501
        """Get a new address from a given diversifier or generate randomly  # noqa: E501

        Generate an Address for the Wallet; the address can be used by other Wallet owners to issue or transfer Assets into said Wallet; If a diversifier is provided, then the generated address is deterministically generated from the diversifier; If the diversifier is omitted, then a random diversifier is used and the resulting Address will be random; in both cases the Address cannot be linked to the Wallet by parties that do not have access to the Wallet. All generated Addresses of a Wallet are always valid and cannot be invalidated.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.wallet_get_new_address_post(get_new_address_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GetNewAddressRequest get_new_address_request: (required)
        :return: GetNewAddressResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.wallet_get_new_address_post_with_http_info(get_new_address_request, **kwargs)  # noqa: E501
        else:
            (data) = self.wallet_get_new_address_post_with_http_info(get_new_address_request, **kwargs)  # noqa: E501
            return data

    def wallet_get_new_address_post_with_http_info(self, get_new_address_request, **kwargs):  # noqa: E501
        """Get a new address from a given diversifier or generate randomly  # noqa: E501

        Generate an Address for the Wallet; the address can be used by other Wallet owners to issue or transfer Assets into said Wallet; If a diversifier is provided, then the generated address is deterministically generated from the diversifier; If the diversifier is omitted, then a random diversifier is used and the resulting Address will be random; in both cases the Address cannot be linked to the Wallet by parties that do not have access to the Wallet. All generated Addresses of a Wallet are always valid and cannot be invalidated.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.wallet_get_new_address_post_with_http_info(get_new_address_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GetNewAddressRequest get_new_address_request: (required)
        :return: GetNewAddressResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['get_new_address_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method wallet_get_new_address_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'get_new_address_request' is set
        if ('get_new_address_request' not in local_var_params or
                local_var_params['get_new_address_request'] is None):
            raise ValueError("Missing the required parameter `get_new_address_request` when calling `wallet_get_new_address_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'get_new_address_request' in local_var_params:
            body_params = local_var_params['get_new_address_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/wallet/get_new_address', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetNewAddressResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def wallet_get_public_key_post(self, get_public_key_request, **kwargs):  # noqa: E501
        """Get wallet public key  # noqa: E501

        Get the unique public key of the Wallet; This key is unique across the entire network and is used to identify the Wallet.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.wallet_get_public_key_post(get_public_key_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GetPublicKeyRequest get_public_key_request: (required)
        :return: GetPublicKeyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.wallet_get_public_key_post_with_http_info(get_public_key_request, **kwargs)  # noqa: E501
        else:
            (data) = self.wallet_get_public_key_post_with_http_info(get_public_key_request, **kwargs)  # noqa: E501
            return data

    def wallet_get_public_key_post_with_http_info(self, get_public_key_request, **kwargs):  # noqa: E501
        """Get wallet public key  # noqa: E501

        Get the unique public key of the Wallet; This key is unique across the entire network and is used to identify the Wallet.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.wallet_get_public_key_post_with_http_info(get_public_key_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GetPublicKeyRequest get_public_key_request: (required)
        :return: GetPublicKeyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['get_public_key_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method wallet_get_public_key_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'get_public_key_request' is set
        if ('get_public_key_request' not in local_var_params or
                local_var_params['get_public_key_request'] is None):
            raise ValueError("Missing the required parameter `get_public_key_request` when calling `wallet_get_public_key_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'get_public_key_request' in local_var_params:
            body_params = local_var_params['get_public_key_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/wallet/get_public_key', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetPublicKeyResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def wallet_issue_asset_post(self, issue_asset_request, **kwargs):  # noqa: E501
        """Issue assets [async call]  # noqa: E501

        Issue Assets from a Wallet to a recipient Address; The issuing Wallet is required to have matching issuance rights (in the form of a matching Rule); Issuance can be done either confidentially or in public; In order to issue confidentially, the matching Rule must explicitly allow this.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.wallet_issue_asset_post(issue_asset_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IssueAssetRequest issue_asset_request: (required)
        :return: AsyncTaskCreatedResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.wallet_issue_asset_post_with_http_info(issue_asset_request, **kwargs)  # noqa: E501
        else:
            (data) = self.wallet_issue_asset_post_with_http_info(issue_asset_request, **kwargs)  # noqa: E501
            return data

    def wallet_issue_asset_post_with_http_info(self, issue_asset_request, **kwargs):  # noqa: E501
        """Issue assets [async call]  # noqa: E501

        Issue Assets from a Wallet to a recipient Address; The issuing Wallet is required to have matching issuance rights (in the form of a matching Rule); Issuance can be done either confidentially or in public; In order to issue confidentially, the matching Rule must explicitly allow this.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.wallet_issue_asset_post_with_http_info(issue_asset_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IssueAssetRequest issue_asset_request: (required)
        :return: AsyncTaskCreatedResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['issue_asset_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method wallet_issue_asset_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'issue_asset_request' is set
        if ('issue_asset_request' not in local_var_params or
                local_var_params['issue_asset_request'] is None):
            raise ValueError("Missing the required parameter `issue_asset_request` when calling `wallet_issue_asset_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'issue_asset_request' in local_var_params:
            body_params = local_var_params['issue_asset_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/wallet/issue_asset', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AsyncTaskCreatedResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def wallet_share_viewing_permission_post(self, share_wallet_viewing_permission_request, **kwargs):  # noqa: E501
        """Share the viewing credentials for a given Wallet  # noqa: E501

        Share a viewing key that allows viewing all transactions to and from a wallet, including past transactions. The key is shared via p2p messenger directly to the recipient, and is encrypted specifically for the intended recipient address. Upon arrival, the wallet is automatically added to the recipient's node. The viewing key does not enable making any transactions (including rule changes, issuance, and transfers) on behalf of the exported Wallet.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.wallet_share_viewing_permission_post(share_wallet_viewing_permission_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ShareWalletViewingPermissionRequest share_wallet_viewing_permission_request: (required)
        :return: ShareWalletViewingPermissionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.wallet_share_viewing_permission_post_with_http_info(share_wallet_viewing_permission_request, **kwargs)  # noqa: E501
        else:
            (data) = self.wallet_share_viewing_permission_post_with_http_info(share_wallet_viewing_permission_request, **kwargs)  # noqa: E501
            return data

    def wallet_share_viewing_permission_post_with_http_info(self, share_wallet_viewing_permission_request, **kwargs):  # noqa: E501
        """Share the viewing credentials for a given Wallet  # noqa: E501

        Share a viewing key that allows viewing all transactions to and from a wallet, including past transactions. The key is shared via p2p messenger directly to the recipient, and is encrypted specifically for the intended recipient address. Upon arrival, the wallet is automatically added to the recipient's node. The viewing key does not enable making any transactions (including rule changes, issuance, and transfers) on behalf of the exported Wallet.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.wallet_share_viewing_permission_post_with_http_info(share_wallet_viewing_permission_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ShareWalletViewingPermissionRequest share_wallet_viewing_permission_request: (required)
        :return: ShareWalletViewingPermissionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['share_wallet_viewing_permission_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method wallet_share_viewing_permission_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'share_wallet_viewing_permission_request' is set
        if ('share_wallet_viewing_permission_request' not in local_var_params or
                local_var_params['share_wallet_viewing_permission_request'] is None):
            raise ValueError("Missing the required parameter `share_wallet_viewing_permission_request` when calling `wallet_share_viewing_permission_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'share_wallet_viewing_permission_request' in local_var_params:
            body_params = local_var_params['share_wallet_viewing_permission_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/wallet/share_viewing_permission', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ShareWalletViewingPermissionResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def wallet_transfer_asset_post(self, transfer_asset_request, **kwargs):  # noqa: E501
        """Transfer assets [async call]  # noqa: E501

        Transfer a specified amount of a specified Asset Type from a specified Wallet to a specified Address; Transfers are always completely confidential.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.wallet_transfer_asset_post(transfer_asset_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TransferAssetRequest transfer_asset_request: (required)
        :return: AsyncTaskCreatedResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.wallet_transfer_asset_post_with_http_info(transfer_asset_request, **kwargs)  # noqa: E501
        else:
            (data) = self.wallet_transfer_asset_post_with_http_info(transfer_asset_request, **kwargs)  # noqa: E501
            return data

    def wallet_transfer_asset_post_with_http_info(self, transfer_asset_request, **kwargs):  # noqa: E501
        """Transfer assets [async call]  # noqa: E501

        Transfer a specified amount of a specified Asset Type from a specified Wallet to a specified Address; Transfers are always completely confidential.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.wallet_transfer_asset_post_with_http_info(transfer_asset_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TransferAssetRequest transfer_asset_request: (required)
        :return: AsyncTaskCreatedResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['transfer_asset_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method wallet_transfer_asset_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'transfer_asset_request' is set
        if ('transfer_asset_request' not in local_var_params or
                local_var_params['transfer_asset_request'] is None):
            raise ValueError("Missing the required parameter `transfer_asset_request` when calling `wallet_transfer_asset_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'transfer_asset_request' in local_var_params:
            body_params = local_var_params['transfer_asset_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/wallet/transfer_asset', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AsyncTaskCreatedResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
