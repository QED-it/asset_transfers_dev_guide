# coding: utf-8

"""
    QEDIT - Asset Transfers

    This SDK provides a programmatic way for interacting with QEDIT's _Asset Transfer_ API. The specification definition file is publicly available [in this repository](https://github.com/QED-it/asset_transfers_dev_guide/).   # noqa: E501

    OpenAPI spec version: 1.7.2
    Contact: dev@qed-it.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from pyqedit.api_client import ApiClient


class AttachmentApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def attachment_add_to_group_post(self, add_to_group_request, **kwargs):  # noqa: E501
        """Add a new member to a group  # noqa: E501

        Shares with another Wallet the credentials required to either write or both read and write to a Group another Wallet. The Group will be automatically added to any Nodes that have the recipient Wallet stored within them, including Nodes that have viewing-only access to said Wallet.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.attachment_add_to_group_post(add_to_group_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AddToGroupRequest add_to_group_request: (required)
        :return: AddToGroupResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.attachment_add_to_group_post_with_http_info(add_to_group_request, **kwargs)  # noqa: E501
        else:
            (data) = self.attachment_add_to_group_post_with_http_info(add_to_group_request, **kwargs)  # noqa: E501
            return data

    def attachment_add_to_group_post_with_http_info(self, add_to_group_request, **kwargs):  # noqa: E501
        """Add a new member to a group  # noqa: E501

        Shares with another Wallet the credentials required to either write or both read and write to a Group another Wallet. The Group will be automatically added to any Nodes that have the recipient Wallet stored within them, including Nodes that have viewing-only access to said Wallet.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.attachment_add_to_group_post_with_http_info(add_to_group_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AddToGroupRequest add_to_group_request: (required)
        :return: AddToGroupResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['add_to_group_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method attachment_add_to_group_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'add_to_group_request' is set
        if ('add_to_group_request' not in local_var_params or
                local_var_params['add_to_group_request'] is None):
            raise ValueError("Missing the required parameter `add_to_group_request` when calling `attachment_add_to_group_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'add_to_group_request' in local_var_params:
            body_params = local_var_params['add_to_group_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/attachment/add_to_group', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AddToGroupResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def attachment_create_group_post(self, create_group_request, **kwargs):  # noqa: E501
        """Create a new group  # noqa: E501

        Groups are cryptographically-secure permission-sets which allow their members to either write or read/write to the Group (there's no read-only permission). When creating a new Group, a new secret is created which can be used to encrypt Attachments. Attachments can be stored (in encrypted form) in Groups, and Group permissions can be shared with other Wallets.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.attachment_create_group_post(create_group_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateGroupRequest create_group_request: (required)
        :return: CreateGroupResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.attachment_create_group_post_with_http_info(create_group_request, **kwargs)  # noqa: E501
        else:
            (data) = self.attachment_create_group_post_with_http_info(create_group_request, **kwargs)  # noqa: E501
            return data

    def attachment_create_group_post_with_http_info(self, create_group_request, **kwargs):  # noqa: E501
        """Create a new group  # noqa: E501

        Groups are cryptographically-secure permission-sets which allow their members to either write or read/write to the Group (there's no read-only permission). When creating a new Group, a new secret is created which can be used to encrypt Attachments. Attachments can be stored (in encrypted form) in Groups, and Group permissions can be shared with other Wallets.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.attachment_create_group_post_with_http_info(create_group_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateGroupRequest create_group_request: (required)
        :return: CreateGroupResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['create_group_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method attachment_create_group_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'create_group_request' is set
        if ('create_group_request' not in local_var_params or
                local_var_params['create_group_request'] is None):
            raise ValueError("Missing the required parameter `create_group_request` when calling `attachment_create_group_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'create_group_request' in local_var_params:
            body_params = local_var_params['create_group_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/attachment/create_group', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreateGroupResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def attachment_download_post(self, download_attachment_request, **kwargs):  # noqa: E501
        """Download an Attachment  # noqa: E501

        Downloads and decrypts an Attachment given an Attachment ID, and assuming it exists and a Wallet with proper credentials for the relevant Group is used  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.attachment_download_post(download_attachment_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DownloadAttachmentRequest download_attachment_request: (required)
        :return: AttachmentBody
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.attachment_download_post_with_http_info(download_attachment_request, **kwargs)  # noqa: E501
        else:
            (data) = self.attachment_download_post_with_http_info(download_attachment_request, **kwargs)  # noqa: E501
            return data

    def attachment_download_post_with_http_info(self, download_attachment_request, **kwargs):  # noqa: E501
        """Download an Attachment  # noqa: E501

        Downloads and decrypts an Attachment given an Attachment ID, and assuming it exists and a Wallet with proper credentials for the relevant Group is used  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.attachment_download_post_with_http_info(download_attachment_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DownloadAttachmentRequest download_attachment_request: (required)
        :return: AttachmentBody
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['download_attachment_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method attachment_download_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'download_attachment_request' is set
        if ('download_attachment_request' not in local_var_params or
                local_var_params['download_attachment_request'] is None):
            raise ValueError("Missing the required parameter `download_attachment_request` when calling `attachment_download_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'download_attachment_request' in local_var_params:
            body_params = local_var_params['download_attachment_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/attachment/download', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AttachmentBody',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def attachment_get_groups_post(self, get_groups_request, **kwargs):  # noqa: E501
        """List the Groups the Wallet has access to  # noqa: E501

        Returns the full list of Groups the Wallet has credentials for (both write-only and read/write).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.attachment_get_groups_post(get_groups_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GetGroupsRequest get_groups_request: (required)
        :return: GetGroupsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.attachment_get_groups_post_with_http_info(get_groups_request, **kwargs)  # noqa: E501
        else:
            (data) = self.attachment_get_groups_post_with_http_info(get_groups_request, **kwargs)  # noqa: E501
            return data

    def attachment_get_groups_post_with_http_info(self, get_groups_request, **kwargs):  # noqa: E501
        """List the Groups the Wallet has access to  # noqa: E501

        Returns the full list of Groups the Wallet has credentials for (both write-only and read/write).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.attachment_get_groups_post_with_http_info(get_groups_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GetGroupsRequest get_groups_request: (required)
        :return: GetGroupsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['get_groups_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method attachment_get_groups_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'get_groups_request' is set
        if ('get_groups_request' not in local_var_params or
                local_var_params['get_groups_request'] is None):
            raise ValueError("Missing the required parameter `get_groups_request` when calling `attachment_get_groups_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'get_groups_request' in local_var_params:
            body_params = local_var_params['get_groups_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/attachment/get_groups', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetGroupsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def attachment_leave_group_post(self, leave_group_request, **kwargs):  # noqa: E501
        """Removes an owned Wallet from a Group  # noqa: E501

        Deletes any credentials and messages that relate to the given Group and are owned by the given Wallet. Does not affect other Wallets in the same Node. Only owners of Wallets can remove their own Wallets from any given Group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.attachment_leave_group_post(leave_group_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LeaveGroupRequest leave_group_request: (required)
        :return: LeaveGroupResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.attachment_leave_group_post_with_http_info(leave_group_request, **kwargs)  # noqa: E501
        else:
            (data) = self.attachment_leave_group_post_with_http_info(leave_group_request, **kwargs)  # noqa: E501
            return data

    def attachment_leave_group_post_with_http_info(self, leave_group_request, **kwargs):  # noqa: E501
        """Removes an owned Wallet from a Group  # noqa: E501

        Deletes any credentials and messages that relate to the given Group and are owned by the given Wallet. Does not affect other Wallets in the same Node. Only owners of Wallets can remove their own Wallets from any given Group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.attachment_leave_group_post_with_http_info(leave_group_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LeaveGroupRequest leave_group_request: (required)
        :return: LeaveGroupResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['leave_group_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method attachment_leave_group_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'leave_group_request' is set
        if ('leave_group_request' not in local_var_params or
                local_var_params['leave_group_request'] is None):
            raise ValueError("Missing the required parameter `leave_group_request` when calling `attachment_leave_group_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'leave_group_request' in local_var_params:
            body_params = local_var_params['leave_group_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/attachment/leave_group', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LeaveGroupResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def attachment_list_post(self, list_attachments_request, **kwargs):  # noqa: E501
        """Lists available Attachments  # noqa: E501

        Lists the Attachments available for download for a given Wallet, and filtered by further arguments. Note that Attachments must be filtered by exactly one of th e optional filters (transaction hashes or asset IDs).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.attachment_list_post(list_attachments_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ListAttachmentsRequest list_attachments_request: (required)
        :return: ListAttachmentsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.attachment_list_post_with_http_info(list_attachments_request, **kwargs)  # noqa: E501
        else:
            (data) = self.attachment_list_post_with_http_info(list_attachments_request, **kwargs)  # noqa: E501
            return data

    def attachment_list_post_with_http_info(self, list_attachments_request, **kwargs):  # noqa: E501
        """Lists available Attachments  # noqa: E501

        Lists the Attachments available for download for a given Wallet, and filtered by further arguments. Note that Attachments must be filtered by exactly one of th e optional filters (transaction hashes or asset IDs).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.attachment_list_post_with_http_info(list_attachments_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ListAttachmentsRequest list_attachments_request: (required)
        :return: ListAttachmentsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['list_attachments_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method attachment_list_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'list_attachments_request' is set
        if ('list_attachments_request' not in local_var_params or
                local_var_params['list_attachments_request'] is None):
            raise ValueError("Missing the required parameter `list_attachments_request` when calling `attachment_list_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'list_attachments_request' in local_var_params:
            body_params = local_var_params['list_attachments_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/attachment/list', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ListAttachmentsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def attachment_upload_post(self, upload_attachment_request, **kwargs):  # noqa: E501
        """Upload an Attachment and share it with a Group  # noqa: E501

        Encrypts and uploads an Attachment so that it becomes shared with a given Group. Returns a globally-unique identifier for the Attachment to be used in subsequent API calls.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.attachment_upload_post(upload_attachment_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UploadAttachmentRequest upload_attachment_request: (required)
        :return: UploadAttachmentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.attachment_upload_post_with_http_info(upload_attachment_request, **kwargs)  # noqa: E501
        else:
            (data) = self.attachment_upload_post_with_http_info(upload_attachment_request, **kwargs)  # noqa: E501
            return data

    def attachment_upload_post_with_http_info(self, upload_attachment_request, **kwargs):  # noqa: E501
        """Upload an Attachment and share it with a Group  # noqa: E501

        Encrypts and uploads an Attachment so that it becomes shared with a given Group. Returns a globally-unique identifier for the Attachment to be used in subsequent API calls.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.attachment_upload_post_with_http_info(upload_attachment_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UploadAttachmentRequest upload_attachment_request: (required)
        :return: UploadAttachmentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['upload_attachment_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method attachment_upload_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'upload_attachment_request' is set
        if ('upload_attachment_request' not in local_var_params or
                local_var_params['upload_attachment_request'] is None):
            raise ValueError("Missing the required parameter `upload_attachment_request` when calling `attachment_upload_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'upload_attachment_request' in local_var_params:
            body_params = local_var_params['upload_attachment_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/attachment/upload', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UploadAttachmentResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
