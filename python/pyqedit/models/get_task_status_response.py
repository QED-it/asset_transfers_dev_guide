# coding: utf-8

"""
    QEDIT - Asset Transfers

    This SDK provides a programmatic way for interacting with QEDIT's _Asset Transfer_ API. The specification definition file is publicly available [in this repository](https://github.com/QED-it/asset_transfers_dev_guide/).   # noqa: E501

    OpenAPI spec version: 1.7.0
    Contact: dev@qed-it.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class GetTaskStatusResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'created_at': 'date',
        'updated_at': 'date',
        'result': 'Result',
        'state': 'TaskState',
        'tx_hash': 'str',
        'qedit_tx_hash': 'str',
        'type': 'TaskType',
        'data': 'TaskData',
        'error': 'str'
    }

    attribute_map = {
        'id': 'id',
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'result': 'result',
        'state': 'state',
        'tx_hash': 'tx_hash',
        'qedit_tx_hash': 'qedit_tx_hash',
        'type': 'type',
        'data': 'data',
        'error': 'error'
    }

    def __init__(self, id=None, created_at=None, updated_at=None, result=None, state=None, tx_hash=None, qedit_tx_hash=None, type=None, data=None, error=None):  # noqa: E501
        """GetTaskStatusResponse - a model defined in OpenAPI"""  # noqa: E501

        self._id = None
        self._created_at = None
        self._updated_at = None
        self._result = None
        self._state = None
        self._tx_hash = None
        self._qedit_tx_hash = None
        self._type = None
        self._data = None
        self._error = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if result is not None:
            self.result = result
        if state is not None:
            self.state = state
        if tx_hash is not None:
            self.tx_hash = tx_hash
        if qedit_tx_hash is not None:
            self.qedit_tx_hash = qedit_tx_hash
        if type is not None:
            self.type = type
        if data is not None:
            self.data = data
        if error is not None:
            self.error = error

    @property
    def id(self):
        """Gets the id of this GetTaskStatusResponse.  # noqa: E501

        Unique ID of the Task  # noqa: E501

        :return: The id of this GetTaskStatusResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GetTaskStatusResponse.

        Unique ID of the Task  # noqa: E501

        :param id: The id of this GetTaskStatusResponse.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def created_at(self):
        """Gets the created_at of this GetTaskStatusResponse.  # noqa: E501

        UTC time of creation of the Task in RFC-3339 format  # noqa: E501

        :return: The created_at of this GetTaskStatusResponse.  # noqa: E501
        :rtype: date
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this GetTaskStatusResponse.

        UTC time of creation of the Task in RFC-3339 format  # noqa: E501

        :param created_at: The created_at of this GetTaskStatusResponse.  # noqa: E501
        :type: date
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this GetTaskStatusResponse.  # noqa: E501

        UTC last time the Task was updated in RFC-3339 format  # noqa: E501

        :return: The updated_at of this GetTaskStatusResponse.  # noqa: E501
        :rtype: date
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this GetTaskStatusResponse.

        UTC last time the Task was updated in RFC-3339 format  # noqa: E501

        :param updated_at: The updated_at of this GetTaskStatusResponse.  # noqa: E501
        :type: date
        """

        self._updated_at = updated_at

    @property
    def result(self):
        """Gets the result of this GetTaskStatusResponse.  # noqa: E501


        :return: The result of this GetTaskStatusResponse.  # noqa: E501
        :rtype: Result
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this GetTaskStatusResponse.


        :param result: The result of this GetTaskStatusResponse.  # noqa: E501
        :type: Result
        """

        self._result = result

    @property
    def state(self):
        """Gets the state of this GetTaskStatusResponse.  # noqa: E501


        :return: The state of this GetTaskStatusResponse.  # noqa: E501
        :rtype: TaskState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this GetTaskStatusResponse.


        :param state: The state of this GetTaskStatusResponse.  # noqa: E501
        :type: TaskState
        """

        self._state = state

    @property
    def tx_hash(self):
        """Gets the tx_hash of this GetTaskStatusResponse.  # noqa: E501

        The Blockchain-generated hash of the Transaction; populated after the Blockchain Node accepted the Transaction  # noqa: E501

        :return: The tx_hash of this GetTaskStatusResponse.  # noqa: E501
        :rtype: str
        """
        return self._tx_hash

    @tx_hash.setter
    def tx_hash(self, tx_hash):
        """Sets the tx_hash of this GetTaskStatusResponse.

        The Blockchain-generated hash of the Transaction; populated after the Blockchain Node accepted the Transaction  # noqa: E501

        :param tx_hash: The tx_hash of this GetTaskStatusResponse.  # noqa: E501
        :type: str
        """

        self._tx_hash = tx_hash

    @property
    def qedit_tx_hash(self):
        """Gets the qedit_tx_hash of this GetTaskStatusResponse.  # noqa: E501

        The QEDIT-generated hash of the Transaction; generated after proof generation, but prior to Broadcast by the QEDIT Node  # noqa: E501

        :return: The qedit_tx_hash of this GetTaskStatusResponse.  # noqa: E501
        :rtype: str
        """
        return self._qedit_tx_hash

    @qedit_tx_hash.setter
    def qedit_tx_hash(self, qedit_tx_hash):
        """Sets the qedit_tx_hash of this GetTaskStatusResponse.

        The QEDIT-generated hash of the Transaction; generated after proof generation, but prior to Broadcast by the QEDIT Node  # noqa: E501

        :param qedit_tx_hash: The qedit_tx_hash of this GetTaskStatusResponse.  # noqa: E501
        :type: str
        """

        self._qedit_tx_hash = qedit_tx_hash

    @property
    def type(self):
        """Gets the type of this GetTaskStatusResponse.  # noqa: E501


        :return: The type of this GetTaskStatusResponse.  # noqa: E501
        :rtype: TaskType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GetTaskStatusResponse.


        :param type: The type of this GetTaskStatusResponse.  # noqa: E501
        :type: TaskType
        """

        self._type = type

    @property
    def data(self):
        """Gets the data of this GetTaskStatusResponse.  # noqa: E501


        :return: The data of this GetTaskStatusResponse.  # noqa: E501
        :rtype: TaskData
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this GetTaskStatusResponse.


        :param data: The data of this GetTaskStatusResponse.  # noqa: E501
        :type: TaskData
        """

        self._data = data

    @property
    def error(self):
        """Gets the error of this GetTaskStatusResponse.  # noqa: E501

        In case of failure this field reports the reason for the failure  # noqa: E501

        :return: The error of this GetTaskStatusResponse.  # noqa: E501
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this GetTaskStatusResponse.

        In case of failure this field reports the reason for the failure  # noqa: E501

        :param error: The error of this GetTaskStatusResponse.  # noqa: E501
        :type: str
        """

        self._error = error

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetTaskStatusResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
