# coding: utf-8

"""
    QEDIT - Asset Transfers

    This SDK provides a programmatic way for interacting with QEDIT's _Asset Transfer_ API. The specification definition file is publicly available [in this repository](https://github.com/QED-it/asset_transfers_dev_guide/).   # noqa: E501

    OpenAPI spec version: 1.7.0
    Contact: dev@qed-it.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class AttachmentHeader(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'attachment_id': 'str',
        'name': 'str',
        'content_type': 'str',
        'tx_hash': 'str',
        'asset_id': 'str',
        'uploaded_at': 'date',
        'content_length_bytes': 'int'
    }

    attribute_map = {
        'attachment_id': 'attachment_id',
        'name': 'name',
        'content_type': 'content_type',
        'tx_hash': 'tx_hash',
        'asset_id': 'asset_id',
        'uploaded_at': 'uploaded_at',
        'content_length_bytes': 'content_length_bytes'
    }

    def __init__(self, attachment_id=None, name=None, content_type=None, tx_hash=None, asset_id=None, uploaded_at=None, content_length_bytes=None):  # noqa: E501
        """AttachmentHeader - a model defined in OpenAPI"""  # noqa: E501

        self._attachment_id = None
        self._name = None
        self._content_type = None
        self._tx_hash = None
        self._asset_id = None
        self._uploaded_at = None
        self._content_length_bytes = None
        self.discriminator = None

        self.attachment_id = attachment_id
        self.name = name
        self.content_type = content_type
        if tx_hash is not None:
            self.tx_hash = tx_hash
        if asset_id is not None:
            self.asset_id = asset_id
        if uploaded_at is not None:
            self.uploaded_at = uploaded_at
        if content_length_bytes is not None:
            self.content_length_bytes = content_length_bytes

    @property
    def attachment_id(self):
        """Gets the attachment_id of this AttachmentHeader.  # noqa: E501

        The globally-unique ID of the Attachment; can be used as a reference for downloading it  # noqa: E501

        :return: The attachment_id of this AttachmentHeader.  # noqa: E501
        :rtype: str
        """
        return self._attachment_id

    @attachment_id.setter
    def attachment_id(self, attachment_id):
        """Sets the attachment_id of this AttachmentHeader.

        The globally-unique ID of the Attachment; can be used as a reference for downloading it  # noqa: E501

        :param attachment_id: The attachment_id of this AttachmentHeader.  # noqa: E501
        :type: str
        """
        if attachment_id is None:
            raise ValueError("Invalid value for `attachment_id`, must not be `None`")  # noqa: E501

        self._attachment_id = attachment_id

    @property
    def name(self):
        """Gets the name of this AttachmentHeader.  # noqa: E501

        A name used by the uploader to describe the Attachment; does not have to be unique; should not be relied upon to uniquely identify the Attachment  # noqa: E501

        :return: The name of this AttachmentHeader.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AttachmentHeader.

        A name used by the uploader to describe the Attachment; does not have to be unique; should not be relied upon to uniquely identify the Attachment  # noqa: E501

        :param name: The name of this AttachmentHeader.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def content_type(self):
        """Gets the content_type of this AttachmentHeader.  # noqa: E501

        The media type (a.k.a. MIME type) of the content as specifies by the uploader of the Attachment  # noqa: E501

        :return: The content_type of this AttachmentHeader.  # noqa: E501
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this AttachmentHeader.

        The media type (a.k.a. MIME type) of the content as specifies by the uploader of the Attachment  # noqa: E501

        :param content_type: The content_type of this AttachmentHeader.  # noqa: E501
        :type: str
        """
        if content_type is None:
            raise ValueError("Invalid value for `content_type`, must not be `None`")  # noqa: E501

        self._content_type = content_type

    @property
    def tx_hash(self):
        """Gets the tx_hash of this AttachmentHeader.  # noqa: E501

        The transaction hash for the transaction the Attachment was attached in. Set to empty string if the Wallet is unaware of the particular transaction in which the Attachment was attached to the Asset.  # noqa: E501

        :return: The tx_hash of this AttachmentHeader.  # noqa: E501
        :rtype: str
        """
        return self._tx_hash

    @tx_hash.setter
    def tx_hash(self, tx_hash):
        """Sets the tx_hash of this AttachmentHeader.

        The transaction hash for the transaction the Attachment was attached in. Set to empty string if the Wallet is unaware of the particular transaction in which the Attachment was attached to the Asset.  # noqa: E501

        :param tx_hash: The tx_hash of this AttachmentHeader.  # noqa: E501
        :type: str
        """

        self._tx_hash = tx_hash

    @property
    def asset_id(self):
        """Gets the asset_id of this AttachmentHeader.  # noqa: E501

        The asset ID transferred in the transaction to which this Attachment was attached.  # noqa: E501

        :return: The asset_id of this AttachmentHeader.  # noqa: E501
        :rtype: str
        """
        return self._asset_id

    @asset_id.setter
    def asset_id(self, asset_id):
        """Sets the asset_id of this AttachmentHeader.

        The asset ID transferred in the transaction to which this Attachment was attached.  # noqa: E501

        :param asset_id: The asset_id of this AttachmentHeader.  # noqa: E501
        :type: str
        """

        self._asset_id = asset_id

    @property
    def uploaded_at(self):
        """Gets the uploaded_at of this AttachmentHeader.  # noqa: E501

        The time the Attachment was uploaded at, in RFC-3339 format  # noqa: E501

        :return: The uploaded_at of this AttachmentHeader.  # noqa: E501
        :rtype: date
        """
        return self._uploaded_at

    @uploaded_at.setter
    def uploaded_at(self, uploaded_at):
        """Sets the uploaded_at of this AttachmentHeader.

        The time the Attachment was uploaded at, in RFC-3339 format  # noqa: E501

        :param uploaded_at: The uploaded_at of this AttachmentHeader.  # noqa: E501
        :type: date
        """

        self._uploaded_at = uploaded_at

    @property
    def content_length_bytes(self):
        """Gets the content_length_bytes of this AttachmentHeader.  # noqa: E501

        The length in bytes of the raw content of the Attachment  # noqa: E501

        :return: The content_length_bytes of this AttachmentHeader.  # noqa: E501
        :rtype: int
        """
        return self._content_length_bytes

    @content_length_bytes.setter
    def content_length_bytes(self, content_length_bytes):
        """Sets the content_length_bytes of this AttachmentHeader.

        The length in bytes of the raw content of the Attachment  # noqa: E501

        :param content_length_bytes: The content_length_bytes of this AttachmentHeader.  # noqa: E501
        :type: int
        """
        if content_length_bytes is not None and content_length_bytes < 0:  # noqa: E501
            raise ValueError("Invalid value for `content_length_bytes`, must be a value greater than or equal to `0`")  # noqa: E501

        self._content_length_bytes = content_length_bytes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AttachmentHeader):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
