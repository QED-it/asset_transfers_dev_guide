# coding: utf-8

"""
    QEDIT - Asset Transfers

    This SDK provides a programmatic way for interacting with QEDIT's _Asset Transfer_ API. The specification definition file is publicly available [in this repository](https://github.com/QED-it/asset_transfers_dev_guide/).   # noqa: E501

    OpenAPI spec version: 1.7.2
    Contact: dev@qed-it.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ListAttachmentsRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'wallet_id': 'str',
        'start_index': 'int',
        'number_of_results': 'int',
        'asset_ids': 'list[str]',
        'tx_hashes': 'list[str]'
    }

    attribute_map = {
        'wallet_id': 'wallet_id',
        'start_index': 'start_index',
        'number_of_results': 'number_of_results',
        'asset_ids': 'asset_ids',
        'tx_hashes': 'tx_hashes'
    }

    def __init__(self, wallet_id=None, start_index=None, number_of_results=None, asset_ids=None, tx_hashes=None):  # noqa: E501
        """ListAttachmentsRequest - a model defined in OpenAPI"""  # noqa: E501

        self._wallet_id = None
        self._start_index = None
        self._number_of_results = None
        self._asset_ids = None
        self._tx_hashes = None
        self.discriminator = None

        self.wallet_id = wallet_id
        if start_index is not None:
            self.start_index = start_index
        if number_of_results is not None:
            self.number_of_results = number_of_results
        if asset_ids is not None:
            self.asset_ids = asset_ids
        if tx_hashes is not None:
            self.tx_hashes = tx_hashes

    @property
    def wallet_id(self):
        """Gets the wallet_id of this ListAttachmentsRequest.  # noqa: E501

        The Node-specific identifier of the Wallet whose credentials should be used to list Attachments  # noqa: E501

        :return: The wallet_id of this ListAttachmentsRequest.  # noqa: E501
        :rtype: str
        """
        return self._wallet_id

    @wallet_id.setter
    def wallet_id(self, wallet_id):
        """Sets the wallet_id of this ListAttachmentsRequest.

        The Node-specific identifier of the Wallet whose credentials should be used to list Attachments  # noqa: E501

        :param wallet_id: The wallet_id of this ListAttachmentsRequest.  # noqa: E501
        :type: str
        """
        if wallet_id is None:
            raise ValueError("Invalid value for `wallet_id`, must not be `None`")  # noqa: E501

        self._wallet_id = wallet_id

    @property
    def start_index(self):
        """Gets the start_index of this ListAttachmentsRequest.  # noqa: E501

        An offset used to paginate through the Attachment list; indexing is 0-based; defaults to 0  # noqa: E501

        :return: The start_index of this ListAttachmentsRequest.  # noqa: E501
        :rtype: int
        """
        return self._start_index

    @start_index.setter
    def start_index(self, start_index):
        """Sets the start_index of this ListAttachmentsRequest.

        An offset used to paginate through the Attachment list; indexing is 0-based; defaults to 0  # noqa: E501

        :param start_index: The start_index of this ListAttachmentsRequest.  # noqa: E501
        :type: int
        """

        self._start_index = start_index

    @property
    def number_of_results(self):
        """Gets the number_of_results of this ListAttachmentsRequest.  # noqa: E501

        Maximal number of results to fetch in this call; defaults to 100  # noqa: E501

        :return: The number_of_results of this ListAttachmentsRequest.  # noqa: E501
        :rtype: int
        """
        return self._number_of_results

    @number_of_results.setter
    def number_of_results(self, number_of_results):
        """Sets the number_of_results of this ListAttachmentsRequest.

        Maximal number of results to fetch in this call; defaults to 100  # noqa: E501

        :param number_of_results: The number_of_results of this ListAttachmentsRequest.  # noqa: E501
        :type: int
        """

        self._number_of_results = number_of_results

    @property
    def asset_ids(self):
        """Gets the asset_ids of this ListAttachmentsRequest.  # noqa: E501

        An optional list of Asset IDs; if present and not empty, only Attachments attached to Assets of one or more of the given Asset IDs will be returned; note that only Attachments attached to Assets owned or previously-owned by the given Wallet will be returned  # noqa: E501

        :return: The asset_ids of this ListAttachmentsRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._asset_ids

    @asset_ids.setter
    def asset_ids(self, asset_ids):
        """Sets the asset_ids of this ListAttachmentsRequest.

        An optional list of Asset IDs; if present and not empty, only Attachments attached to Assets of one or more of the given Asset IDs will be returned; note that only Attachments attached to Assets owned or previously-owned by the given Wallet will be returned  # noqa: E501

        :param asset_ids: The asset_ids of this ListAttachmentsRequest.  # noqa: E501
        :type: list[str]
        """

        self._asset_ids = asset_ids

    @property
    def tx_hashes(self):
        """Gets the tx_hashes of this ListAttachmentsRequest.  # noqa: E501

        An optional list of Transaction hashes; if present and not empty, only Attachments attached to Assets transferred or created in the referenced Transations will be returned; note that only Attachments from Transactions that are visible to the given Wallet will be returned  # noqa: E501

        :return: The tx_hashes of this ListAttachmentsRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._tx_hashes

    @tx_hashes.setter
    def tx_hashes(self, tx_hashes):
        """Sets the tx_hashes of this ListAttachmentsRequest.

        An optional list of Transaction hashes; if present and not empty, only Attachments attached to Assets transferred or created in the referenced Transations will be returned; note that only Attachments from Transactions that are visible to the given Wallet will be returned  # noqa: E501

        :param tx_hashes: The tx_hashes of this ListAttachmentsRequest.  # noqa: E501
        :type: list[str]
        """

        self._tx_hashes = tx_hashes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ListAttachmentsRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
