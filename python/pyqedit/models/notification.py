# coding: utf-8

"""
    QEDIT - Asset Transfers

    This SDK provides a programmatic way for interacting with QEDIT's _Asset Transfer_ API. The specification definition file is publicly available [in this repository](https://github.com/QED-it/asset_transfers_dev_guide/).   # noqa: E501

    OpenAPI spec version: 1.6.2
    Contact: dev@qed-it.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Notification(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'created_at': 'date',
        'wallet_id': 'str',
        'task_id': 'str',
        'notification_type': 'NotificationType',
        'content': 'object'
    }

    attribute_map = {
        'id': 'id',
        'created_at': 'created_at',
        'wallet_id': 'wallet_id',
        'task_id': 'task_id',
        'notification_type': 'notification_type',
        'content': 'content'
    }

    def __init__(self, id=None, created_at=None, wallet_id=None, task_id=None, notification_type=None, content=None):  # noqa: E501
        """Notification - a model defined in OpenAPI"""  # noqa: E501

        self._id = None
        self._created_at = None
        self._wallet_id = None
        self._task_id = None
        self._notification_type = None
        self._content = None
        self.discriminator = None

        self.id = id
        self.created_at = created_at
        if wallet_id is not None:
            self.wallet_id = wallet_id
        self.task_id = task_id
        self.notification_type = notification_type
        if content is not None:
            self.content = content

    @property
    def id(self):
        """Gets the id of this Notification.  # noqa: E501

        The unique identifier of the notification. Can be used for pagination purposes.  # noqa: E501

        :return: The id of this Notification.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Notification.

        The unique identifier of the notification. Can be used for pagination purposes.  # noqa: E501

        :param id: The id of this Notification.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def created_at(self):
        """Gets the created_at of this Notification.  # noqa: E501

        Timestamp the notification was created at, in RFC-3339 format.  # noqa: E501

        :return: The created_at of this Notification.  # noqa: E501
        :rtype: date
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Notification.

        Timestamp the notification was created at, in RFC-3339 format.  # noqa: E501

        :param created_at: The created_at of this Notification.  # noqa: E501
        :type: date
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def wallet_id(self):
        """Gets the wallet_id of this Notification.  # noqa: E501

        The ID of the wallet the notification relates to. May be null in cases there is no such specific wallet.  # noqa: E501

        :return: The wallet_id of this Notification.  # noqa: E501
        :rtype: str
        """
        return self._wallet_id

    @wallet_id.setter
    def wallet_id(self, wallet_id):
        """Sets the wallet_id of this Notification.

        The ID of the wallet the notification relates to. May be null in cases there is no such specific wallet.  # noqa: E501

        :param wallet_id: The wallet_id of this Notification.  # noqa: E501
        :type: str
        """

        self._wallet_id = wallet_id

    @property
    def task_id(self):
        """Gets the task_id of this Notification.  # noqa: E501

        The ID of the task the notification relates to. May be empty in cases there is no such specific task.  # noqa: E501

        :return: The task_id of this Notification.  # noqa: E501
        :rtype: str
        """
        return self._task_id

    @task_id.setter
    def task_id(self, task_id):
        """Sets the task_id of this Notification.

        The ID of the task the notification relates to. May be empty in cases there is no such specific task.  # noqa: E501

        :param task_id: The task_id of this Notification.  # noqa: E501
        :type: str
        """
        if task_id is None:
            raise ValueError("Invalid value for `task_id`, must not be `None`")  # noqa: E501

        self._task_id = task_id

    @property
    def notification_type(self):
        """Gets the notification_type of this Notification.  # noqa: E501


        :return: The notification_type of this Notification.  # noqa: E501
        :rtype: NotificationType
        """
        return self._notification_type

    @notification_type.setter
    def notification_type(self, notification_type):
        """Sets the notification_type of this Notification.


        :param notification_type: The notification_type of this Notification.  # noqa: E501
        :type: NotificationType
        """
        if notification_type is None:
            raise ValueError("Invalid value for `notification_type`, must not be `None`")  # noqa: E501

        self._notification_type = notification_type

    @property
    def content(self):
        """Gets the content of this Notification.  # noqa: E501


        :return: The content of this Notification.  # noqa: E501
        :rtype: object
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this Notification.


        :param content: The content of this Notification.  # noqa: E501
        :type: object
        """

        self._content = content

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Notification):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
