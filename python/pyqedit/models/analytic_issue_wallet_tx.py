# coding: utf-8

"""
    QEDIT - Asset Transfers

    This SDK provides a programmatic way for interacting with QEDIT's _Asset Transfer_ API. The specification definition file is publicly available [in this repository](https://github.com/QED-it/asset_transfers_dev_guide/).   # noqa: E501

    OpenAPI spec version: 1.7.0
    Contact: dev@qed-it.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class AnalyticIssueWalletTx(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'is_incoming': 'bool',
        'issued_by_self': 'bool',
        'sender_id': 'str',
        'recipient_address': 'str',
        'asset_id': 'str',
        'amount': 'int',
        'is_confidential': 'bool',
        'memo': 'str'
    }

    attribute_map = {
        'is_incoming': 'is_incoming',
        'issued_by_self': 'issued_by_self',
        'sender_id': 'sender_id',
        'recipient_address': 'recipient_address',
        'asset_id': 'asset_id',
        'amount': 'amount',
        'is_confidential': 'is_confidential',
        'memo': 'memo'
    }

    def __init__(self, is_incoming=None, issued_by_self=None, sender_id=None, recipient_address=None, asset_id=None, amount=None, is_confidential=None, memo=None):  # noqa: E501
        """AnalyticIssueWalletTx - a model defined in OpenAPI"""  # noqa: E501

        self._is_incoming = None
        self._issued_by_self = None
        self._sender_id = None
        self._recipient_address = None
        self._asset_id = None
        self._amount = None
        self._is_confidential = None
        self._memo = None
        self.discriminator = None

        if is_incoming is not None:
            self.is_incoming = is_incoming
        if issued_by_self is not None:
            self.issued_by_self = issued_by_self
        if sender_id is not None:
            self.sender_id = sender_id
        if recipient_address is not None:
            self.recipient_address = recipient_address
        if asset_id is not None:
            self.asset_id = asset_id
        if amount is not None:
            self.amount = amount
        if is_confidential is not None:
            self.is_confidential = is_confidential
        if memo is not None:
            self.memo = memo

    @property
    def is_incoming(self):
        """Gets the is_incoming of this AnalyticIssueWalletTx.  # noqa: E501

        Boolean signifying whether the Assets were issued to the Wallet in question  # noqa: E501

        :return: The is_incoming of this AnalyticIssueWalletTx.  # noqa: E501
        :rtype: bool
        """
        return self._is_incoming

    @is_incoming.setter
    def is_incoming(self, is_incoming):
        """Sets the is_incoming of this AnalyticIssueWalletTx.

        Boolean signifying whether the Assets were issued to the Wallet in question  # noqa: E501

        :param is_incoming: The is_incoming of this AnalyticIssueWalletTx.  # noqa: E501
        :type: bool
        """

        self._is_incoming = is_incoming

    @property
    def issued_by_self(self):
        """Gets the issued_by_self of this AnalyticIssueWalletTx.  # noqa: E501

        Boolean signifying whether the Wallet used to issue the Assets is the Wallet in question  # noqa: E501

        :return: The issued_by_self of this AnalyticIssueWalletTx.  # noqa: E501
        :rtype: bool
        """
        return self._issued_by_self

    @issued_by_self.setter
    def issued_by_self(self, issued_by_self):
        """Sets the issued_by_self of this AnalyticIssueWalletTx.

        Boolean signifying whether the Wallet used to issue the Assets is the Wallet in question  # noqa: E501

        :param issued_by_self: The issued_by_self of this AnalyticIssueWalletTx.  # noqa: E501
        :type: bool
        """

        self._issued_by_self = issued_by_self

    @property
    def sender_id(self):
        """Gets the sender_id of this AnalyticIssueWalletTx.  # noqa: E501

        The public key of the Wallet that was used to issue the Assets  # noqa: E501

        :return: The sender_id of this AnalyticIssueWalletTx.  # noqa: E501
        :rtype: str
        """
        return self._sender_id

    @sender_id.setter
    def sender_id(self, sender_id):
        """Sets the sender_id of this AnalyticIssueWalletTx.

        The public key of the Wallet that was used to issue the Assets  # noqa: E501

        :param sender_id: The sender_id of this AnalyticIssueWalletTx.  # noqa: E501
        :type: str
        """

        self._sender_id = sender_id

    @property
    def recipient_address(self):
        """Gets the recipient_address of this AnalyticIssueWalletTx.  # noqa: E501

        The Address the Assets were issued to  # noqa: E501

        :return: The recipient_address of this AnalyticIssueWalletTx.  # noqa: E501
        :rtype: str
        """
        return self._recipient_address

    @recipient_address.setter
    def recipient_address(self, recipient_address):
        """Sets the recipient_address of this AnalyticIssueWalletTx.

        The Address the Assets were issued to  # noqa: E501

        :param recipient_address: The recipient_address of this AnalyticIssueWalletTx.  # noqa: E501
        :type: str
        """

        self._recipient_address = recipient_address

    @property
    def asset_id(self):
        """Gets the asset_id of this AnalyticIssueWalletTx.  # noqa: E501

        The ID of an Asset Type. It must be a string of length 0 to 40 characters. Allowed characters are lower- and uppercase letters, digits, dot (.), and hyphen (-). It must not end with an hyphen. Asset IDs are case-sensitive.   # noqa: E501

        :return: The asset_id of this AnalyticIssueWalletTx.  # noqa: E501
        :rtype: str
        """
        return self._asset_id

    @asset_id.setter
    def asset_id(self, asset_id):
        """Sets the asset_id of this AnalyticIssueWalletTx.

        The ID of an Asset Type. It must be a string of length 0 to 40 characters. Allowed characters are lower- and uppercase letters, digits, dot (.), and hyphen (-). It must not end with an hyphen. Asset IDs are case-sensitive.   # noqa: E501

        :param asset_id: The asset_id of this AnalyticIssueWalletTx.  # noqa: E501
        :type: str
        """

        self._asset_id = asset_id

    @property
    def amount(self):
        """Gets the amount of this AnalyticIssueWalletTx.  # noqa: E501

        The amount of Assets issued  # noqa: E501

        :return: The amount of this AnalyticIssueWalletTx.  # noqa: E501
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this AnalyticIssueWalletTx.

        The amount of Assets issued  # noqa: E501

        :param amount: The amount of this AnalyticIssueWalletTx.  # noqa: E501
        :type: int
        """

        self._amount = amount

    @property
    def is_confidential(self):
        """Gets the is_confidential of this AnalyticIssueWalletTx.  # noqa: E501

        Boolean signifying whether the Issuance was done confidentially  # noqa: E501

        :return: The is_confidential of this AnalyticIssueWalletTx.  # noqa: E501
        :rtype: bool
        """
        return self._is_confidential

    @is_confidential.setter
    def is_confidential(self, is_confidential):
        """Sets the is_confidential of this AnalyticIssueWalletTx.

        Boolean signifying whether the Issuance was done confidentially  # noqa: E501

        :param is_confidential: The is_confidential of this AnalyticIssueWalletTx.  # noqa: E501
        :type: bool
        """

        self._is_confidential = is_confidential

    @property
    def memo(self):
        """Gets the memo of this AnalyticIssueWalletTx.  # noqa: E501

        The private memo attached to the Issuance  # noqa: E501

        :return: The memo of this AnalyticIssueWalletTx.  # noqa: E501
        :rtype: str
        """
        return self._memo

    @memo.setter
    def memo(self, memo):
        """Sets the memo of this AnalyticIssueWalletTx.

        The private memo attached to the Issuance  # noqa: E501

        :param memo: The memo of this AnalyticIssueWalletTx.  # noqa: E501
        :type: str
        """

        self._memo = memo

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AnalyticIssueWalletTx):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
