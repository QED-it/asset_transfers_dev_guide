# coding: utf-8

"""
    QEDIT - Asset Transfers

    This SDK provides a programmatic way for interacting with QEDIT's _Asset Transfer_ API. The specification definition file is publicly available [in this repository](https://github.com/QED-it/asset_transfers_dev_guide/).   # noqa: E501

    OpenAPI spec version: 1.6.2
    Contact: dev@qed-it.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class GetNotificationsRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'wallet_id': 'str',
        'types': 'list[NotificationType]',
        'starting_with_time': 'date',
        'after_id': 'int',
        'order': 'OrderEnum',
        'max_results': 'int'
    }

    attribute_map = {
        'wallet_id': 'wallet_id',
        'types': 'types',
        'starting_with_time': 'starting_with_time',
        'after_id': 'after_id',
        'order': 'order',
        'max_results': 'max_results'
    }

    def __init__(self, wallet_id=None, types=None, starting_with_time=None, after_id=None, order=None, max_results=100):  # noqa: E501
        """GetNotificationsRequest - a model defined in OpenAPI"""  # noqa: E501

        self._wallet_id = None
        self._types = None
        self._starting_with_time = None
        self._after_id = None
        self._order = None
        self._max_results = None
        self.discriminator = None

        if wallet_id is not None:
            self.wallet_id = wallet_id
        if types is not None:
            self.types = types
        if starting_with_time is not None:
            self.starting_with_time = starting_with_time
        if after_id is not None:
            self.after_id = after_id
        if order is not None:
            self.order = order
        if max_results is not None:
            self.max_results = max_results

    @property
    def wallet_id(self):
        """Gets the wallet_id of this GetNotificationsRequest.  # noqa: E501

        Fetch notifications that relate to this wallet ID only  # noqa: E501

        :return: The wallet_id of this GetNotificationsRequest.  # noqa: E501
        :rtype: str
        """
        return self._wallet_id

    @wallet_id.setter
    def wallet_id(self, wallet_id):
        """Sets the wallet_id of this GetNotificationsRequest.

        Fetch notifications that relate to this wallet ID only  # noqa: E501

        :param wallet_id: The wallet_id of this GetNotificationsRequest.  # noqa: E501
        :type: str
        """

        self._wallet_id = wallet_id

    @property
    def types(self):
        """Gets the types of this GetNotificationsRequest.  # noqa: E501


        :return: The types of this GetNotificationsRequest.  # noqa: E501
        :rtype: list[NotificationType]
        """
        return self._types

    @types.setter
    def types(self, types):
        """Sets the types of this GetNotificationsRequest.


        :param types: The types of this GetNotificationsRequest.  # noqa: E501
        :type: list[NotificationType]
        """

        self._types = types

    @property
    def starting_with_time(self):
        """Gets the starting_with_time of this GetNotificationsRequest.  # noqa: E501

        Fetch notifications reported at this timestamp or later/earlier. Later notifications will be fetched if the order is ascending, and earlier ones if the order is descending. The timestamp is expected to be in RFC-3339 format.  # noqa: E501

        :return: The starting_with_time of this GetNotificationsRequest.  # noqa: E501
        :rtype: date
        """
        return self._starting_with_time

    @starting_with_time.setter
    def starting_with_time(self, starting_with_time):
        """Sets the starting_with_time of this GetNotificationsRequest.

        Fetch notifications reported at this timestamp or later/earlier. Later notifications will be fetched if the order is ascending, and earlier ones if the order is descending. The timestamp is expected to be in RFC-3339 format.  # noqa: E501

        :param starting_with_time: The starting_with_time of this GetNotificationsRequest.  # noqa: E501
        :type: date
        """

        self._starting_with_time = starting_with_time

    @property
    def after_id(self):
        """Gets the after_id of this GetNotificationsRequest.  # noqa: E501

        Fetch notifications after this given ID (not including the notification with the given ID). This is meant to facilitate pagination. Later notifications will be fetched if ascending order is selected, and earlier ones if descending order is selected. Warning - do not assume anything about the implementation of after_id; the values of the ID are intended to be copy-pasted from retrieved notifications for pagination.  # noqa: E501

        :return: The after_id of this GetNotificationsRequest.  # noqa: E501
        :rtype: int
        """
        return self._after_id

    @after_id.setter
    def after_id(self, after_id):
        """Sets the after_id of this GetNotificationsRequest.

        Fetch notifications after this given ID (not including the notification with the given ID). This is meant to facilitate pagination. Later notifications will be fetched if ascending order is selected, and earlier ones if descending order is selected. Warning - do not assume anything about the implementation of after_id; the values of the ID are intended to be copy-pasted from retrieved notifications for pagination.  # noqa: E501

        :param after_id: The after_id of this GetNotificationsRequest.  # noqa: E501
        :type: int
        """

        self._after_id = after_id

    @property
    def order(self):
        """Gets the order of this GetNotificationsRequest.  # noqa: E501


        :return: The order of this GetNotificationsRequest.  # noqa: E501
        :rtype: OrderEnum
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this GetNotificationsRequest.


        :param order: The order of this GetNotificationsRequest.  # noqa: E501
        :type: OrderEnum
        """

        self._order = order

    @property
    def max_results(self):
        """Gets the max_results of this GetNotificationsRequest.  # noqa: E501

        The maximal number of results to fetch  # noqa: E501

        :return: The max_results of this GetNotificationsRequest.  # noqa: E501
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this GetNotificationsRequest.

        The maximal number of results to fetch  # noqa: E501

        :param max_results: The max_results of this GetNotificationsRequest.  # noqa: E501
        :type: int
        """
        if max_results is not None and max_results > 1000:  # noqa: E501
            raise ValueError("Invalid value for `max_results`, must be a value less than or equal to `1000`")  # noqa: E501
        if max_results is not None and max_results < 1:  # noqa: E501
            raise ValueError("Invalid value for `max_results`, must be a value greater than or equal to `1`")  # noqa: E501

        self._max_results = max_results

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetNotificationsRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
