# coding: utf-8

"""
    QEDIT - Asset Transfers

    This SDK provides a programmatic way for interacting with QEDIT's _Asset Transfer_ API. The specification definition file is publicly available [in this repository](https://github.com/QED-it/asset_transfers_dev_guide/).   # noqa: E501

    OpenAPI spec version: 1.6.2
    Contact: dev@qed-it.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class AnalyticsOutputDescription(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'cv': 'str',
        'cm': 'str',
        'zkproof': 'str',
        'epk': 'str',
        'enc_note': 'str',
        'enc_sender': 'str',
        'require_confirmation_from_rk': 'str'
    }

    attribute_map = {
        'cv': 'cv',
        'cm': 'cm',
        'zkproof': 'zkproof',
        'epk': 'epk',
        'enc_note': 'enc_note',
        'enc_sender': 'enc_sender',
        'require_confirmation_from_rk': 'require_confirmation_from_rk'
    }

    def __init__(self, cv=None, cm=None, zkproof=None, epk=None, enc_note=None, enc_sender=None, require_confirmation_from_rk=None):  # noqa: E501
        """AnalyticsOutputDescription - a model defined in OpenAPI"""  # noqa: E501

        self._cv = None
        self._cm = None
        self._zkproof = None
        self._epk = None
        self._enc_note = None
        self._enc_sender = None
        self._require_confirmation_from_rk = None
        self.discriminator = None

        if cv is not None:
            self.cv = cv
        if cm is not None:
            self.cm = cm
        if zkproof is not None:
            self.zkproof = zkproof
        if epk is not None:
            self.epk = epk
        if enc_note is not None:
            self.enc_note = enc_note
        if enc_sender is not None:
            self.enc_sender = enc_sender
        if require_confirmation_from_rk is not None:
            self.require_confirmation_from_rk = require_confirmation_from_rk

    @property
    def cv(self):
        """Gets the cv of this AnalyticsOutputDescription.  # noqa: E501

        The commitment to both the Asset Type and amount of the Note  # noqa: E501

        :return: The cv of this AnalyticsOutputDescription.  # noqa: E501
        :rtype: str
        """
        return self._cv

    @cv.setter
    def cv(self, cv):
        """Sets the cv of this AnalyticsOutputDescription.

        The commitment to both the Asset Type and amount of the Note  # noqa: E501

        :param cv: The cv of this AnalyticsOutputDescription.  # noqa: E501
        :type: str
        """

        self._cv = cv

    @property
    def cm(self):
        """Gets the cm of this AnalyticsOutputDescription.  # noqa: E501

        The commitment to the entire Note  # noqa: E501

        :return: The cm of this AnalyticsOutputDescription.  # noqa: E501
        :rtype: str
        """
        return self._cm

    @cm.setter
    def cm(self, cm):
        """Sets the cm of this AnalyticsOutputDescription.

        The commitment to the entire Note  # noqa: E501

        :param cm: The cm of this AnalyticsOutputDescription.  # noqa: E501
        :type: str
        """

        self._cm = cm

    @property
    def zkproof(self):
        """Gets the zkproof of this AnalyticsOutputDescription.  # noqa: E501

        The Proof that the commitments match  # noqa: E501

        :return: The zkproof of this AnalyticsOutputDescription.  # noqa: E501
        :rtype: str
        """
        return self._zkproof

    @zkproof.setter
    def zkproof(self, zkproof):
        """Sets the zkproof of this AnalyticsOutputDescription.

        The Proof that the commitments match  # noqa: E501

        :param zkproof: The zkproof of this AnalyticsOutputDescription.  # noqa: E501
        :type: str
        """

        self._zkproof = zkproof

    @property
    def epk(self):
        """Gets the epk of this AnalyticsOutputDescription.  # noqa: E501

        The ephemeral public key used to encrypt the Note contents for the receiver  # noqa: E501

        :return: The epk of this AnalyticsOutputDescription.  # noqa: E501
        :rtype: str
        """
        return self._epk

    @epk.setter
    def epk(self, epk):
        """Sets the epk of this AnalyticsOutputDescription.

        The ephemeral public key used to encrypt the Note contents for the receiver  # noqa: E501

        :param epk: The epk of this AnalyticsOutputDescription.  # noqa: E501
        :type: str
        """

        self._epk = epk

    @property
    def enc_note(self):
        """Gets the enc_note of this AnalyticsOutputDescription.  # noqa: E501

        The Note encryption for the receiver  # noqa: E501

        :return: The enc_note of this AnalyticsOutputDescription.  # noqa: E501
        :rtype: str
        """
        return self._enc_note

    @enc_note.setter
    def enc_note(self, enc_note):
        """Sets the enc_note of this AnalyticsOutputDescription.

        The Note encryption for the receiver  # noqa: E501

        :param enc_note: The enc_note of this AnalyticsOutputDescription.  # noqa: E501
        :type: str
        """

        self._enc_note = enc_note

    @property
    def enc_sender(self):
        """Gets the enc_sender of this AnalyticsOutputDescription.  # noqa: E501

        The Note encryption for the sender  # noqa: E501

        :return: The enc_sender of this AnalyticsOutputDescription.  # noqa: E501
        :rtype: str
        """
        return self._enc_sender

    @enc_sender.setter
    def enc_sender(self, enc_sender):
        """Sets the enc_sender of this AnalyticsOutputDescription.

        The Note encryption for the sender  # noqa: E501

        :param enc_sender: The enc_sender of this AnalyticsOutputDescription.  # noqa: E501
        :type: str
        """

        self._enc_sender = enc_sender

    @property
    def require_confirmation_from_rk(self):
        """Gets the require_confirmation_from_rk of this AnalyticsOutputDescription.  # noqa: E501

        The rerandomized (fully-anonymous) public key of the wallet that confirmed receipt of the output; identity of this wallet can only be recovered by the sending and confirming wallets (including view-only copies of these wallets); empty if no confirmation was requested  # noqa: E501

        :return: The require_confirmation_from_rk of this AnalyticsOutputDescription.  # noqa: E501
        :rtype: str
        """
        return self._require_confirmation_from_rk

    @require_confirmation_from_rk.setter
    def require_confirmation_from_rk(self, require_confirmation_from_rk):
        """Sets the require_confirmation_from_rk of this AnalyticsOutputDescription.

        The rerandomized (fully-anonymous) public key of the wallet that confirmed receipt of the output; identity of this wallet can only be recovered by the sending and confirming wallets (including view-only copies of these wallets); empty if no confirmation was requested  # noqa: E501

        :param require_confirmation_from_rk: The require_confirmation_from_rk of this AnalyticsOutputDescription.  # noqa: E501
        :type: str
        """

        self._require_confirmation_from_rk = require_confirmation_from_rk

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AnalyticsOutputDescription):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
