# coding: utf-8

"""
    QEDIT - Asset Transfers

    This SDK provides a programmatic way for interacting with QEDIT's _Asset Transfer_ API. The specification definition file is publicly available [in this repository](https://github.com/QED-it/asset_transfers_dev_guide/).   # noqa: E501

    OpenAPI spec version: 1.7.2
    Contact: dev@qed-it.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class AnalyticsRuleTx(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'sender_public_key': 'str',
        'rules_to_add': 'list[AnalyticsRuleDefinition]',
        'rules_to_delete': 'list[AnalyticsRuleDefinition]',
        'nonce': 'int',
        'signature': 'str'
    }

    attribute_map = {
        'sender_public_key': 'sender_public_key',
        'rules_to_add': 'rules_to_add',
        'rules_to_delete': 'rules_to_delete',
        'nonce': 'nonce',
        'signature': 'signature'
    }

    def __init__(self, sender_public_key=None, rules_to_add=None, rules_to_delete=None, nonce=None, signature=None):  # noqa: E501
        """AnalyticsRuleTx - a model defined in OpenAPI"""  # noqa: E501

        self._sender_public_key = None
        self._rules_to_add = None
        self._rules_to_delete = None
        self._nonce = None
        self._signature = None
        self.discriminator = None

        if sender_public_key is not None:
            self.sender_public_key = sender_public_key
        if rules_to_add is not None:
            self.rules_to_add = rules_to_add
        if rules_to_delete is not None:
            self.rules_to_delete = rules_to_delete
        if nonce is not None:
            self.nonce = nonce
        if signature is not None:
            self.signature = signature

    @property
    def sender_public_key(self):
        """Gets the sender_public_key of this AnalyticsRuleTx.  # noqa: E501

        The public key of the Wallet used to create the Rule  # noqa: E501

        :return: The sender_public_key of this AnalyticsRuleTx.  # noqa: E501
        :rtype: str
        """
        return self._sender_public_key

    @sender_public_key.setter
    def sender_public_key(self, sender_public_key):
        """Sets the sender_public_key of this AnalyticsRuleTx.

        The public key of the Wallet used to create the Rule  # noqa: E501

        :param sender_public_key: The sender_public_key of this AnalyticsRuleTx.  # noqa: E501
        :type: str
        """

        self._sender_public_key = sender_public_key

    @property
    def rules_to_add(self):
        """Gets the rules_to_add of this AnalyticsRuleTx.  # noqa: E501

        The details of the Rules added in this transaction  # noqa: E501

        :return: The rules_to_add of this AnalyticsRuleTx.  # noqa: E501
        :rtype: list[AnalyticsRuleDefinition]
        """
        return self._rules_to_add

    @rules_to_add.setter
    def rules_to_add(self, rules_to_add):
        """Sets the rules_to_add of this AnalyticsRuleTx.

        The details of the Rules added in this transaction  # noqa: E501

        :param rules_to_add: The rules_to_add of this AnalyticsRuleTx.  # noqa: E501
        :type: list[AnalyticsRuleDefinition]
        """

        self._rules_to_add = rules_to_add

    @property
    def rules_to_delete(self):
        """Gets the rules_to_delete of this AnalyticsRuleTx.  # noqa: E501

        The details of the Rules deleted in this transaction  # noqa: E501

        :return: The rules_to_delete of this AnalyticsRuleTx.  # noqa: E501
        :rtype: list[AnalyticsRuleDefinition]
        """
        return self._rules_to_delete

    @rules_to_delete.setter
    def rules_to_delete(self, rules_to_delete):
        """Sets the rules_to_delete of this AnalyticsRuleTx.

        The details of the Rules deleted in this transaction  # noqa: E501

        :param rules_to_delete: The rules_to_delete of this AnalyticsRuleTx.  # noqa: E501
        :type: list[AnalyticsRuleDefinition]
        """

        self._rules_to_delete = rules_to_delete

    @property
    def nonce(self):
        """Gets the nonce of this AnalyticsRuleTx.  # noqa: E501

        The nonce used to make this Rule transaction unique  # noqa: E501

        :return: The nonce of this AnalyticsRuleTx.  # noqa: E501
        :rtype: int
        """
        return self._nonce

    @nonce.setter
    def nonce(self, nonce):
        """Sets the nonce of this AnalyticsRuleTx.

        The nonce used to make this Rule transaction unique  # noqa: E501

        :param nonce: The nonce of this AnalyticsRuleTx.  # noqa: E501
        :type: int
        """

        self._nonce = nonce

    @property
    def signature(self):
        """Gets the signature of this AnalyticsRuleTx.  # noqa: E501

        The signature authorizing the Rule changes, made by the Wallet that made the Rule changes  # noqa: E501

        :return: The signature of this AnalyticsRuleTx.  # noqa: E501
        :rtype: str
        """
        return self._signature

    @signature.setter
    def signature(self, signature):
        """Sets the signature of this AnalyticsRuleTx.

        The signature authorizing the Rule changes, made by the Wallet that made the Rule changes  # noqa: E501

        :param signature: The signature of this AnalyticsRuleTx.  # noqa: E501
        :type: str
        """

        self._signature = signature

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AnalyticsRuleTx):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
