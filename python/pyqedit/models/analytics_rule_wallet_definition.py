# coding: utf-8

"""
    QEDIT - Asset Transfers

    This SDK provides a programmatic way for interacting with QEDIT's _Asset Transfer_ API. The specification definition file is publicly available [in this repository](https://github.com/QED-it/asset_transfers_dev_guide/).   # noqa: E501

    OpenAPI spec version: 1.6.2
    Contact: dev@qed-it.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class AnalyticsRuleWalletDefinition(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'public_key': 'str',
        'is_admin': 'bool',
        'namespace': 'str',
        'can_issue_confidentially': 'bool',
        'operation': 'str'
    }

    attribute_map = {
        'public_key': 'public_key',
        'is_admin': 'is_admin',
        'namespace': 'namespace',
        'can_issue_confidentially': 'can_issue_confidentially',
        'operation': 'operation'
    }

    def __init__(self, public_key=None, is_admin=None, namespace=None, can_issue_confidentially=None, operation=None):  # noqa: E501
        """AnalyticsRuleWalletDefinition - a model defined in OpenAPI"""  # noqa: E501

        self._public_key = None
        self._is_admin = None
        self._namespace = None
        self._can_issue_confidentially = None
        self._operation = None
        self.discriminator = None

        if public_key is not None:
            self.public_key = public_key
        if is_admin is not None:
            self.is_admin = is_admin
        if namespace is not None:
            self.namespace = namespace
        if can_issue_confidentially is not None:
            self.can_issue_confidentially = can_issue_confidentially
        if operation is not None:
            self.operation = operation

    @property
    def public_key(self):
        """Gets the public_key of this AnalyticsRuleWalletDefinition.  # noqa: E501

        The public key of the Wallet that is being granted rights in this Rule  # noqa: E501

        :return: The public_key of this AnalyticsRuleWalletDefinition.  # noqa: E501
        :rtype: str
        """
        return self._public_key

    @public_key.setter
    def public_key(self, public_key):
        """Sets the public_key of this AnalyticsRuleWalletDefinition.

        The public key of the Wallet that is being granted rights in this Rule  # noqa: E501

        :param public_key: The public_key of this AnalyticsRuleWalletDefinition.  # noqa: E501
        :type: str
        """

        self._public_key = public_key

    @property
    def is_admin(self):
        """Gets the is_admin of this AnalyticsRuleWalletDefinition.  # noqa: E501

        Boolean signifying whether the Rule grants admin rights  # noqa: E501

        :return: The is_admin of this AnalyticsRuleWalletDefinition.  # noqa: E501
        :rtype: bool
        """
        return self._is_admin

    @is_admin.setter
    def is_admin(self, is_admin):
        """Sets the is_admin of this AnalyticsRuleWalletDefinition.

        Boolean signifying whether the Rule grants admin rights  # noqa: E501

        :param is_admin: The is_admin of this AnalyticsRuleWalletDefinition.  # noqa: E501
        :type: bool
        """

        self._is_admin = is_admin

    @property
    def namespace(self):
        """Gets the namespace of this AnalyticsRuleWalletDefinition.  # noqa: E501

        A `Namespace` describes what Asset IDs can be issued in an Issuance Rule. It is a string in the same format as `AssetId`. Additionally, if it ends with a wildcard character `*`, then the namespace covers all asset IDs with the namespace as a prefix. Without a final wildcard, the namespace covers exactly one asset ID. Example: The namespace `currencies.dollar` covers only this exact asset type, while `currencies.*` covers all asset types that start with `currencies.`.   # noqa: E501

        :return: The namespace of this AnalyticsRuleWalletDefinition.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this AnalyticsRuleWalletDefinition.

        A `Namespace` describes what Asset IDs can be issued in an Issuance Rule. It is a string in the same format as `AssetId`. Additionally, if it ends with a wildcard character `*`, then the namespace covers all asset IDs with the namespace as a prefix. Without a final wildcard, the namespace covers exactly one asset ID. Example: The namespace `currencies.dollar` covers only this exact asset type, while `currencies.*` covers all asset types that start with `currencies.`.   # noqa: E501

        :param namespace: The namespace of this AnalyticsRuleWalletDefinition.  # noqa: E501
        :type: str
        """

        self._namespace = namespace

    @property
    def can_issue_confidentially(self):
        """Gets the can_issue_confidentially of this AnalyticsRuleWalletDefinition.  # noqa: E501

        Boolean signifying whether the Rule grants confidentialy issuance rights; if true, then both public and confidential issuance right are granted; if false, then only public issuance rights are granted  # noqa: E501

        :return: The can_issue_confidentially of this AnalyticsRuleWalletDefinition.  # noqa: E501
        :rtype: bool
        """
        return self._can_issue_confidentially

    @can_issue_confidentially.setter
    def can_issue_confidentially(self, can_issue_confidentially):
        """Sets the can_issue_confidentially of this AnalyticsRuleWalletDefinition.

        Boolean signifying whether the Rule grants confidentialy issuance rights; if true, then both public and confidential issuance right are granted; if false, then only public issuance rights are granted  # noqa: E501

        :param can_issue_confidentially: The can_issue_confidentially of this AnalyticsRuleWalletDefinition.  # noqa: E501
        :type: bool
        """

        self._can_issue_confidentially = can_issue_confidentially

    @property
    def operation(self):
        """Gets the operation of this AnalyticsRuleWalletDefinition.  # noqa: E501

        Operation of the transaction, which can be rule creation or deletion  # noqa: E501

        :return: The operation of this AnalyticsRuleWalletDefinition.  # noqa: E501
        :rtype: str
        """
        return self._operation

    @operation.setter
    def operation(self, operation):
        """Sets the operation of this AnalyticsRuleWalletDefinition.

        Operation of the transaction, which can be rule creation or deletion  # noqa: E501

        :param operation: The operation of this AnalyticsRuleWalletDefinition.  # noqa: E501
        :type: str
        """
        allowed_values = ["CreateRule", "DeleteRule"]  # noqa: E501
        if operation not in allowed_values:
            raise ValueError(
                "Invalid value for `operation` ({0}), must be one of {1}"  # noqa: E501
                .format(operation, allowed_values)
            )

        self._operation = operation

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AnalyticsRuleWalletDefinition):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
