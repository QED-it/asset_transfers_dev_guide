# coding: utf-8

"""
    QEDIT - Asset Transfers

    This SDK provides a programmatic way for interacting with QEDIT's _Asset Transfer_ API. The specification definition file is publicly available [in this repository](https://github.com/QED-it/asset_transfers_dev_guide/).   # noqa: E501

    OpenAPI spec version: 1.6.2
    Contact: dev@qed-it.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class AnalyticsIssueTx(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'outputs': 'list[AnalyticsOutput]',
        'public_key': 'str',
        'signature': 'str'
    }

    attribute_map = {
        'outputs': 'outputs',
        'public_key': 'public_key',
        'signature': 'signature'
    }

    def __init__(self, outputs=None, public_key=None, signature=None):  # noqa: E501
        """AnalyticsIssueTx - a model defined in OpenAPI"""  # noqa: E501

        self._outputs = None
        self._public_key = None
        self._signature = None
        self.discriminator = None

        if outputs is not None:
            self.outputs = outputs
        if public_key is not None:
            self.public_key = public_key
        if signature is not None:
            self.signature = signature

    @property
    def outputs(self):
        """Gets the outputs of this AnalyticsIssueTx.  # noqa: E501

        The data of the Assets issued (multiple Assets may potentially be issued in a single Issuance transaction)  # noqa: E501

        :return: The outputs of this AnalyticsIssueTx.  # noqa: E501
        :rtype: list[AnalyticsOutput]
        """
        return self._outputs

    @outputs.setter
    def outputs(self, outputs):
        """Sets the outputs of this AnalyticsIssueTx.

        The data of the Assets issued (multiple Assets may potentially be issued in a single Issuance transaction)  # noqa: E501

        :param outputs: The outputs of this AnalyticsIssueTx.  # noqa: E501
        :type: list[AnalyticsOutput]
        """

        self._outputs = outputs

    @property
    def public_key(self):
        """Gets the public_key of this AnalyticsIssueTx.  # noqa: E501

        The public key of the Wallet that performed the Issuance  # noqa: E501

        :return: The public_key of this AnalyticsIssueTx.  # noqa: E501
        :rtype: str
        """
        return self._public_key

    @public_key.setter
    def public_key(self, public_key):
        """Sets the public_key of this AnalyticsIssueTx.

        The public key of the Wallet that performed the Issuance  # noqa: E501

        :param public_key: The public_key of this AnalyticsIssueTx.  # noqa: E501
        :type: str
        """

        self._public_key = public_key

    @property
    def signature(self):
        """Gets the signature of this AnalyticsIssueTx.  # noqa: E501

        The signature on the transaction by the secret key of the Wallet that performed the Issuance  # noqa: E501

        :return: The signature of this AnalyticsIssueTx.  # noqa: E501
        :rtype: str
        """
        return self._signature

    @signature.setter
    def signature(self, signature):
        """Sets the signature of this AnalyticsIssueTx.

        The signature on the transaction by the secret key of the Wallet that performed the Issuance  # noqa: E501

        :param signature: The signature of this AnalyticsIssueTx.  # noqa: E501
        :type: str
        """

        self._signature = signature

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AnalyticsIssueTx):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
