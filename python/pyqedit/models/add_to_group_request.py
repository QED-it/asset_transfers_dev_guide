# coding: utf-8

"""
    QEDIT - Asset Transfers

    This SDK provides a programmatic way for interacting with QEDIT's _Asset Transfer_ API. The specification definition file is publicly available [in this repository](https://github.com/QED-it/asset_transfers_dev_guide/).   # noqa: E501

    OpenAPI spec version: 1.7.2
    Contact: dev@qed-it.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class AddToGroupRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'wallet_id': 'str',
        'group_id': 'str',
        'read_permission': 'bool',
        'memo': 'str',
        'recipient_address': 'str'
    }

    attribute_map = {
        'wallet_id': 'wallet_id',
        'group_id': 'group_id',
        'read_permission': 'read_permission',
        'memo': 'memo',
        'recipient_address': 'recipient_address'
    }

    def __init__(self, wallet_id=None, group_id=None, read_permission=None, memo=None, recipient_address=None):  # noqa: E501
        """AddToGroupRequest - a model defined in OpenAPI"""  # noqa: E501

        self._wallet_id = None
        self._group_id = None
        self._read_permission = None
        self._memo = None
        self._recipient_address = None
        self.discriminator = None

        self.wallet_id = wallet_id
        self.group_id = group_id
        if read_permission is not None:
            self.read_permission = read_permission
        if memo is not None:
            self.memo = memo
        self.recipient_address = recipient_address

    @property
    def wallet_id(self):
        """Gets the wallet_id of this AddToGroupRequest.  # noqa: E501

        The Node-specific identifier of the Wallet that is sharing the credentials for the Group  # noqa: E501

        :return: The wallet_id of this AddToGroupRequest.  # noqa: E501
        :rtype: str
        """
        return self._wallet_id

    @wallet_id.setter
    def wallet_id(self, wallet_id):
        """Sets the wallet_id of this AddToGroupRequest.

        The Node-specific identifier of the Wallet that is sharing the credentials for the Group  # noqa: E501

        :param wallet_id: The wallet_id of this AddToGroupRequest.  # noqa: E501
        :type: str
        """
        if wallet_id is None:
            raise ValueError("Invalid value for `wallet_id`, must not be `None`")  # noqa: E501

        self._wallet_id = wallet_id

    @property
    def group_id(self):
        """Gets the group_id of this AddToGroupRequest.  # noqa: E501

        The unique identifier of the Group whose credentials will be shared  # noqa: E501

        :return: The group_id of this AddToGroupRequest.  # noqa: E501
        :rtype: str
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this AddToGroupRequest.

        The unique identifier of the Group whose credentials will be shared  # noqa: E501

        :param group_id: The group_id of this AddToGroupRequest.  # noqa: E501
        :type: str
        """
        if group_id is None:
            raise ValueError("Invalid value for `group_id`, must not be `None`")  # noqa: E501

        self._group_id = group_id

    @property
    def read_permission(self):
        """Gets the read_permission of this AddToGroupRequest.  # noqa: E501

        Boolean that should be set to true if and only if read permission should be shared. Note that write permission is always shared and there's no option for read-only permission. Defaults to false.  # noqa: E501

        :return: The read_permission of this AddToGroupRequest.  # noqa: E501
        :rtype: bool
        """
        return self._read_permission

    @read_permission.setter
    def read_permission(self, read_permission):
        """Sets the read_permission of this AddToGroupRequest.

        Boolean that should be set to true if and only if read permission should be shared. Note that write permission is always shared and there's no option for read-only permission. Defaults to false.  # noqa: E501

        :param read_permission: The read_permission of this AddToGroupRequest.  # noqa: E501
        :type: bool
        """

        self._read_permission = read_permission

    @property
    def memo(self):
        """Gets the memo of this AddToGroupRequest.  # noqa: E501

        Memo to be used by the application to define the purpose of the group and why its credentials were shared. Should include information about who is sharing the group if this information is relevant. Defaults to an empty string  # noqa: E501

        :return: The memo of this AddToGroupRequest.  # noqa: E501
        :rtype: str
        """
        return self._memo

    @memo.setter
    def memo(self, memo):
        """Sets the memo of this AddToGroupRequest.

        Memo to be used by the application to define the purpose of the group and why its credentials were shared. Should include information about who is sharing the group if this information is relevant. Defaults to an empty string  # noqa: E501

        :param memo: The memo of this AddToGroupRequest.  # noqa: E501
        :type: str
        """

        self._memo = memo

    @property
    def recipient_address(self):
        """Gets the recipient_address of this AddToGroupRequest.  # noqa: E501

        An Address of the Wallet with which the Group credentials should be shared  # noqa: E501

        :return: The recipient_address of this AddToGroupRequest.  # noqa: E501
        :rtype: str
        """
        return self._recipient_address

    @recipient_address.setter
    def recipient_address(self, recipient_address):
        """Sets the recipient_address of this AddToGroupRequest.

        An Address of the Wallet with which the Group credentials should be shared  # noqa: E501

        :param recipient_address: The recipient_address of this AddToGroupRequest.  # noqa: E501
        :type: str
        """
        if recipient_address is None:
            raise ValueError("Invalid value for `recipient_address`, must not be `None`")  # noqa: E501

        self._recipient_address = recipient_address

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AddToGroupRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
