# coding: utf-8

"""
    QEDIT - Asset Transfers

    This SDK provides a programmatic way for interacting with QEDIT's _Asset Transfer_ API. The specification definition file is publicly available [in this repository](https://github.com/QED-it/asset_transfers_dev_guide/).   # noqa: E501

    OpenAPI spec version: 1.6.2
    Contact: dev@qed-it.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class AnalyticsSpendDescription(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'cv': 'str',
        'anchor': 'str',
        'nullifier': 'str',
        'zkproof': 'str'
    }

    attribute_map = {
        'cv': 'cv',
        'anchor': 'anchor',
        'nullifier': 'nullifier',
        'zkproof': 'zkproof'
    }

    def __init__(self, cv=None, anchor=None, nullifier=None, zkproof=None):  # noqa: E501
        """AnalyticsSpendDescription - a model defined in OpenAPI"""  # noqa: E501

        self._cv = None
        self._anchor = None
        self._nullifier = None
        self._zkproof = None
        self.discriminator = None

        if cv is not None:
            self.cv = cv
        if anchor is not None:
            self.anchor = anchor
        if nullifier is not None:
            self.nullifier = nullifier
        if zkproof is not None:
            self.zkproof = zkproof

    @property
    def cv(self):
        """Gets the cv of this AnalyticsSpendDescription.  # noqa: E501

        The commitment to both the Asset Type and amount of the Note  # noqa: E501

        :return: The cv of this AnalyticsSpendDescription.  # noqa: E501
        :rtype: str
        """
        return self._cv

    @cv.setter
    def cv(self, cv):
        """Sets the cv of this AnalyticsSpendDescription.

        The commitment to both the Asset Type and amount of the Note  # noqa: E501

        :param cv: The cv of this AnalyticsSpendDescription.  # noqa: E501
        :type: str
        """

        self._cv = cv

    @property
    def anchor(self):
        """Gets the anchor of this AnalyticsSpendDescription.  # noqa: E501

        The anchor (root) of the Merkle tree used in the Proof  # noqa: E501

        :return: The anchor of this AnalyticsSpendDescription.  # noqa: E501
        :rtype: str
        """
        return self._anchor

    @anchor.setter
    def anchor(self, anchor):
        """Sets the anchor of this AnalyticsSpendDescription.

        The anchor (root) of the Merkle tree used in the Proof  # noqa: E501

        :param anchor: The anchor of this AnalyticsSpendDescription.  # noqa: E501
        :type: str
        """

        self._anchor = anchor

    @property
    def nullifier(self):
        """Gets the nullifier of this AnalyticsSpendDescription.  # noqa: E501

        The Note's Nullifier  # noqa: E501

        :return: The nullifier of this AnalyticsSpendDescription.  # noqa: E501
        :rtype: str
        """
        return self._nullifier

    @nullifier.setter
    def nullifier(self, nullifier):
        """Sets the nullifier of this AnalyticsSpendDescription.

        The Note's Nullifier  # noqa: E501

        :param nullifier: The nullifier of this AnalyticsSpendDescription.  # noqa: E501
        :type: str
        """

        self._nullifier = nullifier

    @property
    def zkproof(self):
        """Gets the zkproof of this AnalyticsSpendDescription.  # noqa: E501

        The Proof that the Note indeed exists in the Merkle tree and belongs to the spender  # noqa: E501

        :return: The zkproof of this AnalyticsSpendDescription.  # noqa: E501
        :rtype: str
        """
        return self._zkproof

    @zkproof.setter
    def zkproof(self, zkproof):
        """Sets the zkproof of this AnalyticsSpendDescription.

        The Proof that the Note indeed exists in the Merkle tree and belongs to the spender  # noqa: E501

        :param zkproof: The zkproof of this AnalyticsSpendDescription.  # noqa: E501
        :type: str
        """

        self._zkproof = zkproof

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AnalyticsSpendDescription):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
